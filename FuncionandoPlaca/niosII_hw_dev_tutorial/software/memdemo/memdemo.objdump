
memdemo.elf:     file format elf32-littlenios2
memdemo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000140

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000600 memsz 0x00000600 flags r-x
    LOAD off    0x00001620 vaddr 0x00000620 paddr 0x00000630 align 2**12
         filesz 0x00000010 memsz 0x00000010 flags rw-
    LOAD off    0x00001640 vaddr 0x00000640 paddr 0x00000640 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000004c8  00000140  00000140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00000608  00000608  00001608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000010  00000620  00000630  00001620  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00000640  00000640  00001640  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000298  00000000  00000000  00001658  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000003d1  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000180f  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d34  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002855  00000000  00000000  00004204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002cc  00000000  00000000  00006a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000821  00000000  00000000  00006d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000045b  00000000  00000000  00007549  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000079a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  000079c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00008cac  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00008caf  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008cb2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008cb3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00008cb4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00008cb8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00008cbc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00008cc9  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00008cd2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00008cdb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  00008ced  2**0
                  CONTENTS, READONLY
 29 .jdi          000055f2  00000000  00000000  00008d10  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00045535  00000000  00000000  0000e302  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000140 l    d  .text	00000000 .text
00000608 l    d  .rodata	00000000 .rodata
00000620 l    d  .rwdata	00000000 .rwdata
00000640 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000194 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000374 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00000220 g     F .text	0000002c alt_main
00000660 g     O .bss	00000100 alt_irq
00000630 g       *ABS*	00000000 __flash_rwdata_start
00100000 g       *ABS*	00000000 __alt_mem_sram
00000650 g     O .bss	00000004 altera_avalon_timer_ts_freq
0000024c g     F .text	00000038 alt_putstr
00000620 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000644 g     O .bss	00000004 alt_argv
00008620 g       *ABS*	00000000 _gp
000005b0 g     F .text	00000038 alt_icache_flush
00000760 g       *ABS*	00000000 __bss_end
0000045c g     F .text	0000006c alt_iic_isr_register
000004fc g     F .text	000000ac alt_tick
000003c0 g     F .text	00000018 alt_ic_irq_enabled
000004c8 g     F .text	00000034 alt_alarm_stop
00000654 g     O .bss	00000004 alt_irq_active
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000ec g     F .exceptions	00000054 alt_irq_handler
000003b0 g     F .text	00000004 alt_dcache_flush_all
00000630 g       *ABS*	00000000 __ram_rwdata_end
00000620 g       *ABS*	00000000 __ram_rodata_end
00000760 g       *ABS*	00000000 end
00005000 g       *ABS*	00000000 __alt_stack_pointer
00000324 g     F .text	00000050 alt_avalon_timer_sc_init
000002f0 g     F .text	00000034 altera_avalon_jtag_uart_write
00000140 g     F .text	0000003c _start
00000658 g     O .bss	00000004 _alt_tick_rate
0000065c g     O .bss	00000004 _alt_nticks
00000284 g     F .text	0000004c alt_sys_init
00000620 g       *ABS*	00000000 __ram_rwdata_start
00000608 g       *ABS*	00000000 __ram_rodata_start
00000760 g       *ABS*	00000000 __alt_stack_base
00000640 g       *ABS*	00000000 __bss_start
0000017c g     F .text	00000018 main
00000648 g     O .bss	00000004 alt_envp
00000608 g       *ABS*	00000000 __flash_rodata_start
000002d0 g     F .text	00000020 alt_irq_init
00000640 g     O .bss	00000004 alt_argc
0000064c g     O .bss	00000004 altera_avalon_timer_ts_base
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000458 g     F .text	00000004 alt_ic_isr_register
00000630 g       *ABS*	00000000 _edata
00000760 g       *ABS*	00000000 _end
00000140 g       *ABS*	00000000 __ram_exceptions_end
00000418 g     F .text	00000040 alt_ic_irq_disable
000005a8 g     F .text	00000008 altera_nios2_qsys_irq_init
0000001c g       .entry	00000000 exit
00005000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
0000001c g       .entry	00000000 _exit
000005e8 g     F .text	00000020 strlen
000003b4 g     F .text	0000000c alt_icache_flush_all
00000624 g     O .rwdata	00000004 alt_priority_mask
000003d8 g     F .text	00000040 alt_ic_irq_enable
00000628 g     O .rwdata	00000008 alt_alarm_list
000001b4 g     F .text	0000006c alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405014 	ori	at,at,320
    jmp r1
  18:	0800683a 	jmp	at

0000001c <_exit>:
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	deffff04 	addi	sp,sp,-4
  f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f4:	0009313a 	rdctl	r4,ipending
  f8:	00c00044 	movi	r3,1
  fc:	01400034 	movhi	r5,0
 100:	29419804 	addi	r5,r5,1632
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 10c:	10000726 	beq	r2,zero,12c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 110:	29000117 	ldw	r4,4(r5)
 114:	28800017 	ldw	r2,0(r5)
 118:	103ee83a 	callr	r2
 11c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 120:	10000426 	beq	r2,zero,134 <alt_irq_handler+0x48>
 124:	1009883a 	mov	r4,r2
 128:	003ff306 	br	f8 <alt_irq_handler+0xc>
 12c:	29400204 	addi	r5,r5,8
 130:	003ff406 	br	104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 134:	dfc00017 	ldw	ra,0(sp)
 138:	dec00104 	addi	sp,sp,4
 13c:	f800283a 	ret

Disassembly of section .text:

00000140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 140:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 144:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 148:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 14c:	d6a18814 	ori	gp,gp,34336
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 150:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 154:	10819014 	ori	r2,r2,1600

    movhi r3, %hi(__bss_end)
 158:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 15c:	18c1d814 	ori	r3,r3,1888

    beq r2, r3, 1f
 160:	10c00326 	beq	r2,r3,170 <_start+0x30>

0:
    stw zero, (r2)
 164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 16c:	10fffd36 	bltu	r2,r3,164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 170:	00001b40 	call	1b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 174:	00002200 	call	220 <alt_main>

00000178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 178:	003fff06 	br	178 <alt_after_alt_main>

0000017c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
 17c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 180:	01000034 	movhi	r4,0
 184:	21018204 	addi	r4,r4,1544
 */

#include "sys/alt_stdio.h"

int main()
{ 
 188:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 18c:	000024c0 	call	24c <alt_putstr>
 190:	003fff06 	br	190 <main+0x14>

00000194 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 194:	2900051e 	bne	r5,r4,1ac <alt_load_section+0x18>
 198:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
 19c:	20800017 	ldw	r2,0(r4)
 1a0:	21000104 	addi	r4,r4,4
 1a4:	28800015 	stw	r2,0(r5)
 1a8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1ac:	29bffb1e 	bne	r5,r6,19c <alt_load_section+0x8>
 1b0:	f800283a 	ret

000001b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1b4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1b8:	01000034 	movhi	r4,0
 1bc:	21018c04 	addi	r4,r4,1584
 1c0:	01400034 	movhi	r5,0
 1c4:	29418804 	addi	r5,r5,1568
 1c8:	01800034 	movhi	r6,0
 1cc:	31818c04 	addi	r6,r6,1584
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1d0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1d4:	00001940 	call	194 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1d8:	01000034 	movhi	r4,0
 1dc:	21000804 	addi	r4,r4,32
 1e0:	01400034 	movhi	r5,0
 1e4:	29400804 	addi	r5,r5,32
 1e8:	01800034 	movhi	r6,0
 1ec:	31805004 	addi	r6,r6,320
 1f0:	00001940 	call	194 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1f4:	01000034 	movhi	r4,0
 1f8:	21018204 	addi	r4,r4,1544
 1fc:	01400034 	movhi	r5,0
 200:	29418204 	addi	r5,r5,1544
 204:	01800034 	movhi	r6,0
 208:	31818804 	addi	r6,r6,1568
 20c:	00001940 	call	194 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 210:	00003b00 	call	3b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 214:	dfc00017 	ldw	ra,0(sp)
 218:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 21c:	00003b41 	jmpi	3b4 <alt_icache_flush_all>

00000220 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 220:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 224:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 228:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 22c:	00002d00 	call	2d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 230:	00002840 	call	284 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 234:	d1200817 	ldw	r4,-32736(gp)
 238:	d1600917 	ldw	r5,-32732(gp)
 23c:	d1a00a17 	ldw	r6,-32728(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 240:	dfc00017 	ldw	ra,0(sp)
 244:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 248:	000017c1 	jmpi	17c <main>

0000024c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 24c:	defffe04 	addi	sp,sp,-8
 250:	dc000015 	stw	r16,0(sp)
 254:	dfc00115 	stw	ra,4(sp)
 258:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 25c:	00005e80 	call	5e8 <strlen>
 260:	800b883a 	mov	r5,r16
 264:	100d883a 	mov	r6,r2
 268:	01000034 	movhi	r4,0
 26c:	21018804 	addi	r4,r4,1568
 270:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
 274:	dfc00117 	ldw	ra,4(sp)
 278:	dc000017 	ldw	r16,0(sp)
 27c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 280:	00002f01 	jmpi	2f0 <altera_avalon_jtag_uart_write>

00000284 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 284:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 288:	01241014 	movui	r4,36928
 28c:	000b883a 	mov	r5,zero
 290:	01800044 	movi	r6,1
 294:	01c0fa04 	movi	r7,1000
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 298:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 29c:	00003240 	call	324 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
 2a0:	00e40014 	movui	r3,36864
 2a4:	00800034 	movhi	r2,0
 2a8:	10819304 	addi	r2,r2,1612
 2ac:	10c00015 	stw	r3,0(r2)
 2b0:	00c0bef4 	movhi	r3,763
 2b4:	18fc2004 	addi	r3,r3,-3968
 2b8:	00800034 	movhi	r2,0
 2bc:	10819404 	addi	r2,r2,1616
 2c0:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 2c4:	dfc00017 	ldw	ra,0(sp)
 2c8:	dec00104 	addi	sp,sp,4
 2cc:	f800283a 	ret

000002d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2d0:	deffff04 	addi	sp,sp,-4
 2d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2d8:	00005a80 	call	5a8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2dc:	00800044 	movi	r2,1
 2e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2e4:	dfc00017 	ldw	ra,0(sp)
 2e8:	dec00104 	addi	sp,sp,4
 2ec:	f800283a 	ret

000002f0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 2f0:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
 2f4:	298f883a 	add	r7,r5,r6
 2f8:	20c00104 	addi	r3,r4,4
 2fc:	00000606 	br	318 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 300:	18800037 	ldwio	r2,0(r3)
 304:	10bfffec 	andhi	r2,r2,65535
 308:	10000326 	beq	r2,zero,318 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 30c:	28800007 	ldb	r2,0(r5)
 310:	29400044 	addi	r5,r5,1
 314:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 318:	29fff936 	bltu	r5,r7,300 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 31c:	3005883a 	mov	r2,r6
 320:	f800283a 	ret

00000324 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 324:	02000034 	movhi	r8,0
 328:	42019604 	addi	r8,r8,1624
 32c:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 330:	defffe04 	addi	sp,sp,-8
 334:	3807883a 	mov	r3,r7
 338:	dfc00115 	stw	ra,4(sp)
 33c:	200f883a 	mov	r7,r4
 340:	1000011e 	bne	r2,zero,348 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
 344:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 348:	008001c4 	movi	r2,7
 34c:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 350:	2809883a 	mov	r4,r5
 354:	300b883a 	mov	r5,r6
 358:	01800034 	movhi	r6,0
 35c:	3180dd04 	addi	r6,r6,884
 360:	d8000015 	stw	zero,0(sp)
 364:	00004580 	call	458 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 368:	dfc00117 	ldw	ra,4(sp)
 36c:	dec00204 	addi	sp,sp,8
 370:	f800283a 	ret

00000374 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 374:	defffe04 	addi	sp,sp,-8
 378:	dfc00115 	stw	ra,4(sp)
 37c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 380:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 384:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 388:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 38c:	00bfff84 	movi	r2,-2
 390:	8084703a 	and	r2,r16,r2
 394:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 398:	00004fc0 	call	4fc <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 39c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 3a0:	dfc00117 	ldw	ra,4(sp)
 3a4:	dc000017 	ldw	r16,0(sp)
 3a8:	dec00204 	addi	sp,sp,8
 3ac:	f800283a 	ret

000003b0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 3b0:	f800283a 	ret

000003b4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 3b4:	0009883a 	mov	r4,zero
 3b8:	01420004 	movi	r5,2048
 3bc:	00005b01 	jmpi	5b0 <alt_icache_flush>

000003c0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 3c0:	000530fa 	rdctl	r2,ienable
 3c4:	00c00044 	movi	r3,1
 3c8:	1946983a 	sll	r3,r3,r5
 3cc:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
 3d0:	1004c03a 	cmpne	r2,r2,zero
 3d4:	f800283a 	ret

000003d8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 3d8:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 3dc:	00bfff84 	movi	r2,-2
 3e0:	3084703a 	and	r2,r6,r2
 3e4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 3e8:	01000034 	movhi	r4,0
 3ec:	21019504 	addi	r4,r4,1620
 3f0:	00c00044 	movi	r3,1
 3f4:	20800017 	ldw	r2,0(r4)
 3f8:	1946983a 	sll	r3,r3,r5
 3fc:	10c4b03a 	or	r2,r2,r3
 400:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 404:	20800017 	ldw	r2,0(r4)
 408:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 410:	0005883a 	mov	r2,zero
 414:	f800283a 	ret

00000418 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 418:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41c:	00bfff84 	movi	r2,-2
 420:	3084703a 	and	r2,r6,r2
 424:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 428:	01000034 	movhi	r4,0
 42c:	21019504 	addi	r4,r4,1620
 430:	00ffff84 	movi	r3,-2
 434:	20800017 	ldw	r2,0(r4)
 438:	1946183a 	rol	r3,r3,r5
 43c:	10c4703a 	and	r2,r2,r3
 440:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 444:	20800017 	ldw	r2,0(r4)
 448:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 44c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 450:	0005883a 	mov	r2,zero
 454:	f800283a 	ret

00000458 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 458:	000045c1 	jmpi	45c <alt_iic_isr_register>

0000045c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 45c:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 460:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 464:	dfc00115 	stw	ra,4(sp)
 468:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 46c:	00fffa84 	movi	r3,-22
 470:	11401016 	blt	r2,r5,4b4 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 474:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 478:	00bfff84 	movi	r2,-2
 47c:	8084703a 	and	r2,r16,r2
 480:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 484:	280490fa 	slli	r2,r5,3
 488:	00c00034 	movhi	r3,0
 48c:	18c19804 	addi	r3,r3,1632
 490:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
 494:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 498:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 49c:	30000226 	beq	r6,zero,4a8 <alt_iic_isr_register+0x4c>
 4a0:	00003d80 	call	3d8 <alt_ic_irq_enable>
 4a4:	00000106 	br	4ac <alt_iic_isr_register+0x50>
 4a8:	00004180 	call	418 <alt_ic_irq_disable>
 4ac:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4b0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 4b4:	1805883a 	mov	r2,r3
 4b8:	dfc00117 	ldw	ra,4(sp)
 4bc:	dc000017 	ldw	r16,0(sp)
 4c0:	dec00204 	addi	sp,sp,8
 4c4:	f800283a 	ret

000004c8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4c8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4cc:	00bfff84 	movi	r2,-2
 4d0:	2884703a 	and	r2,r5,r2
 4d4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4d8:	20c00017 	ldw	r3,0(r4)
 4dc:	20800117 	ldw	r2,4(r4)
 4e0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4e4:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4e8:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
 4ec:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
 4f0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4f4:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 4f8:	f800283a 	ret

000004fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4fc:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 500:	d0a00f17 	ldw	r2,-32708(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 504:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 508:	d4200217 	ldw	r16,-32760(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 50c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 510:	dfc00215 	stw	ra,8(sp)
 514:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 518:	d0a00f15 	stw	r2,-32708(gp)
 51c:	00001b06 	br	58c <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 520:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 524:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 528:	10000326 	beq	r2,zero,538 <alt_tick+0x3c>
 52c:	d0a00f17 	ldw	r2,-32708(gp)
 530:	1000011e 	bne	r2,zero,538 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
 534:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 538:	d0e00f17 	ldw	r3,-32708(gp)
 53c:	80800217 	ldw	r2,8(r16)
 540:	18801136 	bltu	r3,r2,588 <alt_tick+0x8c>
 544:	80800403 	ldbu	r2,16(r16)
 548:	10000f1e 	bne	r2,zero,588 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
 54c:	81000517 	ldw	r4,20(r16)
 550:	80800317 	ldw	r2,12(r16)
 554:	103ee83a 	callr	r2
 558:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 55c:	1000031e 	bne	r2,zero,56c <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
 560:	8009883a 	mov	r4,r16
 564:	00004c80 	call	4c8 <alt_alarm_stop>
 568:	00000706 	br	588 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
 56c:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 570:	d0e00f17 	ldw	r3,-32708(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 574:	1105883a 	add	r2,r2,r4
 578:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 57c:	10c0022e 	bgeu	r2,r3,588 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
 580:	00800044 	movi	r2,1
 584:	80800405 	stb	r2,16(r16)
 588:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 58c:	d0a00204 	addi	r2,gp,-32760
 590:	80bfe31e 	bne	r16,r2,520 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 594:	dfc00217 	ldw	ra,8(sp)
 598:	dc400117 	ldw	r17,4(sp)
 59c:	dc000017 	ldw	r16,0(sp)
 5a0:	dec00304 	addi	sp,sp,12
 5a4:	f800283a 	ret

000005a8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 5a8:	000170fa 	wrctl	ienable,zero
}
 5ac:	f800283a 	ret

000005b0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 5b0:	00820004 	movi	r2,2048
 5b4:	2007883a 	mov	r3,r4
 5b8:	1140012e 	bgeu	r2,r5,5c0 <alt_icache_flush+0x10>
 5bc:	100b883a 	mov	r5,r2
 5c0:	194b883a 	add	r5,r3,r5
 5c4:	00000206 	br	5d0 <alt_icache_flush+0x20>

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 5c8:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 5cc:	18c00804 	addi	r3,r3,32
 5d0:	197ffd36 	bltu	r3,r5,5c8 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 5d4:	208007cc 	andi	r2,r4,31
 5d8:	10000126 	beq	r2,zero,5e0 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 5dc:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 5e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 5e4:	f800283a 	ret

000005e8 <strlen>:
 5e8:	20800007 	ldb	r2,0(r4)
 5ec:	10000526 	beq	r2,zero,604 <strlen+0x1c>
 5f0:	2007883a 	mov	r3,r4
 5f4:	18c00044 	addi	r3,r3,1
 5f8:	18800007 	ldb	r2,0(r3)
 5fc:	103ffd1e 	bne	r2,zero,5f4 <strlen+0xc>
 600:	1905c83a 	sub	r2,r3,r4
 604:	f800283a 	ret
