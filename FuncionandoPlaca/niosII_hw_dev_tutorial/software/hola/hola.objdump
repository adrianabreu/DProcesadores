
hola.elf:     file format elf32-littlenios2
hola.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002880 memsz 0x00002880 flags r-x
    LOAD off    0x000038a0 vaddr 0x000028a0 paddr 0x00002b80 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003e60 vaddr 0x00002e60 paddr 0x00002e60 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000026b8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  0000286c  0000286c  0000386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  000028a0  00002b80  000038a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00002e60  00002e60  00003e60  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000538  00000000  00000000  00003ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007e8  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009739  00000000  00000000  000048c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002403  00000000  00000000  0000e001  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000069c2  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008e0  00000000  00000000  00016dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d59  00000000  00000000  000176a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001710  00000000  00000000  00018401  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00019b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  00019b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001b796  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001b799  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001b79c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001b79d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001b79e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001b7a2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001b7a6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001b7aa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001b7b3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001b7bc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001b7c5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  0001b7d7  2**0
                  CONTENTS, READONLY
 29 .jdi          000055f2  00000000  00000000  0001b7fa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00045535  00000000  00000000  00020dec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000286c l    d  .rodata	00000000 .rodata
000028a0 l    d  .rwdata	00000000 .rwdata
00002e60 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000508 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000724 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000028a0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00001038 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00001224 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002980 l     O .rwdata	0000002c jtag_uart
00001320 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000015b0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_close.c
000017b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000182c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000190c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001c68 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001db8 l     F .text	000000f8 alt_file_locked
0000203c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00002648 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00002808 l     F .text	00000040 alt_sim_halt
000010a4 g     F .text	0000005c alt_main
00002e84 g     O .bss	00000100 alt_irq
00002b80 g       *ABS*	00000000 __flash_rwdata_start
0000068c g     F .text	00000054 printf
00100000 g       *ABS*	00000000 __alt_mem_sram
00002e74 g     O .bss	00000004 altera_avalon_timer_ts_freq
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002e60 g     O .bss	00000004 errno
00002e68 g     O .bss	00000004 alt_argv
0000ab54 g       *ABS*	00000000 _gp
000029d4 g     O .rwdata	00000180 alt_fd_list
000022d8 g     F .text	00000094 alt_find_dev
00001d40 g     F .text	00000078 alt_io_redirect
00001408 g     F .text	00000104 altera_avalon_jtag_uart_read
000006e0 g     F .text	00000044 _printf_r
00000644 g     F .text	00000008 __udivsi3
0000255c g     F .text	00000090 alt_icache_flush
00002b6c g     O .rwdata	00000004 alt_max_fd
00002b58 g     O .rwdata	00000004 _global_impure_ptr
00002f84 g       *ABS*	00000000 __bss_end
00001b70 g     F .text	000000f8 alt_iic_isr_register
000021ac g     F .text	0000010c alt_tick
00001b28 g     F .text	00000048 alt_ic_irq_enabled
00002114 g     F .text	00000098 alt_alarm_stop
00002e78 g     O .bss	00000004 alt_irq_active
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000ec g     F .exceptions	000000c8 alt_irq_handler
000029ac g     O .rwdata	00000028 alt_dev_null
00001810 g     F .text	0000001c alt_dcache_flush_all
00002b80 g       *ABS*	00000000 __ram_rwdata_end
00002b64 g     O .rwdata	00000008 alt_dev_list
00001100 g     F .text	00000124 write
000028a0 g       *ABS*	00000000 __ram_rodata_end
0000064c g     F .text	00000008 __umodsi3
00002f84 g       *ABS*	00000000 end
00005000 g       *ABS*	00000000 __alt_stack_pointer
00001620 g     F .text	00000090 alt_avalon_timer_sc_init
0000150c g     F .text	000000a4 altera_avalon_jtag_uart_write
000007a4 g     F .text	0000069c ___vfprintf_internal_r
0000264c g     F .text	000001bc __call_exitprocs
000001b4 g     F .text	0000003c _start
00002e7c g     O .bss	00000004 _alt_tick_rate
00002e80 g     O .bss	00000004 _alt_nticks
000012b8 g     F .text	00000068 alt_sys_init
00000654 g     F .text	00000038 __mulsi3
000028a0 g       *ABS*	00000000 __ram_rwdata_start
00000300 g     F .text	00000208 suavizadoMedia
0000286c g       *ABS*	00000000 __ram_rodata_start
00001358 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000248c g     F .text	000000d0 alt_get_fd
0000260c g     F .text	0000003c memcmp
00002f84 g       *ABS*	00000000 __alt_stack_base
0000236c g     F .text	00000120 alt_find_file
00001858 g     F .text	000000b4 alt_dev_llist_insert
00000e64 g     F .text	000000bc __sfvwrite_small_dev
00002e60 g       *ABS*	00000000 __bss_start
000001f0 g     F .text	00000110 main
00002e6c g     O .bss	00000004 alt_envp
000013b0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00002b70 g     O .rwdata	00000004 alt_errno
00000584 g     F .text	00000060 __divsi3
0000286c g       *ABS*	00000000 __flash_rodata_start
00001284 g     F .text	00000034 alt_irq_init
0000209c g     F .text	00000078 alt_release_fd
00000f40 g     F .text	00000078 _write_r
00002b54 g     O .rwdata	00000004 _impure_ptr
00002e64 g     O .bss	00000004 alt_argc
00002e70 g     O .bss	00000004 altera_avalon_timer_ts_base
00000020 g       .exceptions	00000000 alt_irq_entry
00002b5c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000199c g     F .text	00000050 alt_ic_isr_register
00002b80 g       *ABS*	00000000 _edata
00002f84 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00001a88 g     F .text	000000a0 alt_ic_irq_disable
000022b8 g     F .text	00000020 altera_nios2_qsys_irq_init
000025ec g     F .text	00000020 exit
000005e4 g     F .text	00000060 __modsi3
00005000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
00002848 g     F .text	00000020 _exit
00000f20 g     F .text	00000020 strlen
00001eb0 g     F .text	0000018c open
0000196c g     F .text	00000030 alt_icache_flush_all
00002b74 g     O .rwdata	00000004 alt_priority_mask
000019ec g     F .text	0000009c alt_ic_irq_enable
00000e40 g     F .text	00000024 __vfprintf_internal
00002b78 g     O .rwdata	00000008 alt_alarm_list
000016b0 g     F .text	00000100 close
00000fb8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18cba104 	addi	r3,r3,11908
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18cba104 	addi	r3,r3,11908
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6aad514 	ori	gp,gp,43860
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	108b9814 	ori	r2,r2,11872

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18cbe114 	ori	r3,r3,12164

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	0000fb80 	call	fb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	00010a40 	call	10a4 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
//#include "alt_types.h"
#include <stdlib.h>
void suavizadoMedia(unsigned int *pmatrizInicialb,unsigned int *pmatrizResultadob,unsigned int **pmatrizResultadof, int anchoInicial, int altoInicial, int dimensionFiltro);

int main()
{
     1f0:	defff004 	addi	sp,sp,-64
     1f4:	dfc00f15 	stw	ra,60(sp)
     1f8:	df000e15 	stw	fp,56(sp)
     1fc:	dc000d15 	stw	r16,52(sp)
     200:	df000d04 	addi	fp,sp,52
	unsigned int *pmatrizInicialb = 0; // Puntero que apunta al primer elemento de la matriz inicial
     204:	e03fff15 	stw	zero,-4(fp)
	unsigned int *pmatrizInicialf = 0; // Puntero que apunta a  la siguiente dirección a la última posición con valor de la matriz inicial
     208:	e03ffe15 	stw	zero,-8(fp)
	unsigned int *matrizResultadob = 0; // Puntero que apunta al primer elemento de la matriz resultado
     20c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int *matrizResultadof = 0;  // Puntero que apunta al ultimo elemento de la matriz resultado
     210:	e03ffc15 	stw	zero,-16(fp)
	unsigned int ancho = 20, alto = 20;
     214:	00800504 	movi	r2,20
     218:	e0bffb15 	stw	r2,-20(fp)
     21c:	00800504 	movi	r2,20
     220:	e0bffa15 	stw	r2,-24(fp)
	unsigned int *pbsram = 0; // Puntero qeu apuntará a la primera dirección de la memoria sram
     224:	e03ff915 	stw	zero,-28(fp)
	unsigned int *pbdsram = 0; // Puntero qeu apuntará a la primera dirección de la memoria sdram
     228:	e03ff815 	stw	zero,-32(fp)
	unsigned int *pmsram = 0;  // Puntero que se usa para comparar el ultimo valor que se puede tomar de la memoria sram
     22c:	e03ff715 	stw	zero,-36(fp)
    unsigned int *pmdsram = 0; // Puntero que se usa para comparar el ultimo valor que se puede tomar de la memoria sdram
     230:	e03ff615 	stw	zero,-40(fp)
	unsigned int *pmatriz= 0; // Puntero que apunta a  la siguiente dirección a la última posición con valor de la matriz inicial
     234:	e03ff515 	stw	zero,-44(fp)


	pbdsram = (unsigned int*) 0x01000000;
     238:	00804034 	movhi	r2,256
     23c:	e0bff815 	stw	r2,-32(fp)
    pbsram =(unsigned int*) 0x00100000;
     240:	00800434 	movhi	r2,16
     244:	e0bff915 	stw	r2,-28(fp)
	pmdsram = (unsigned int*) 0x017fffff;
     248:	00806034 	movhi	r2,384
     24c:	10bfffc4 	addi	r2,r2,-1
     250:	e0bff615 	stw	r2,-40(fp)
    pmsram =(unsigned int*) 0x0017ffff;
     254:	00800634 	movhi	r2,24
     258:	10bfffc4 	addi	r2,r2,-1
     25c:	e0bff715 	stw	r2,-36(fp)
	int i=0;
     260:	e03ff415 	stw	zero,-48(fp)
	unsigned int *a = pbdsram;
     264:	e0bff817 	ldw	r2,-32(fp)
     268:	e0bff315 	stw	r2,-52(fp)
	pmatrizInicialb = pbdsram;
     26c:	e0bff817 	ldw	r2,-32(fp)
     270:	e0bfff15 	stw	r2,-4(fp)
	for (;i < ancho*alto;i++)
     274:	00000b06 	br	2a4 <main+0xb4>
	{
		*a = i;
     278:	e0fff417 	ldw	r3,-48(fp)
     27c:	e0bff317 	ldw	r2,-52(fp)
     280:	10c00015 	stw	r3,0(r2)
		// printf("%d\n",*a);
		pmatrizInicialf = a;
     284:	e0bff317 	ldw	r2,-52(fp)
     288:	e0bffe15 	stw	r2,-8(fp)
		a++;
     28c:	e0bff317 	ldw	r2,-52(fp)
     290:	10800104 	addi	r2,r2,4
     294:	e0bff315 	stw	r2,-52(fp)
	pmdsram = (unsigned int*) 0x017fffff;
    pmsram =(unsigned int*) 0x0017ffff;
	int i=0;
	unsigned int *a = pbdsram;
	pmatrizInicialb = pbdsram;
	for (;i < ancho*alto;i++)
     298:	e0bff417 	ldw	r2,-48(fp)
     29c:	10800044 	addi	r2,r2,1
     2a0:	e0bff415 	stw	r2,-48(fp)
     2a4:	e43ff417 	ldw	r16,-48(fp)
     2a8:	e13ffb17 	ldw	r4,-20(fp)
     2ac:	e17ffa17 	ldw	r5,-24(fp)
     2b0:	00006540 	call	654 <__mulsi3>
     2b4:	80bff036 	bltu	r16,r2,278 <main+0x88>
		*a = i;
		// printf("%d\n",*a);
		pmatrizInicialf = a;
		a++;
	}
	a--;
     2b8:	e0bff317 	ldw	r2,-52(fp)
     2bc:	10bfff04 	addi	r2,r2,-4
     2c0:	e0bff315 	stw	r2,-52(fp)
	printf("%d\t%d",*a,i);
     2c4:	e0bff317 	ldw	r2,-52(fp)
     2c8:	11400017 	ldw	r5,0(r2)
     2cc:	01000034 	movhi	r4,0
     2d0:	210a1b04 	addi	r4,r4,10348
     2d4:	e1bff417 	ldw	r6,-48(fp)
     2d8:	000068c0 	call	68c <printf>
	matrizResultadob = a; // La matriz resultado se guarda en la siguiente posición al último elemento de la matriz inicial
     2dc:	e0bff317 	ldw	r2,-52(fp)
     2e0:	e0bffd15 	stw	r2,-12(fp)
			printf("%u\t",matrizResultado[i*18+j]);
			if(j == 17)
				printf("\n");
		}
    */
return 0;
     2e4:	0005883a 	mov	r2,zero
}
     2e8:	e037883a 	mov	sp,fp
     2ec:	dfc00217 	ldw	ra,8(sp)
     2f0:	df000117 	ldw	fp,4(sp)
     2f4:	dc000017 	ldw	r16,0(sp)
     2f8:	dec00304 	addi	sp,sp,12
     2fc:	f800283a 	ret

00000300 <suavizadoMedia>:


void suavizadoMedia(unsigned int *pmatrizInicialb,unsigned int *pmatrizResultadob,unsigned int **pmatrizResultadof, int anchoInicial, int altoInicial, int dimensionFiltro)
{
     300:	defff204 	addi	sp,sp,-56
     304:	dfc00d15 	stw	ra,52(sp)
     308:	df000c15 	stw	fp,48(sp)
     30c:	dc000b15 	stw	r16,44(sp)
     310:	df000b04 	addi	fp,sp,44
     314:	e13ffc15 	stw	r4,-16(fp)
     318:	e17ffd15 	stw	r5,-12(fp)
     31c:	e1bffe15 	stw	r6,-8(fp)
     320:	e1ffff15 	stw	r7,-4(fp)

	int media;
	int i,j,x,y;
	unsigned int *pauxmatrizInicial = 0;
     324:	e03ff615 	stw	zero,-40(fp)
	unsigned int *pauxmatrizResultado = pmatrizResultadob;
     328:	e0bffd17 	ldw	r2,-12(fp)
     32c:	e0bff515 	stw	r2,-44(fp)
	for(i = (dimensionFiltro/2); i < anchoInicial- (dimensionFiltro/2);i++)
     330:	e0c00417 	ldw	r3,16(fp)
     334:	1804d7fa 	srli	r2,r3,31
     338:	10c5883a 	add	r2,r2,r3
     33c:	1005d07a 	srai	r2,r2,1
     340:	e0bffa15 	stw	r2,-24(fp)
     344:	00006106 	br	4cc <suavizadoMedia+0x1cc>
	{
		for(j = (dimensionFiltro/2); j < altoInicial-(dimensionFiltro/2); j++)
     348:	e0c00417 	ldw	r3,16(fp)
     34c:	1804d7fa 	srli	r2,r3,31
     350:	10c5883a 	add	r2,r2,r3
     354:	1005d07a 	srai	r2,r2,1
     358:	e0bff915 	stw	r2,-28(fp)
     35c:	00004f06 	br	49c <suavizadoMedia+0x19c>
		{
			media = 0;
     360:	e03ffb15 	stw	zero,-20(fp)
			// desde -1 hasta 1 en caso de 3x3
			for(x = -(dimensionFiltro/2); x < (dimensionFiltro/2)+1; x ++)
     364:	e0c00417 	ldw	r3,16(fp)
     368:	1804d7fa 	srli	r2,r3,31
     36c:	10c5883a 	add	r2,r2,r3
     370:	1005d07a 	srai	r2,r2,1
     374:	0085c83a 	sub	r2,zero,r2
     378:	e0bff815 	stw	r2,-32(fp)
     37c:	00002e06 	br	438 <suavizadoMedia+0x138>
			{
				for(y = -(dimensionFiltro/2); y < (dimensionFiltro/2)+1; y++)
     380:	e0c00417 	ldw	r3,16(fp)
     384:	1804d7fa 	srli	r2,r3,31
     388:	10c5883a 	add	r2,r2,r3
     38c:	1005d07a 	srai	r2,r2,1
     390:	0085c83a 	sub	r2,zero,r2
     394:	e0bff715 	stw	r2,-36(fp)
     398:	00001d06 	br	410 <suavizadoMedia+0x110>
				{
				    pauxmatrizInicial =  pmatrizInicialb;
     39c:	e0bffc17 	ldw	r2,-16(fp)
     3a0:	e0bff615 	stw	r2,-40(fp)
				    pauxmatrizInicial = pauxmatrizInicial + ((i*anchoInicial + j) + (x * anchoInicial + y));
     3a4:	e13ffa17 	ldw	r4,-24(fp)
     3a8:	e17fff17 	ldw	r5,-4(fp)
     3ac:	00006540 	call	654 <__mulsi3>
     3b0:	1007883a 	mov	r3,r2
     3b4:	e0bff917 	ldw	r2,-28(fp)
     3b8:	18a1883a 	add	r16,r3,r2
     3bc:	e13ff817 	ldw	r4,-32(fp)
     3c0:	e17fff17 	ldw	r5,-4(fp)
     3c4:	00006540 	call	654 <__mulsi3>
     3c8:	1007883a 	mov	r3,r2
     3cc:	e0bff717 	ldw	r2,-36(fp)
     3d0:	1885883a 	add	r2,r3,r2
     3d4:	8085883a 	add	r2,r16,r2
     3d8:	1085883a 	add	r2,r2,r2
     3dc:	1085883a 	add	r2,r2,r2
     3e0:	1007883a 	mov	r3,r2
     3e4:	e0bff617 	ldw	r2,-40(fp)
     3e8:	10c5883a 	add	r2,r2,r3
     3ec:	e0bff615 	stw	r2,-40(fp)
					media += *pauxmatrizInicial;
     3f0:	e0bff617 	ldw	r2,-40(fp)
     3f4:	10c00017 	ldw	r3,0(r2)
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	1885883a 	add	r2,r3,r2
     400:	e0bffb15 	stw	r2,-20(fp)
		{
			media = 0;
			// desde -1 hasta 1 en caso de 3x3
			for(x = -(dimensionFiltro/2); x < (dimensionFiltro/2)+1; x ++)
			{
				for(y = -(dimensionFiltro/2); y < (dimensionFiltro/2)+1; y++)
     404:	e0bff717 	ldw	r2,-36(fp)
     408:	10800044 	addi	r2,r2,1
     40c:	e0bff715 	stw	r2,-36(fp)
     410:	e0c00417 	ldw	r3,16(fp)
     414:	1804d7fa 	srli	r2,r3,31
     418:	10c5883a 	add	r2,r2,r3
     41c:	1005d07a 	srai	r2,r2,1
     420:	10c00044 	addi	r3,r2,1
     424:	e0bff717 	ldw	r2,-36(fp)
     428:	10ffdc16 	blt	r2,r3,39c <suavizadoMedia+0x9c>
	{
		for(j = (dimensionFiltro/2); j < altoInicial-(dimensionFiltro/2); j++)
		{
			media = 0;
			// desde -1 hasta 1 en caso de 3x3
			for(x = -(dimensionFiltro/2); x < (dimensionFiltro/2)+1; x ++)
     42c:	e0bff817 	ldw	r2,-32(fp)
     430:	10800044 	addi	r2,r2,1
     434:	e0bff815 	stw	r2,-32(fp)
     438:	e0c00417 	ldw	r3,16(fp)
     43c:	1804d7fa 	srli	r2,r3,31
     440:	10c5883a 	add	r2,r2,r3
     444:	1005d07a 	srai	r2,r2,1
     448:	10c00044 	addi	r3,r2,1
     44c:	e0bff817 	ldw	r2,-32(fp)
     450:	10ffcb16 	blt	r2,r3,380 <suavizadoMedia+0x80>
				    pauxmatrizInicial =  pmatrizInicialb;
				    pauxmatrizInicial = pauxmatrizInicial + ((i*anchoInicial + j) + (x * anchoInicial + y));
					media += *pauxmatrizInicial;
				}
			}
            *pmatrizResultadof =  pauxmatrizResultado; // Se mueve el puentero hacia la ultima posicion del ultimo elemento de la matriz resultado internamente en la funcion
     454:	e0fffe17 	ldw	r3,-8(fp)
     458:	e0bff517 	ldw	r2,-44(fp)
     45c:	18800015 	stw	r2,0(r3)
			*pauxmatrizResultado = media/(dimensionFiltro*dimensionFiltro);
     460:	e1000417 	ldw	r4,16(fp)
     464:	e1400417 	ldw	r5,16(fp)
     468:	00006540 	call	654 <__mulsi3>
     46c:	100b883a 	mov	r5,r2
     470:	e13ffb17 	ldw	r4,-20(fp)
     474:	00005840 	call	584 <__divsi3>
     478:	1007883a 	mov	r3,r2
     47c:	e0bff517 	ldw	r2,-44(fp)
     480:	10c00015 	stw	r3,0(r2)
            pauxmatrizResultado = pauxmatrizResultado + 1;
     484:	e0bff517 	ldw	r2,-44(fp)
     488:	10800104 	addi	r2,r2,4
     48c:	e0bff515 	stw	r2,-44(fp)
	int i,j,x,y;
	unsigned int *pauxmatrizInicial = 0;
	unsigned int *pauxmatrizResultado = pmatrizResultadob;
	for(i = (dimensionFiltro/2); i < anchoInicial- (dimensionFiltro/2);i++)
	{
		for(j = (dimensionFiltro/2); j < altoInicial-(dimensionFiltro/2); j++)
     490:	e0bff917 	ldw	r2,-28(fp)
     494:	10800044 	addi	r2,r2,1
     498:	e0bff915 	stw	r2,-28(fp)
     49c:	e0c00417 	ldw	r3,16(fp)
     4a0:	1804d7fa 	srli	r2,r3,31
     4a4:	10c5883a 	add	r2,r2,r3
     4a8:	1005d07a 	srai	r2,r2,1
     4ac:	1007883a 	mov	r3,r2
     4b0:	e0800317 	ldw	r2,12(fp)
     4b4:	10c7c83a 	sub	r3,r2,r3
     4b8:	e0bff917 	ldw	r2,-28(fp)
     4bc:	10ffa816 	blt	r2,r3,360 <suavizadoMedia+0x60>

	int media;
	int i,j,x,y;
	unsigned int *pauxmatrizInicial = 0;
	unsigned int *pauxmatrizResultado = pmatrizResultadob;
	for(i = (dimensionFiltro/2); i < anchoInicial- (dimensionFiltro/2);i++)
     4c0:	e0bffa17 	ldw	r2,-24(fp)
     4c4:	10800044 	addi	r2,r2,1
     4c8:	e0bffa15 	stw	r2,-24(fp)
     4cc:	e0c00417 	ldw	r3,16(fp)
     4d0:	1804d7fa 	srli	r2,r3,31
     4d4:	10c5883a 	add	r2,r2,r3
     4d8:	1005d07a 	srai	r2,r2,1
     4dc:	1007883a 	mov	r3,r2
     4e0:	e0bfff17 	ldw	r2,-4(fp)
     4e4:	10c7c83a 	sub	r3,r2,r3
     4e8:	e0bffa17 	ldw	r2,-24(fp)
     4ec:	10ff9616 	blt	r2,r3,348 <suavizadoMedia+0x48>
            *pmatrizResultadof =  pauxmatrizResultado; // Se mueve el puentero hacia la ultima posicion del ultimo elemento de la matriz resultado internamente en la funcion
			*pauxmatrizResultado = media/(dimensionFiltro*dimensionFiltro);
            pauxmatrizResultado = pauxmatrizResultado + 1;
		}
	}
}
     4f0:	e037883a 	mov	sp,fp
     4f4:	dfc00217 	ldw	ra,8(sp)
     4f8:	df000117 	ldw	fp,4(sp)
     4fc:	dc000017 	ldw	r16,0(sp)
     500:	dec00304 	addi	sp,sp,12
     504:	f800283a 	ret

00000508 <udivmodsi4>:
     508:	29001b2e 	bgeu	r5,r4,578 <udivmodsi4+0x70>
     50c:	28001a16 	blt	r5,zero,578 <udivmodsi4+0x70>
     510:	00800044 	movi	r2,1
     514:	0007883a 	mov	r3,zero
     518:	01c007c4 	movi	r7,31
     51c:	00000306 	br	52c <udivmodsi4+0x24>
     520:	19c01326 	beq	r3,r7,570 <udivmodsi4+0x68>
     524:	18c00044 	addi	r3,r3,1
     528:	28000416 	blt	r5,zero,53c <udivmodsi4+0x34>
     52c:	294b883a 	add	r5,r5,r5
     530:	1085883a 	add	r2,r2,r2
     534:	293ffa36 	bltu	r5,r4,520 <udivmodsi4+0x18>
     538:	10000d26 	beq	r2,zero,570 <udivmodsi4+0x68>
     53c:	0007883a 	mov	r3,zero
     540:	21400236 	bltu	r4,r5,54c <udivmodsi4+0x44>
     544:	2149c83a 	sub	r4,r4,r5
     548:	1886b03a 	or	r3,r3,r2
     54c:	1004d07a 	srli	r2,r2,1
     550:	280ad07a 	srli	r5,r5,1
     554:	103ffa1e 	bne	r2,zero,540 <udivmodsi4+0x38>
     558:	30000226 	beq	r6,zero,564 <udivmodsi4+0x5c>
     55c:	2005883a 	mov	r2,r4
     560:	f800283a 	ret
     564:	1809883a 	mov	r4,r3
     568:	2005883a 	mov	r2,r4
     56c:	f800283a 	ret
     570:	0007883a 	mov	r3,zero
     574:	003ff806 	br	558 <udivmodsi4+0x50>
     578:	00800044 	movi	r2,1
     57c:	0007883a 	mov	r3,zero
     580:	003fef06 	br	540 <udivmodsi4+0x38>

00000584 <__divsi3>:
     584:	defffe04 	addi	sp,sp,-8
     588:	dc000015 	stw	r16,0(sp)
     58c:	dfc00115 	stw	ra,4(sp)
     590:	0021883a 	mov	r16,zero
     594:	20000c16 	blt	r4,zero,5c8 <__divsi3+0x44>
     598:	000d883a 	mov	r6,zero
     59c:	28000e16 	blt	r5,zero,5d8 <__divsi3+0x54>
     5a0:	00005080 	call	508 <udivmodsi4>
     5a4:	1007883a 	mov	r3,r2
     5a8:	8005003a 	cmpeq	r2,r16,zero
     5ac:	1000011e 	bne	r2,zero,5b4 <__divsi3+0x30>
     5b0:	00c7c83a 	sub	r3,zero,r3
     5b4:	1805883a 	mov	r2,r3
     5b8:	dfc00117 	ldw	ra,4(sp)
     5bc:	dc000017 	ldw	r16,0(sp)
     5c0:	dec00204 	addi	sp,sp,8
     5c4:	f800283a 	ret
     5c8:	0109c83a 	sub	r4,zero,r4
     5cc:	04000044 	movi	r16,1
     5d0:	000d883a 	mov	r6,zero
     5d4:	283ff20e 	bge	r5,zero,5a0 <__divsi3+0x1c>
     5d8:	014bc83a 	sub	r5,zero,r5
     5dc:	8021003a 	cmpeq	r16,r16,zero
     5e0:	003fef06 	br	5a0 <__divsi3+0x1c>

000005e4 <__modsi3>:
     5e4:	deffff04 	addi	sp,sp,-4
     5e8:	dfc00015 	stw	ra,0(sp)
     5ec:	01800044 	movi	r6,1
     5f0:	2807883a 	mov	r3,r5
     5f4:	20000416 	blt	r4,zero,608 <__modsi3+0x24>
     5f8:	28000c16 	blt	r5,zero,62c <__modsi3+0x48>
     5fc:	dfc00017 	ldw	ra,0(sp)
     600:	dec00104 	addi	sp,sp,4
     604:	00005081 	jmpi	508 <udivmodsi4>
     608:	0109c83a 	sub	r4,zero,r4
     60c:	28000b16 	blt	r5,zero,63c <__modsi3+0x58>
     610:	180b883a 	mov	r5,r3
     614:	01800044 	movi	r6,1
     618:	00005080 	call	508 <udivmodsi4>
     61c:	0085c83a 	sub	r2,zero,r2
     620:	dfc00017 	ldw	ra,0(sp)
     624:	dec00104 	addi	sp,sp,4
     628:	f800283a 	ret
     62c:	014bc83a 	sub	r5,zero,r5
     630:	dfc00017 	ldw	ra,0(sp)
     634:	dec00104 	addi	sp,sp,4
     638:	00005081 	jmpi	508 <udivmodsi4>
     63c:	0147c83a 	sub	r3,zero,r5
     640:	003ff306 	br	610 <__modsi3+0x2c>

00000644 <__udivsi3>:
     644:	000d883a 	mov	r6,zero
     648:	00005081 	jmpi	508 <udivmodsi4>

0000064c <__umodsi3>:
     64c:	01800044 	movi	r6,1
     650:	00005081 	jmpi	508 <udivmodsi4>

00000654 <__mulsi3>:
     654:	20000a26 	beq	r4,zero,680 <__mulsi3+0x2c>
     658:	0007883a 	mov	r3,zero
     65c:	2080004c 	andi	r2,r4,1
     660:	1005003a 	cmpeq	r2,r2,zero
     664:	2008d07a 	srli	r4,r4,1
     668:	1000011e 	bne	r2,zero,670 <__mulsi3+0x1c>
     66c:	1947883a 	add	r3,r3,r5
     670:	294b883a 	add	r5,r5,r5
     674:	203ff91e 	bne	r4,zero,65c <__mulsi3+0x8>
     678:	1805883a 	mov	r2,r3
     67c:	f800283a 	ret
     680:	0007883a 	mov	r3,zero
     684:	1805883a 	mov	r2,r3
     688:	f800283a 	ret

0000068c <printf>:
     68c:	defffb04 	addi	sp,sp,-20
     690:	dfc00115 	stw	ra,4(sp)
     694:	d9400215 	stw	r5,8(sp)
     698:	d9800315 	stw	r6,12(sp)
     69c:	d9c00415 	stw	r7,16(sp)
     6a0:	00800034 	movhi	r2,0
     6a4:	108ad504 	addi	r2,r2,11092
     6a8:	11400017 	ldw	r5,0(r2)
     6ac:	d8800204 	addi	r2,sp,8
     6b0:	d8800015 	stw	r2,0(sp)
     6b4:	29c00217 	ldw	r7,8(r5)
     6b8:	100d883a 	mov	r6,r2
     6bc:	00800034 	movhi	r2,0
     6c0:	10839904 	addi	r2,r2,3684
     6c4:	200b883a 	mov	r5,r4
     6c8:	38800115 	stw	r2,4(r7)
     6cc:	3809883a 	mov	r4,r7
     6d0:	0000e400 	call	e40 <__vfprintf_internal>
     6d4:	dfc00117 	ldw	ra,4(sp)
     6d8:	dec00504 	addi	sp,sp,20
     6dc:	f800283a 	ret

000006e0 <_printf_r>:
     6e0:	defffc04 	addi	sp,sp,-16
     6e4:	dfc00115 	stw	ra,4(sp)
     6e8:	d9800215 	stw	r6,8(sp)
     6ec:	d9c00315 	stw	r7,12(sp)
     6f0:	22000217 	ldw	r8,8(r4)
     6f4:	d8800204 	addi	r2,sp,8
     6f8:	d8800015 	stw	r2,0(sp)
     6fc:	100f883a 	mov	r7,r2
     700:	00800034 	movhi	r2,0
     704:	10839904 	addi	r2,r2,3684
     708:	280d883a 	mov	r6,r5
     70c:	40800115 	stw	r2,4(r8)
     710:	400b883a 	mov	r5,r8
     714:	00007a40 	call	7a4 <___vfprintf_internal_r>
     718:	dfc00117 	ldw	ra,4(sp)
     71c:	dec00404 	addi	sp,sp,16
     720:	f800283a 	ret

00000724 <print_repeat>:
     724:	defffb04 	addi	sp,sp,-20
     728:	dc800315 	stw	r18,12(sp)
     72c:	dc400215 	stw	r17,8(sp)
     730:	dc000115 	stw	r16,4(sp)
     734:	dfc00415 	stw	ra,16(sp)
     738:	2025883a 	mov	r18,r4
     73c:	2823883a 	mov	r17,r5
     740:	3821883a 	mov	r16,r7
     744:	d9800005 	stb	r6,0(sp)
     748:	9009883a 	mov	r4,r18
     74c:	880b883a 	mov	r5,r17
     750:	d80d883a 	mov	r6,sp
     754:	01c00044 	movi	r7,1
     758:	04000b0e 	bge	zero,r16,788 <print_repeat+0x64>
     75c:	88c00117 	ldw	r3,4(r17)
     760:	843fffc4 	addi	r16,r16,-1
     764:	183ee83a 	callr	r3
     768:	103ff726 	beq	r2,zero,748 <print_repeat+0x24>
     76c:	00bfffc4 	movi	r2,-1
     770:	dfc00417 	ldw	ra,16(sp)
     774:	dc800317 	ldw	r18,12(sp)
     778:	dc400217 	ldw	r17,8(sp)
     77c:	dc000117 	ldw	r16,4(sp)
     780:	dec00504 	addi	sp,sp,20
     784:	f800283a 	ret
     788:	0005883a 	mov	r2,zero
     78c:	dfc00417 	ldw	ra,16(sp)
     790:	dc800317 	ldw	r18,12(sp)
     794:	dc400217 	ldw	r17,8(sp)
     798:	dc000117 	ldw	r16,4(sp)
     79c:	dec00504 	addi	sp,sp,20
     7a0:	f800283a 	ret

000007a4 <___vfprintf_internal_r>:
     7a4:	deffe304 	addi	sp,sp,-116
     7a8:	df001b15 	stw	fp,108(sp)
     7ac:	ddc01a15 	stw	r23,104(sp)
     7b0:	dd001715 	stw	r20,92(sp)
     7b4:	dc801515 	stw	r18,84(sp)
     7b8:	dc001315 	stw	r16,76(sp)
     7bc:	dfc01c15 	stw	ra,112(sp)
     7c0:	dd801915 	stw	r22,100(sp)
     7c4:	dd401815 	stw	r21,96(sp)
     7c8:	dcc01615 	stw	r19,88(sp)
     7cc:	dc401415 	stw	r17,80(sp)
     7d0:	d9001015 	stw	r4,64(sp)
     7d4:	2829883a 	mov	r20,r5
     7d8:	d9c01115 	stw	r7,68(sp)
     7dc:	3025883a 	mov	r18,r6
     7e0:	0021883a 	mov	r16,zero
     7e4:	d8000f15 	stw	zero,60(sp)
     7e8:	d8000e15 	stw	zero,56(sp)
     7ec:	0039883a 	mov	fp,zero
     7f0:	d8000915 	stw	zero,36(sp)
     7f4:	d8000d15 	stw	zero,52(sp)
     7f8:	d8000c15 	stw	zero,48(sp)
     7fc:	d8000b15 	stw	zero,44(sp)
     800:	002f883a 	mov	r23,zero
     804:	91400003 	ldbu	r5,0(r18)
     808:	01c00044 	movi	r7,1
     80c:	94800044 	addi	r18,r18,1
     810:	29003fcc 	andi	r4,r5,255
     814:	2100201c 	xori	r4,r4,128
     818:	213fe004 	addi	r4,r4,-128
     81c:	20001526 	beq	r4,zero,874 <___vfprintf_internal_r+0xd0>
     820:	81c03526 	beq	r16,r7,8f8 <___vfprintf_internal_r+0x154>
     824:	3c002016 	blt	r7,r16,8a8 <___vfprintf_internal_r+0x104>
     828:	803ff61e 	bne	r16,zero,804 <___vfprintf_internal_r+0x60>
     82c:	00800944 	movi	r2,37
     830:	2081501e 	bne	r4,r2,d74 <___vfprintf_internal_r+0x5d0>
     834:	073fffc4 	movi	fp,-1
     838:	00800284 	movi	r2,10
     83c:	d9c00c15 	stw	r7,48(sp)
     840:	d8000f15 	stw	zero,60(sp)
     844:	d8000e15 	stw	zero,56(sp)
     848:	df000915 	stw	fp,36(sp)
     84c:	d8800d15 	stw	r2,52(sp)
     850:	d8000b15 	stw	zero,44(sp)
     854:	91400003 	ldbu	r5,0(r18)
     858:	3821883a 	mov	r16,r7
     85c:	94800044 	addi	r18,r18,1
     860:	29003fcc 	andi	r4,r5,255
     864:	2100201c 	xori	r4,r4,128
     868:	213fe004 	addi	r4,r4,-128
     86c:	01c00044 	movi	r7,1
     870:	203feb1e 	bne	r4,zero,820 <___vfprintf_internal_r+0x7c>
     874:	b805883a 	mov	r2,r23
     878:	dfc01c17 	ldw	ra,112(sp)
     87c:	df001b17 	ldw	fp,108(sp)
     880:	ddc01a17 	ldw	r23,104(sp)
     884:	dd801917 	ldw	r22,100(sp)
     888:	dd401817 	ldw	r21,96(sp)
     88c:	dd001717 	ldw	r20,92(sp)
     890:	dcc01617 	ldw	r19,88(sp)
     894:	dc801517 	ldw	r18,84(sp)
     898:	dc401417 	ldw	r17,80(sp)
     89c:	dc001317 	ldw	r16,76(sp)
     8a0:	dec01d04 	addi	sp,sp,116
     8a4:	f800283a 	ret
     8a8:	00800084 	movi	r2,2
     8ac:	80801726 	beq	r16,r2,90c <___vfprintf_internal_r+0x168>
     8b0:	008000c4 	movi	r2,3
     8b4:	80bfd31e 	bne	r16,r2,804 <___vfprintf_internal_r+0x60>
     8b8:	2c7ff404 	addi	r17,r5,-48
     8bc:	88c03fcc 	andi	r3,r17,255
     8c0:	00800244 	movi	r2,9
     8c4:	10c02136 	bltu	r2,r3,94c <___vfprintf_internal_r+0x1a8>
     8c8:	d8c00917 	ldw	r3,36(sp)
     8cc:	18012716 	blt	r3,zero,d6c <___vfprintf_internal_r+0x5c8>
     8d0:	d9000917 	ldw	r4,36(sp)
     8d4:	01400284 	movi	r5,10
     8d8:	00006540 	call	654 <__mulsi3>
     8dc:	1007883a 	mov	r3,r2
     8e0:	88803fcc 	andi	r2,r17,255
     8e4:	1080201c 	xori	r2,r2,128
     8e8:	10bfe004 	addi	r2,r2,-128
     8ec:	1887883a 	add	r3,r3,r2
     8f0:	d8c00915 	stw	r3,36(sp)
     8f4:	003fc306 	br	804 <___vfprintf_internal_r+0x60>
     8f8:	00800c04 	movi	r2,48
     8fc:	2080b326 	beq	r4,r2,bcc <___vfprintf_internal_r+0x428>
     900:	00800944 	movi	r2,37
     904:	20812726 	beq	r4,r2,da4 <___vfprintf_internal_r+0x600>
     908:	04000084 	movi	r16,2
     90c:	2c7ff404 	addi	r17,r5,-48
     910:	88c03fcc 	andi	r3,r17,255
     914:	00800244 	movi	r2,9
     918:	10c00a36 	bltu	r2,r3,944 <___vfprintf_internal_r+0x1a0>
     91c:	e000b416 	blt	fp,zero,bf0 <___vfprintf_internal_r+0x44c>
     920:	e009883a 	mov	r4,fp
     924:	01400284 	movi	r5,10
     928:	00006540 	call	654 <__mulsi3>
     92c:	1007883a 	mov	r3,r2
     930:	88803fcc 	andi	r2,r17,255
     934:	1080201c 	xori	r2,r2,128
     938:	10bfe004 	addi	r2,r2,-128
     93c:	18b9883a 	add	fp,r3,r2
     940:	003fb006 	br	804 <___vfprintf_internal_r+0x60>
     944:	00800b84 	movi	r2,46
     948:	2080a326 	beq	r4,r2,bd8 <___vfprintf_internal_r+0x434>
     94c:	00801b04 	movi	r2,108
     950:	2080a326 	beq	r4,r2,be0 <___vfprintf_internal_r+0x43c>
     954:	d8c00917 	ldw	r3,36(sp)
     958:	1800a716 	blt	r3,zero,bf8 <___vfprintf_internal_r+0x454>
     95c:	d8000f15 	stw	zero,60(sp)
     960:	28bfea04 	addi	r2,r5,-88
     964:	10803fcc 	andi	r2,r2,255
     968:	00c00804 	movi	r3,32
     96c:	18802836 	bltu	r3,r2,a10 <___vfprintf_internal_r+0x26c>
     970:	1085883a 	add	r2,r2,r2
     974:	1085883a 	add	r2,r2,r2
     978:	00c00034 	movhi	r3,0
     97c:	18c26304 	addi	r3,r3,2444
     980:	10c5883a 	add	r2,r2,r3
     984:	11000017 	ldw	r4,0(r2)
     988:	2000683a 	jmp	r4
     98c:	00000a18 	cmpnei	zero,zero,40
     990:	00000a10 	cmplti	zero,zero,40
     994:	00000a10 	cmplti	zero,zero,40
     998:	00000a10 	cmplti	zero,zero,40
     99c:	00000a10 	cmplti	zero,zero,40
     9a0:	00000a10 	cmplti	zero,zero,40
     9a4:	00000a10 	cmplti	zero,zero,40
     9a8:	00000a10 	cmplti	zero,zero,40
     9ac:	00000a10 	cmplti	zero,zero,40
     9b0:	00000a10 	cmplti	zero,zero,40
     9b4:	00000a10 	cmplti	zero,zero,40
     9b8:	00000c44 	movi	zero,49
     9bc:	00000a2c 	andhi	zero,zero,40
     9c0:	00000a10 	cmplti	zero,zero,40
     9c4:	00000a10 	cmplti	zero,zero,40
     9c8:	00000a10 	cmplti	zero,zero,40
     9cc:	00000a10 	cmplti	zero,zero,40
     9d0:	00000a2c 	andhi	zero,zero,40
     9d4:	00000a10 	cmplti	zero,zero,40
     9d8:	00000a10 	cmplti	zero,zero,40
     9dc:	00000a10 	cmplti	zero,zero,40
     9e0:	00000a10 	cmplti	zero,zero,40
     9e4:	00000a10 	cmplti	zero,zero,40
     9e8:	00000cac 	andhi	zero,zero,50
     9ec:	00000a10 	cmplti	zero,zero,40
     9f0:	00000a10 	cmplti	zero,zero,40
     9f4:	00000a10 	cmplti	zero,zero,40
     9f8:	00000cbc 	xorhi	zero,zero,50
     9fc:	00000a10 	cmplti	zero,zero,40
     a00:	00000b90 	cmplti	zero,zero,46
     a04:	00000a10 	cmplti	zero,zero,40
     a08:	00000a10 	cmplti	zero,zero,40
     a0c:	00000b88 	cmpgei	zero,zero,46
     a10:	0021883a 	mov	r16,zero
     a14:	003f7b06 	br	804 <___vfprintf_internal_r+0x60>
     a18:	00c00404 	movi	r3,16
     a1c:	00800044 	movi	r2,1
     a20:	d8c00d15 	stw	r3,52(sp)
     a24:	d8000c15 	stw	zero,48(sp)
     a28:	d8800b15 	stw	r2,44(sp)
     a2c:	d8c00e17 	ldw	r3,56(sp)
     a30:	1805003a 	cmpeq	r2,r3,zero
     a34:	10005a1e 	bne	r2,zero,ba0 <___vfprintf_internal_r+0x3fc>
     a38:	d8800c17 	ldw	r2,48(sp)
     a3c:	1000781e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x47c>
     a40:	d8801117 	ldw	r2,68(sp)
     a44:	d8000a15 	stw	zero,40(sp)
     a48:	14400017 	ldw	r17,0(r2)
     a4c:	11c00104 	addi	r7,r2,4
     a50:	d9c01115 	stw	r7,68(sp)
     a54:	88005a26 	beq	r17,zero,bc0 <___vfprintf_internal_r+0x41c>
     a58:	d8c00b17 	ldw	r3,44(sp)
     a5c:	dcc00044 	addi	r19,sp,1
     a60:	05800244 	movi	r22,9
     a64:	182b003a 	cmpeq	r21,r3,zero
     a68:	dcc01215 	stw	r19,72(sp)
     a6c:	00000506 	br	a84 <___vfprintf_internal_r+0x2e0>
     a70:	21000c04 	addi	r4,r4,48
     a74:	99000005 	stb	r4,0(r19)
     a78:	9cc00044 	addi	r19,r19,1
     a7c:	80000f26 	beq	r16,zero,abc <___vfprintf_internal_r+0x318>
     a80:	8023883a 	mov	r17,r16
     a84:	d9400d17 	ldw	r5,52(sp)
     a88:	8809883a 	mov	r4,r17
     a8c:	00006440 	call	644 <__udivsi3>
     a90:	d9000d17 	ldw	r4,52(sp)
     a94:	100b883a 	mov	r5,r2
     a98:	1021883a 	mov	r16,r2
     a9c:	00006540 	call	654 <__mulsi3>
     aa0:	8889c83a 	sub	r4,r17,r2
     aa4:	b13ff20e 	bge	r22,r4,a70 <___vfprintf_internal_r+0x2cc>
     aa8:	a8009f1e 	bne	r21,zero,d28 <___vfprintf_internal_r+0x584>
     aac:	21000dc4 	addi	r4,r4,55
     ab0:	99000005 	stb	r4,0(r19)
     ab4:	9cc00044 	addi	r19,r19,1
     ab8:	803ff11e 	bne	r16,zero,a80 <___vfprintf_internal_r+0x2dc>
     abc:	d8801217 	ldw	r2,72(sp)
     ac0:	98a3c83a 	sub	r17,r19,r2
     ac4:	d8c00917 	ldw	r3,36(sp)
     ac8:	1c4bc83a 	sub	r5,r3,r17
     acc:	0140130e 	bge	zero,r5,b1c <___vfprintf_internal_r+0x378>
     ad0:	d8c00044 	addi	r3,sp,1
     ad4:	18800804 	addi	r2,r3,32
     ad8:	9880102e 	bgeu	r19,r2,b1c <___vfprintf_internal_r+0x378>
     adc:	00800c04 	movi	r2,48
     ae0:	28ffffc4 	addi	r3,r5,-1
     ae4:	98800005 	stb	r2,0(r19)
     ae8:	99000044 	addi	r4,r19,1
     aec:	00c0080e 	bge	zero,r3,b10 <___vfprintf_internal_r+0x36c>
     af0:	d8c00044 	addi	r3,sp,1
     af4:	18800804 	addi	r2,r3,32
     af8:	2080052e 	bgeu	r4,r2,b10 <___vfprintf_internal_r+0x36c>
     afc:	00800c04 	movi	r2,48
     b00:	20800005 	stb	r2,0(r4)
     b04:	21000044 	addi	r4,r4,1
     b08:	9945883a 	add	r2,r19,r5
     b0c:	20bff81e 	bne	r4,r2,af0 <___vfprintf_internal_r+0x34c>
     b10:	d8801217 	ldw	r2,72(sp)
     b14:	2027883a 	mov	r19,r4
     b18:	20a3c83a 	sub	r17,r4,r2
     b1c:	d8c00a17 	ldw	r3,40(sp)
     b20:	1c45883a 	add	r2,r3,r17
     b24:	e0a1c83a 	sub	r16,fp,r2
     b28:	d8800f17 	ldw	r2,60(sp)
     b2c:	10008026 	beq	r2,zero,d30 <___vfprintf_internal_r+0x58c>
     b30:	1805003a 	cmpeq	r2,r3,zero
     b34:	1000ae26 	beq	r2,zero,df0 <___vfprintf_internal_r+0x64c>
     b38:	0400a516 	blt	zero,r16,dd0 <___vfprintf_internal_r+0x62c>
     b3c:	b805883a 	mov	r2,r23
     b40:	0440950e 	bge	zero,r17,d98 <___vfprintf_internal_r+0x5f4>
     b44:	102f883a 	mov	r23,r2
     b48:	1461883a 	add	r16,r2,r17
     b4c:	00000206 	br	b58 <___vfprintf_internal_r+0x3b4>
     b50:	bdc00044 	addi	r23,r23,1
     b54:	85ffae26 	beq	r16,r23,a10 <___vfprintf_internal_r+0x26c>
     b58:	9cffffc4 	addi	r19,r19,-1
     b5c:	98800003 	ldbu	r2,0(r19)
     b60:	a0c00117 	ldw	r3,4(r20)
     b64:	d9001017 	ldw	r4,64(sp)
     b68:	d8800005 	stb	r2,0(sp)
     b6c:	a00b883a 	mov	r5,r20
     b70:	d80d883a 	mov	r6,sp
     b74:	01c00044 	movi	r7,1
     b78:	183ee83a 	callr	r3
     b7c:	103ff426 	beq	r2,zero,b50 <___vfprintf_internal_r+0x3ac>
     b80:	05ffffc4 	movi	r23,-1
     b84:	003f3b06 	br	874 <___vfprintf_internal_r+0xd0>
     b88:	00c00404 	movi	r3,16
     b8c:	d8c00d15 	stw	r3,52(sp)
     b90:	d8000c15 	stw	zero,48(sp)
     b94:	d8c00e17 	ldw	r3,56(sp)
     b98:	1805003a 	cmpeq	r2,r3,zero
     b9c:	103fa626 	beq	r2,zero,a38 <___vfprintf_internal_r+0x294>
     ba0:	d8c00c17 	ldw	r3,48(sp)
     ba4:	1800171e 	bne	r3,zero,c04 <___vfprintf_internal_r+0x460>
     ba8:	d8c01117 	ldw	r3,68(sp)
     bac:	d8000a15 	stw	zero,40(sp)
     bb0:	1c400017 	ldw	r17,0(r3)
     bb4:	19c00104 	addi	r7,r3,4
     bb8:	d9c01115 	stw	r7,68(sp)
     bbc:	883fa61e 	bne	r17,zero,a58 <___vfprintf_internal_r+0x2b4>
     bc0:	dcc00044 	addi	r19,sp,1
     bc4:	dcc01215 	stw	r19,72(sp)
     bc8:	003fbe06 	br	ac4 <___vfprintf_internal_r+0x320>
     bcc:	04000084 	movi	r16,2
     bd0:	d9c00f15 	stw	r7,60(sp)
     bd4:	003f0b06 	br	804 <___vfprintf_internal_r+0x60>
     bd8:	040000c4 	movi	r16,3
     bdc:	003f0906 	br	804 <___vfprintf_internal_r+0x60>
     be0:	00800044 	movi	r2,1
     be4:	040000c4 	movi	r16,3
     be8:	d8800e15 	stw	r2,56(sp)
     bec:	003f0506 	br	804 <___vfprintf_internal_r+0x60>
     bf0:	0007883a 	mov	r3,zero
     bf4:	003f4e06 	br	930 <___vfprintf_internal_r+0x18c>
     bf8:	00800044 	movi	r2,1
     bfc:	d8800915 	stw	r2,36(sp)
     c00:	003f5706 	br	960 <___vfprintf_internal_r+0x1bc>
     c04:	d8801117 	ldw	r2,68(sp)
     c08:	14400017 	ldw	r17,0(r2)
     c0c:	10800104 	addi	r2,r2,4
     c10:	d8801115 	stw	r2,68(sp)
     c14:	88000716 	blt	r17,zero,c34 <___vfprintf_internal_r+0x490>
     c18:	d8000a15 	stw	zero,40(sp)
     c1c:	003f8d06 	br	a54 <___vfprintf_internal_r+0x2b0>
     c20:	d8c01117 	ldw	r3,68(sp)
     c24:	1c400017 	ldw	r17,0(r3)
     c28:	18c00104 	addi	r3,r3,4
     c2c:	d8c01115 	stw	r3,68(sp)
     c30:	883ff90e 	bge	r17,zero,c18 <___vfprintf_internal_r+0x474>
     c34:	00800044 	movi	r2,1
     c38:	0463c83a 	sub	r17,zero,r17
     c3c:	d8800a15 	stw	r2,40(sp)
     c40:	003f8406 	br	a54 <___vfprintf_internal_r+0x2b0>
     c44:	04000044 	movi	r16,1
     c48:	8700080e 	bge	r16,fp,c6c <___vfprintf_internal_r+0x4c8>
     c4c:	d9001017 	ldw	r4,64(sp)
     c50:	a00b883a 	mov	r5,r20
     c54:	01800804 	movi	r6,32
     c58:	e1ffffc4 	addi	r7,fp,-1
     c5c:	00007240 	call	724 <print_repeat>
     c60:	103fc71e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     c64:	e5c5883a 	add	r2,fp,r23
     c68:	15ffffc4 	addi	r23,r2,-1
     c6c:	d8c01117 	ldw	r3,68(sp)
     c70:	d9001017 	ldw	r4,64(sp)
     c74:	800f883a 	mov	r7,r16
     c78:	18800017 	ldw	r2,0(r3)
     c7c:	a0c00117 	ldw	r3,4(r20)
     c80:	a00b883a 	mov	r5,r20
     c84:	d8800005 	stb	r2,0(sp)
     c88:	d80d883a 	mov	r6,sp
     c8c:	183ee83a 	callr	r3
     c90:	103fbb1e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     c94:	d8801117 	ldw	r2,68(sp)
     c98:	bdc00044 	addi	r23,r23,1
     c9c:	0021883a 	mov	r16,zero
     ca0:	10800104 	addi	r2,r2,4
     ca4:	d8801115 	stw	r2,68(sp)
     ca8:	003ed606 	br	804 <___vfprintf_internal_r+0x60>
     cac:	00800204 	movi	r2,8
     cb0:	d8800d15 	stw	r2,52(sp)
     cb4:	d8000c15 	stw	zero,48(sp)
     cb8:	003fb606 	br	b94 <___vfprintf_internal_r+0x3f0>
     cbc:	d8c01117 	ldw	r3,68(sp)
     cc0:	1cc00017 	ldw	r19,0(r3)
     cc4:	9809883a 	mov	r4,r19
     cc8:	0000f200 	call	f20 <strlen>
     ccc:	e0a1c83a 	sub	r16,fp,r2
     cd0:	1023883a 	mov	r17,r2
     cd4:	0400070e 	bge	zero,r16,cf4 <___vfprintf_internal_r+0x550>
     cd8:	d9001017 	ldw	r4,64(sp)
     cdc:	a00b883a 	mov	r5,r20
     ce0:	01800804 	movi	r6,32
     ce4:	800f883a 	mov	r7,r16
     ce8:	00007240 	call	724 <print_repeat>
     cec:	103fa41e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     cf0:	bc2f883a 	add	r23,r23,r16
     cf4:	a0c00117 	ldw	r3,4(r20)
     cf8:	d9001017 	ldw	r4,64(sp)
     cfc:	980d883a 	mov	r6,r19
     d00:	a00b883a 	mov	r5,r20
     d04:	880f883a 	mov	r7,r17
     d08:	183ee83a 	callr	r3
     d0c:	103f9c1e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     d10:	d8801117 	ldw	r2,68(sp)
     d14:	bc6f883a 	add	r23,r23,r17
     d18:	0021883a 	mov	r16,zero
     d1c:	10800104 	addi	r2,r2,4
     d20:	d8801115 	stw	r2,68(sp)
     d24:	003eb706 	br	804 <___vfprintf_internal_r+0x60>
     d28:	210015c4 	addi	r4,r4,87
     d2c:	003f5106 	br	a74 <___vfprintf_internal_r+0x2d0>
     d30:	04003b16 	blt	zero,r16,e20 <___vfprintf_internal_r+0x67c>
     d34:	d8c00a17 	ldw	r3,40(sp)
     d38:	1805003a 	cmpeq	r2,r3,zero
     d3c:	103f7f1e 	bne	r2,zero,b3c <___vfprintf_internal_r+0x398>
     d40:	a0c00117 	ldw	r3,4(r20)
     d44:	d9001017 	ldw	r4,64(sp)
     d48:	00800b44 	movi	r2,45
     d4c:	d8800005 	stb	r2,0(sp)
     d50:	a00b883a 	mov	r5,r20
     d54:	d80d883a 	mov	r6,sp
     d58:	01c00044 	movi	r7,1
     d5c:	183ee83a 	callr	r3
     d60:	103f871e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     d64:	b8800044 	addi	r2,r23,1
     d68:	003f7506 	br	b40 <___vfprintf_internal_r+0x39c>
     d6c:	0007883a 	mov	r3,zero
     d70:	003edb06 	br	8e0 <___vfprintf_internal_r+0x13c>
     d74:	a0c00117 	ldw	r3,4(r20)
     d78:	d9001017 	ldw	r4,64(sp)
     d7c:	d9400005 	stb	r5,0(sp)
     d80:	d80d883a 	mov	r6,sp
     d84:	a00b883a 	mov	r5,r20
     d88:	183ee83a 	callr	r3
     d8c:	103f7c1e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     d90:	bdc00044 	addi	r23,r23,1
     d94:	003e9b06 	br	804 <___vfprintf_internal_r+0x60>
     d98:	102f883a 	mov	r23,r2
     d9c:	0021883a 	mov	r16,zero
     da0:	003e9806 	br	804 <___vfprintf_internal_r+0x60>
     da4:	a0c00117 	ldw	r3,4(r20)
     da8:	d9000005 	stb	r4,0(sp)
     dac:	d9001017 	ldw	r4,64(sp)
     db0:	a00b883a 	mov	r5,r20
     db4:	d80d883a 	mov	r6,sp
     db8:	800f883a 	mov	r7,r16
     dbc:	183ee83a 	callr	r3
     dc0:	103f6f1e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     dc4:	bc2f883a 	add	r23,r23,r16
     dc8:	0021883a 	mov	r16,zero
     dcc:	003e8d06 	br	804 <___vfprintf_internal_r+0x60>
     dd0:	d9001017 	ldw	r4,64(sp)
     dd4:	a00b883a 	mov	r5,r20
     dd8:	01800c04 	movi	r6,48
     ddc:	800f883a 	mov	r7,r16
     de0:	00007240 	call	724 <print_repeat>
     de4:	103f661e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     de8:	bc05883a 	add	r2,r23,r16
     dec:	003f5406 	br	b40 <___vfprintf_internal_r+0x39c>
     df0:	a0c00117 	ldw	r3,4(r20)
     df4:	d9001017 	ldw	r4,64(sp)
     df8:	00800b44 	movi	r2,45
     dfc:	d8800005 	stb	r2,0(sp)
     e00:	a00b883a 	mov	r5,r20
     e04:	d80d883a 	mov	r6,sp
     e08:	01c00044 	movi	r7,1
     e0c:	183ee83a 	callr	r3
     e10:	103f5b1e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     e14:	bdc00044 	addi	r23,r23,1
     e18:	043f480e 	bge	zero,r16,b3c <___vfprintf_internal_r+0x398>
     e1c:	003fec06 	br	dd0 <___vfprintf_internal_r+0x62c>
     e20:	d9001017 	ldw	r4,64(sp)
     e24:	a00b883a 	mov	r5,r20
     e28:	01800804 	movi	r6,32
     e2c:	800f883a 	mov	r7,r16
     e30:	00007240 	call	724 <print_repeat>
     e34:	103f521e 	bne	r2,zero,b80 <___vfprintf_internal_r+0x3dc>
     e38:	bc2f883a 	add	r23,r23,r16
     e3c:	003fbd06 	br	d34 <___vfprintf_internal_r+0x590>

00000e40 <__vfprintf_internal>:
     e40:	00800034 	movhi	r2,0
     e44:	108ad504 	addi	r2,r2,11092
     e48:	2013883a 	mov	r9,r4
     e4c:	11000017 	ldw	r4,0(r2)
     e50:	2805883a 	mov	r2,r5
     e54:	300f883a 	mov	r7,r6
     e58:	480b883a 	mov	r5,r9
     e5c:	100d883a 	mov	r6,r2
     e60:	00007a41 	jmpi	7a4 <___vfprintf_internal_r>

00000e64 <__sfvwrite_small_dev>:
     e64:	2880000b 	ldhu	r2,0(r5)
     e68:	defffa04 	addi	sp,sp,-24
     e6c:	dcc00315 	stw	r19,12(sp)
     e70:	1080020c 	andi	r2,r2,8
     e74:	dc800215 	stw	r18,8(sp)
     e78:	dc400115 	stw	r17,4(sp)
     e7c:	dfc00515 	stw	ra,20(sp)
     e80:	dd000415 	stw	r20,16(sp)
     e84:	dc000015 	stw	r16,0(sp)
     e88:	2825883a 	mov	r18,r5
     e8c:	2027883a 	mov	r19,r4
     e90:	3023883a 	mov	r17,r6
     e94:	10002026 	beq	r2,zero,f18 <__sfvwrite_small_dev+0xb4>
     e98:	2940008f 	ldh	r5,2(r5)
     e9c:	28000f16 	blt	r5,zero,edc <__sfvwrite_small_dev+0x78>
     ea0:	01c01b0e 	bge	zero,r7,f10 <__sfvwrite_small_dev+0xac>
     ea4:	3821883a 	mov	r16,r7
     ea8:	05010004 	movi	r20,1024
     eac:	00000206 	br	eb8 <__sfvwrite_small_dev+0x54>
     eb0:	0400170e 	bge	zero,r16,f10 <__sfvwrite_small_dev+0xac>
     eb4:	9140008f 	ldh	r5,2(r18)
     eb8:	880d883a 	mov	r6,r17
     ebc:	9809883a 	mov	r4,r19
     ec0:	800f883a 	mov	r7,r16
     ec4:	a400010e 	bge	r20,r16,ecc <__sfvwrite_small_dev+0x68>
     ec8:	01c10004 	movi	r7,1024
     ecc:	0000f400 	call	f40 <_write_r>
     ed0:	88a3883a 	add	r17,r17,r2
     ed4:	80a1c83a 	sub	r16,r16,r2
     ed8:	00bff516 	blt	zero,r2,eb0 <__sfvwrite_small_dev+0x4c>
     edc:	9080000b 	ldhu	r2,0(r18)
     ee0:	00ffffc4 	movi	r3,-1
     ee4:	10801014 	ori	r2,r2,64
     ee8:	9080000d 	sth	r2,0(r18)
     eec:	1805883a 	mov	r2,r3
     ef0:	dfc00517 	ldw	ra,20(sp)
     ef4:	dd000417 	ldw	r20,16(sp)
     ef8:	dcc00317 	ldw	r19,12(sp)
     efc:	dc800217 	ldw	r18,8(sp)
     f00:	dc400117 	ldw	r17,4(sp)
     f04:	dc000017 	ldw	r16,0(sp)
     f08:	dec00604 	addi	sp,sp,24
     f0c:	f800283a 	ret
     f10:	0007883a 	mov	r3,zero
     f14:	003ff506 	br	eec <__sfvwrite_small_dev+0x88>
     f18:	00ffffc4 	movi	r3,-1
     f1c:	003ff306 	br	eec <__sfvwrite_small_dev+0x88>

00000f20 <strlen>:
     f20:	20800007 	ldb	r2,0(r4)
     f24:	10000526 	beq	r2,zero,f3c <strlen+0x1c>
     f28:	2007883a 	mov	r3,r4
     f2c:	18c00044 	addi	r3,r3,1
     f30:	18800007 	ldb	r2,0(r3)
     f34:	103ffd1e 	bne	r2,zero,f2c <strlen+0xc>
     f38:	1905c83a 	sub	r2,r3,r4
     f3c:	f800283a 	ret

00000f40 <_write_r>:
     f40:	defffd04 	addi	sp,sp,-12
     f44:	dc000015 	stw	r16,0(sp)
     f48:	04000034 	movhi	r16,0
     f4c:	840b9804 	addi	r16,r16,11872
     f50:	dc400115 	stw	r17,4(sp)
     f54:	80000015 	stw	zero,0(r16)
     f58:	2023883a 	mov	r17,r4
     f5c:	2809883a 	mov	r4,r5
     f60:	300b883a 	mov	r5,r6
     f64:	380d883a 	mov	r6,r7
     f68:	dfc00215 	stw	ra,8(sp)
     f6c:	00011000 	call	1100 <write>
     f70:	1007883a 	mov	r3,r2
     f74:	00bfffc4 	movi	r2,-1
     f78:	18800626 	beq	r3,r2,f94 <_write_r+0x54>
     f7c:	1805883a 	mov	r2,r3
     f80:	dfc00217 	ldw	ra,8(sp)
     f84:	dc400117 	ldw	r17,4(sp)
     f88:	dc000017 	ldw	r16,0(sp)
     f8c:	dec00304 	addi	sp,sp,12
     f90:	f800283a 	ret
     f94:	80800017 	ldw	r2,0(r16)
     f98:	103ff826 	beq	r2,zero,f7c <_write_r+0x3c>
     f9c:	88800015 	stw	r2,0(r17)
     fa0:	1805883a 	mov	r2,r3
     fa4:	dfc00217 	ldw	ra,8(sp)
     fa8:	dc400117 	ldw	r17,4(sp)
     fac:	dc000017 	ldw	r16,0(sp)
     fb0:	dec00304 	addi	sp,sp,12
     fb4:	f800283a 	ret

00000fb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     fb8:	defffe04 	addi	sp,sp,-8
     fbc:	dfc00115 	stw	ra,4(sp)
     fc0:	df000015 	stw	fp,0(sp)
     fc4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     fc8:	01000034 	movhi	r4,0
     fcc:	210ae004 	addi	r4,r4,11136
     fd0:	01400034 	movhi	r5,0
     fd4:	294a2804 	addi	r5,r5,10400
     fd8:	01800034 	movhi	r6,0
     fdc:	318ae004 	addi	r6,r6,11136
     fe0:	00010380 	call	1038 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     fe4:	01000034 	movhi	r4,0
     fe8:	21000804 	addi	r4,r4,32
     fec:	01400034 	movhi	r5,0
     ff0:	29400804 	addi	r5,r5,32
     ff4:	01800034 	movhi	r6,0
     ff8:	31806d04 	addi	r6,r6,436
     ffc:	00010380 	call	1038 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1000:	01000034 	movhi	r4,0
    1004:	210a1b04 	addi	r4,r4,10348
    1008:	01400034 	movhi	r5,0
    100c:	294a1b04 	addi	r5,r5,10348
    1010:	01800034 	movhi	r6,0
    1014:	318a2804 	addi	r6,r6,10400
    1018:	00010380 	call	1038 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    101c:	00018100 	call	1810 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1020:	000196c0 	call	196c <alt_icache_flush_all>
}
    1024:	e037883a 	mov	sp,fp
    1028:	dfc00117 	ldw	ra,4(sp)
    102c:	df000017 	ldw	fp,0(sp)
    1030:	dec00204 	addi	sp,sp,8
    1034:	f800283a 	ret

00001038 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1038:	defffc04 	addi	sp,sp,-16
    103c:	df000315 	stw	fp,12(sp)
    1040:	df000304 	addi	fp,sp,12
    1044:	e13ffd15 	stw	r4,-12(fp)
    1048:	e17ffe15 	stw	r5,-8(fp)
    104c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1050:	e0fffe17 	ldw	r3,-8(fp)
    1054:	e0bffd17 	ldw	r2,-12(fp)
    1058:	18800e26 	beq	r3,r2,1094 <alt_load_section+0x5c>
  {
    while( to != end )
    105c:	00000a06 	br	1088 <alt_load_section+0x50>
    {
      *to++ = *from++;
    1060:	e0bffd17 	ldw	r2,-12(fp)
    1064:	10c00017 	ldw	r3,0(r2)
    1068:	e0bffe17 	ldw	r2,-8(fp)
    106c:	10c00015 	stw	r3,0(r2)
    1070:	e0bffe17 	ldw	r2,-8(fp)
    1074:	10800104 	addi	r2,r2,4
    1078:	e0bffe15 	stw	r2,-8(fp)
    107c:	e0bffd17 	ldw	r2,-12(fp)
    1080:	10800104 	addi	r2,r2,4
    1084:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1088:	e0fffe17 	ldw	r3,-8(fp)
    108c:	e0bfff17 	ldw	r2,-4(fp)
    1090:	18bff31e 	bne	r3,r2,1060 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1094:	e037883a 	mov	sp,fp
    1098:	df000017 	ldw	fp,0(sp)
    109c:	dec00104 	addi	sp,sp,4
    10a0:	f800283a 	ret

000010a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    10a4:	defffd04 	addi	sp,sp,-12
    10a8:	dfc00215 	stw	ra,8(sp)
    10ac:	df000115 	stw	fp,4(sp)
    10b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    10b4:	0009883a 	mov	r4,zero
    10b8:	00012840 	call	1284 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    10bc:	00012b80 	call	12b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    10c0:	01000034 	movhi	r4,0
    10c4:	210a1d04 	addi	r4,r4,10356
    10c8:	01400034 	movhi	r5,0
    10cc:	294a1d04 	addi	r5,r5,10356
    10d0:	01800034 	movhi	r6,0
    10d4:	318a1d04 	addi	r6,r6,10356
    10d8:	0001d400 	call	1d40 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    10dc:	d120c417 	ldw	r4,-31984(gp)
    10e0:	d160c517 	ldw	r5,-31980(gp)
    10e4:	d1a0c617 	ldw	r6,-31976(gp)
    10e8:	00001f00 	call	1f0 <main>
    10ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    10f0:	01000044 	movi	r4,1
    10f4:	00016b00 	call	16b0 <close>
  exit (result);
    10f8:	e13fff17 	ldw	r4,-4(fp)
    10fc:	00025ec0 	call	25ec <exit>

00001100 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1100:	defff704 	addi	sp,sp,-36
    1104:	dfc00815 	stw	ra,32(sp)
    1108:	df000715 	stw	fp,28(sp)
    110c:	df000704 	addi	fp,sp,28
    1110:	e13ffb15 	stw	r4,-20(fp)
    1114:	e17ffc15 	stw	r5,-16(fp)
    1118:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    111c:	e0bffb17 	ldw	r2,-20(fp)
    1120:	1004803a 	cmplt	r2,r2,zero
    1124:	1000091e 	bne	r2,zero,114c <write+0x4c>
    1128:	e13ffb17 	ldw	r4,-20(fp)
    112c:	01400304 	movi	r5,12
    1130:	00006540 	call	654 <__mulsi3>
    1134:	1007883a 	mov	r3,r2
    1138:	00800034 	movhi	r2,0
    113c:	108a7504 	addi	r2,r2,10708
    1140:	1887883a 	add	r3,r3,r2
    1144:	e0ffff15 	stw	r3,-4(fp)
    1148:	00000106 	br	1150 <write+0x50>
    114c:	e03fff15 	stw	zero,-4(fp)
    1150:	e0bfff17 	ldw	r2,-4(fp)
    1154:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    1158:	e0bffa17 	ldw	r2,-24(fp)
    115c:	1005003a 	cmpeq	r2,r2,zero
    1160:	1000241e 	bne	r2,zero,11f4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1164:	e0bffa17 	ldw	r2,-24(fp)
    1168:	10800217 	ldw	r2,8(r2)
    116c:	108000cc 	andi	r2,r2,3
    1170:	1005003a 	cmpeq	r2,r2,zero
    1174:	10001a1e 	bne	r2,zero,11e0 <write+0xe0>
    1178:	e0bffa17 	ldw	r2,-24(fp)
    117c:	10800017 	ldw	r2,0(r2)
    1180:	10800617 	ldw	r2,24(r2)
    1184:	1005003a 	cmpeq	r2,r2,zero
    1188:	1000151e 	bne	r2,zero,11e0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    118c:	e0bffa17 	ldw	r2,-24(fp)
    1190:	10800017 	ldw	r2,0(r2)
    1194:	10800617 	ldw	r2,24(r2)
    1198:	e17ffc17 	ldw	r5,-16(fp)
    119c:	e1bffd17 	ldw	r6,-12(fp)
    11a0:	e13ffa17 	ldw	r4,-24(fp)
    11a4:	103ee83a 	callr	r2
    11a8:	e0bff915 	stw	r2,-28(fp)
    11ac:	e0bff917 	ldw	r2,-28(fp)
    11b0:	1004403a 	cmpge	r2,r2,zero
    11b4:	1000071e 	bne	r2,zero,11d4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    11b8:	00012240 	call	1224 <alt_get_errno>
    11bc:	e0fff917 	ldw	r3,-28(fp)
    11c0:	00c7c83a 	sub	r3,zero,r3
    11c4:	10c00015 	stw	r3,0(r2)
        return -1;
    11c8:	00bfffc4 	movi	r2,-1
    11cc:	e0bffe15 	stw	r2,-8(fp)
    11d0:	00000e06 	br	120c <write+0x10c>
      }
      return rval;
    11d4:	e0bff917 	ldw	r2,-28(fp)
    11d8:	e0bffe15 	stw	r2,-8(fp)
    11dc:	00000b06 	br	120c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    11e0:	00012240 	call	1224 <alt_get_errno>
    11e4:	1007883a 	mov	r3,r2
    11e8:	00800344 	movi	r2,13
    11ec:	18800015 	stw	r2,0(r3)
    11f0:	00000406 	br	1204 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    11f4:	00012240 	call	1224 <alt_get_errno>
    11f8:	1007883a 	mov	r3,r2
    11fc:	00801444 	movi	r2,81
    1200:	18800015 	stw	r2,0(r3)
  }
  return -1;
    1204:	00bfffc4 	movi	r2,-1
    1208:	e0bffe15 	stw	r2,-8(fp)
    120c:	e0bffe17 	ldw	r2,-8(fp)
}
    1210:	e037883a 	mov	sp,fp
    1214:	dfc00117 	ldw	ra,4(sp)
    1218:	df000017 	ldw	fp,0(sp)
    121c:	dec00204 	addi	sp,sp,8
    1220:	f800283a 	ret

00001224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1224:	defffd04 	addi	sp,sp,-12
    1228:	dfc00215 	stw	ra,8(sp)
    122c:	df000115 	stw	fp,4(sp)
    1230:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1234:	00800034 	movhi	r2,0
    1238:	108adc04 	addi	r2,r2,11120
    123c:	10800017 	ldw	r2,0(r2)
    1240:	1005003a 	cmpeq	r2,r2,zero
    1244:	1000061e 	bne	r2,zero,1260 <alt_get_errno+0x3c>
    1248:	00800034 	movhi	r2,0
    124c:	108adc04 	addi	r2,r2,11120
    1250:	10800017 	ldw	r2,0(r2)
    1254:	103ee83a 	callr	r2
    1258:	e0bfff15 	stw	r2,-4(fp)
    125c:	00000306 	br	126c <alt_get_errno+0x48>
    1260:	00800034 	movhi	r2,0
    1264:	108b9804 	addi	r2,r2,11872
    1268:	e0bfff15 	stw	r2,-4(fp)
    126c:	e0bfff17 	ldw	r2,-4(fp)
}
    1270:	e037883a 	mov	sp,fp
    1274:	dfc00117 	ldw	ra,4(sp)
    1278:	df000017 	ldw	fp,0(sp)
    127c:	dec00204 	addi	sp,sp,8
    1280:	f800283a 	ret

00001284 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1284:	defffd04 	addi	sp,sp,-12
    1288:	dfc00215 	stw	ra,8(sp)
    128c:	df000115 	stw	fp,4(sp)
    1290:	df000104 	addi	fp,sp,4
    1294:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    1298:	00022b80 	call	22b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    129c:	00800044 	movi	r2,1
    12a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    12a4:	e037883a 	mov	sp,fp
    12a8:	dfc00117 	ldw	ra,4(sp)
    12ac:	df000017 	ldw	fp,0(sp)
    12b0:	dec00204 	addi	sp,sp,8
    12b4:	f800283a 	ret

000012b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    12b8:	defffe04 	addi	sp,sp,-8
    12bc:	dfc00115 	stw	ra,4(sp)
    12c0:	df000015 	stw	fp,0(sp)
    12c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    12c8:	01241014 	movui	r4,36928
    12cc:	000b883a 	mov	r5,zero
    12d0:	01800044 	movi	r6,1
    12d4:	01c0fa04 	movi	r7,1000
    12d8:	00016200 	call	1620 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
    12dc:	00c00034 	movhi	r3,0
    12e0:	18cb9c04 	addi	r3,r3,11888
    12e4:	00a40014 	movui	r2,36864
    12e8:	18800015 	stw	r2,0(r3)
    12ec:	00c00034 	movhi	r3,0
    12f0:	18cb9d04 	addi	r3,r3,11892
    12f4:	0080bef4 	movhi	r2,763
    12f8:	10bc2004 	addi	r2,r2,-3968
    12fc:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    1300:	01000034 	movhi	r4,0
    1304:	210a6004 	addi	r4,r4,10624
    1308:	00013200 	call	1320 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    130c:	e037883a 	mov	sp,fp
    1310:	dfc00117 	ldw	ra,4(sp)
    1314:	df000017 	ldw	fp,0(sp)
    1318:	dec00204 	addi	sp,sp,8
    131c:	f800283a 	ret

00001320 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1320:	defffd04 	addi	sp,sp,-12
    1324:	dfc00215 	stw	ra,8(sp)
    1328:	df000115 	stw	fp,4(sp)
    132c:	df000104 	addi	fp,sp,4
    1330:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1334:	e13fff17 	ldw	r4,-4(fp)
    1338:	01400034 	movhi	r5,0
    133c:	294ad904 	addi	r5,r5,11108
    1340:	00018580 	call	1858 <alt_dev_llist_insert>
}
    1344:	e037883a 	mov	sp,fp
    1348:	dfc00117 	ldw	ra,4(sp)
    134c:	df000017 	ldw	fp,0(sp)
    1350:	dec00204 	addi	sp,sp,8
    1354:	f800283a 	ret

00001358 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1358:	defffa04 	addi	sp,sp,-24
    135c:	dfc00515 	stw	ra,20(sp)
    1360:	df000415 	stw	fp,16(sp)
    1364:	df000404 	addi	fp,sp,16
    1368:	e13ffd15 	stw	r4,-12(fp)
    136c:	e17ffe15 	stw	r5,-8(fp)
    1370:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1374:	e0bffd17 	ldw	r2,-12(fp)
    1378:	10800017 	ldw	r2,0(r2)
    137c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1380:	e0bffc17 	ldw	r2,-16(fp)
    1384:	11000a04 	addi	r4,r2,40
    1388:	e0bffd17 	ldw	r2,-12(fp)
    138c:	11c00217 	ldw	r7,8(r2)
    1390:	e17ffe17 	ldw	r5,-8(fp)
    1394:	e1bfff17 	ldw	r6,-4(fp)
    1398:	00014080 	call	1408 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    139c:	e037883a 	mov	sp,fp
    13a0:	dfc00117 	ldw	ra,4(sp)
    13a4:	df000017 	ldw	fp,0(sp)
    13a8:	dec00204 	addi	sp,sp,8
    13ac:	f800283a 	ret

000013b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    13b0:	defffa04 	addi	sp,sp,-24
    13b4:	dfc00515 	stw	ra,20(sp)
    13b8:	df000415 	stw	fp,16(sp)
    13bc:	df000404 	addi	fp,sp,16
    13c0:	e13ffd15 	stw	r4,-12(fp)
    13c4:	e17ffe15 	stw	r5,-8(fp)
    13c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    13cc:	e0bffd17 	ldw	r2,-12(fp)
    13d0:	10800017 	ldw	r2,0(r2)
    13d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    13d8:	e0bffc17 	ldw	r2,-16(fp)
    13dc:	11000a04 	addi	r4,r2,40
    13e0:	e0bffd17 	ldw	r2,-12(fp)
    13e4:	11c00217 	ldw	r7,8(r2)
    13e8:	e17ffe17 	ldw	r5,-8(fp)
    13ec:	e1bfff17 	ldw	r6,-4(fp)
    13f0:	000150c0 	call	150c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    13f4:	e037883a 	mov	sp,fp
    13f8:	dfc00117 	ldw	ra,4(sp)
    13fc:	df000017 	ldw	fp,0(sp)
    1400:	dec00204 	addi	sp,sp,8
    1404:	f800283a 	ret

00001408 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    1408:	defff604 	addi	sp,sp,-40
    140c:	df000915 	stw	fp,36(sp)
    1410:	df000904 	addi	fp,sp,36
    1414:	e13ffb15 	stw	r4,-20(fp)
    1418:	e17ffc15 	stw	r5,-16(fp)
    141c:	e1bffd15 	stw	r6,-12(fp)
    1420:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    1424:	e0bffb17 	ldw	r2,-20(fp)
    1428:	10800017 	ldw	r2,0(r2)
    142c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    1430:	e0bffc17 	ldw	r2,-16(fp)
    1434:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    1438:	e0bffd17 	ldw	r2,-12(fp)
    143c:	1007883a 	mov	r3,r2
    1440:	e0bffc17 	ldw	r2,-16(fp)
    1444:	10c5883a 	add	r2,r2,r3
    1448:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    144c:	00001606 	br	14a8 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1450:	e0bffa17 	ldw	r2,-24(fp)
    1454:	10800037 	ldwio	r2,0(r2)
    1458:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    145c:	e0bff717 	ldw	r2,-36(fp)
    1460:	10a0000c 	andi	r2,r2,32768
    1464:	1005003a 	cmpeq	r2,r2,zero
    1468:	1000081e 	bne	r2,zero,148c <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    146c:	e0bff717 	ldw	r2,-36(fp)
    1470:	1007883a 	mov	r3,r2
    1474:	e0bff917 	ldw	r2,-28(fp)
    1478:	10c00005 	stb	r3,0(r2)
    147c:	e0bff917 	ldw	r2,-28(fp)
    1480:	10800044 	addi	r2,r2,1
    1484:	e0bff915 	stw	r2,-28(fp)
    1488:	00000706 	br	14a8 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    148c:	e0fff917 	ldw	r3,-28(fp)
    1490:	e0bffc17 	ldw	r2,-16(fp)
    1494:	1880071e 	bne	r3,r2,14b4 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    1498:	e0bffe17 	ldw	r2,-8(fp)
    149c:	1090000c 	andi	r2,r2,16384
    14a0:	1004c03a 	cmpne	r2,r2,zero
    14a4:	1000031e 	bne	r2,zero,14b4 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    14a8:	e0fff917 	ldw	r3,-28(fp)
    14ac:	e0bff817 	ldw	r2,-32(fp)
    14b0:	18bfe736 	bltu	r3,r2,1450 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    14b4:	e0fff917 	ldw	r3,-28(fp)
    14b8:	e0bffc17 	ldw	r2,-16(fp)
    14bc:	18800526 	beq	r3,r2,14d4 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    14c0:	e0fff917 	ldw	r3,-28(fp)
    14c4:	e0bffc17 	ldw	r2,-16(fp)
    14c8:	1887c83a 	sub	r3,r3,r2
    14cc:	e0ffff15 	stw	r3,-4(fp)
    14d0:	00000906 	br	14f8 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    14d4:	e0bffe17 	ldw	r2,-8(fp)
    14d8:	1090000c 	andi	r2,r2,16384
    14dc:	1005003a 	cmpeq	r2,r2,zero
    14e0:	1000031e 	bne	r2,zero,14f0 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    14e4:	00bffd44 	movi	r2,-11
    14e8:	e0bfff15 	stw	r2,-4(fp)
    14ec:	00000206 	br	14f8 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    14f0:	00bffec4 	movi	r2,-5
    14f4:	e0bfff15 	stw	r2,-4(fp)
    14f8:	e0bfff17 	ldw	r2,-4(fp)
}
    14fc:	e037883a 	mov	sp,fp
    1500:	df000017 	ldw	fp,0(sp)
    1504:	dec00104 	addi	sp,sp,4
    1508:	f800283a 	ret

0000150c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    150c:	defff904 	addi	sp,sp,-28
    1510:	df000615 	stw	fp,24(sp)
    1514:	df000604 	addi	fp,sp,24
    1518:	e13ffc15 	stw	r4,-16(fp)
    151c:	e17ffd15 	stw	r5,-12(fp)
    1520:	e1bffe15 	stw	r6,-8(fp)
    1524:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1528:	e0bffc17 	ldw	r2,-16(fp)
    152c:	10800017 	ldw	r2,0(r2)
    1530:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    1534:	e0bffe17 	ldw	r2,-8(fp)
    1538:	1007883a 	mov	r3,r2
    153c:	e0bffd17 	ldw	r2,-12(fp)
    1540:	10c5883a 	add	r2,r2,r3
    1544:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    1548:	00001106 	br	1590 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    154c:	e0bffb17 	ldw	r2,-20(fp)
    1550:	10800104 	addi	r2,r2,4
    1554:	10800037 	ldwio	r2,0(r2)
    1558:	10bfffec 	andhi	r2,r2,65535
    155c:	1005003a 	cmpeq	r2,r2,zero
    1560:	10000b1e 	bne	r2,zero,1590 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1564:	e13ffb17 	ldw	r4,-20(fp)
    1568:	e0bffd17 	ldw	r2,-12(fp)
    156c:	10800003 	ldbu	r2,0(r2)
    1570:	10c03fcc 	andi	r3,r2,255
    1574:	18c0201c 	xori	r3,r3,128
    1578:	18ffe004 	addi	r3,r3,-128
    157c:	e0bffd17 	ldw	r2,-12(fp)
    1580:	10800044 	addi	r2,r2,1
    1584:	e0bffd15 	stw	r2,-12(fp)
    1588:	2005883a 	mov	r2,r4
    158c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1590:	e0fffd17 	ldw	r3,-12(fp)
    1594:	e0bffa17 	ldw	r2,-24(fp)
    1598:	18bfec36 	bltu	r3,r2,154c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    159c:	e0bffe17 	ldw	r2,-8(fp)
}
    15a0:	e037883a 	mov	sp,fp
    15a4:	df000017 	ldw	fp,0(sp)
    15a8:	dec00104 	addi	sp,sp,4
    15ac:	f800283a 	ret

000015b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    15b0:	defffa04 	addi	sp,sp,-24
    15b4:	dfc00515 	stw	ra,20(sp)
    15b8:	df000415 	stw	fp,16(sp)
    15bc:	df000404 	addi	fp,sp,16
    15c0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    15c4:	e0bfff17 	ldw	r2,-4(fp)
    15c8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    15cc:	e0bfff17 	ldw	r2,-4(fp)
    15d0:	10800104 	addi	r2,r2,4
    15d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15d8:	0005303a 	rdctl	r2,status
    15dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15e0:	e0fffd17 	ldw	r3,-12(fp)
    15e4:	00bfff84 	movi	r2,-2
    15e8:	1884703a 	and	r2,r3,r2
    15ec:	1001703a 	wrctl	status,r2
  
  return context;
    15f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    15f4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    15f8:	00021ac0 	call	21ac <alt_tick>
    15fc:	e0bffe17 	ldw	r2,-8(fp)
    1600:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1604:	e0bffc17 	ldw	r2,-16(fp)
    1608:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    160c:	e037883a 	mov	sp,fp
    1610:	dfc00117 	ldw	ra,4(sp)
    1614:	df000017 	ldw	fp,0(sp)
    1618:	dec00204 	addi	sp,sp,8
    161c:	f800283a 	ret

00001620 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1620:	defff804 	addi	sp,sp,-32
    1624:	dfc00715 	stw	ra,28(sp)
    1628:	df000615 	stw	fp,24(sp)
    162c:	df000604 	addi	fp,sp,24
    1630:	e13ffc15 	stw	r4,-16(fp)
    1634:	e17ffd15 	stw	r5,-12(fp)
    1638:	e1bffe15 	stw	r6,-8(fp)
    163c:	e1ffff15 	stw	r7,-4(fp)
    1640:	e0bfff17 	ldw	r2,-4(fp)
    1644:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1648:	00800034 	movhi	r2,0
    164c:	108b9f04 	addi	r2,r2,11900
    1650:	10800017 	ldw	r2,0(r2)
    1654:	1004c03a 	cmpne	r2,r2,zero
    1658:	1000041e 	bne	r2,zero,166c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    165c:	00c00034 	movhi	r3,0
    1660:	18cb9f04 	addi	r3,r3,11900
    1664:	e0bffb17 	ldw	r2,-20(fp)
    1668:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    166c:	e0bffc17 	ldw	r2,-16(fp)
    1670:	10800104 	addi	r2,r2,4
    1674:	1007883a 	mov	r3,r2
    1678:	008001c4 	movi	r2,7
    167c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    1680:	d8000015 	stw	zero,0(sp)
    1684:	e13ffd17 	ldw	r4,-12(fp)
    1688:	e17ffe17 	ldw	r5,-8(fp)
    168c:	01800034 	movhi	r6,0
    1690:	31856c04 	addi	r6,r6,5552
    1694:	e1fffc17 	ldw	r7,-16(fp)
    1698:	000199c0 	call	199c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    169c:	e037883a 	mov	sp,fp
    16a0:	dfc00117 	ldw	ra,4(sp)
    16a4:	df000017 	ldw	fp,0(sp)
    16a8:	dec00204 	addi	sp,sp,8
    16ac:	f800283a 	ret

000016b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    16b0:	defff804 	addi	sp,sp,-32
    16b4:	dfc00715 	stw	ra,28(sp)
    16b8:	df000615 	stw	fp,24(sp)
    16bc:	df000604 	addi	fp,sp,24
    16c0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    16c4:	e0bffc17 	ldw	r2,-16(fp)
    16c8:	1004803a 	cmplt	r2,r2,zero
    16cc:	1000091e 	bne	r2,zero,16f4 <close+0x44>
    16d0:	e13ffc17 	ldw	r4,-16(fp)
    16d4:	01400304 	movi	r5,12
    16d8:	00006540 	call	654 <__mulsi3>
    16dc:	1007883a 	mov	r3,r2
    16e0:	00800034 	movhi	r2,0
    16e4:	108a7504 	addi	r2,r2,10708
    16e8:	1887883a 	add	r3,r3,r2
    16ec:	e0ffff15 	stw	r3,-4(fp)
    16f0:	00000106 	br	16f8 <close+0x48>
    16f4:	e03fff15 	stw	zero,-4(fp)
    16f8:	e0bfff17 	ldw	r2,-4(fp)
    16fc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    1700:	e0bffb17 	ldw	r2,-20(fp)
    1704:	1005003a 	cmpeq	r2,r2,zero
    1708:	10001d1e 	bne	r2,zero,1780 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    170c:	e0bffb17 	ldw	r2,-20(fp)
    1710:	10800017 	ldw	r2,0(r2)
    1714:	10800417 	ldw	r2,16(r2)
    1718:	1005003a 	cmpeq	r2,r2,zero
    171c:	1000071e 	bne	r2,zero,173c <close+0x8c>
    1720:	e0bffb17 	ldw	r2,-20(fp)
    1724:	10800017 	ldw	r2,0(r2)
    1728:	10800417 	ldw	r2,16(r2)
    172c:	e13ffb17 	ldw	r4,-20(fp)
    1730:	103ee83a 	callr	r2
    1734:	e0bffe15 	stw	r2,-8(fp)
    1738:	00000106 	br	1740 <close+0x90>
    173c:	e03ffe15 	stw	zero,-8(fp)
    1740:	e0bffe17 	ldw	r2,-8(fp)
    1744:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1748:	e13ffc17 	ldw	r4,-16(fp)
    174c:	000209c0 	call	209c <alt_release_fd>
    if (rval < 0)
    1750:	e0bffa17 	ldw	r2,-24(fp)
    1754:	1004403a 	cmpge	r2,r2,zero
    1758:	1000071e 	bne	r2,zero,1778 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    175c:	00017b00 	call	17b0 <alt_get_errno>
    1760:	e0fffa17 	ldw	r3,-24(fp)
    1764:	00c7c83a 	sub	r3,zero,r3
    1768:	10c00015 	stw	r3,0(r2)
      return -1;
    176c:	00bfffc4 	movi	r2,-1
    1770:	e0bffd15 	stw	r2,-12(fp)
    1774:	00000806 	br	1798 <close+0xe8>
    }
    return 0;
    1778:	e03ffd15 	stw	zero,-12(fp)
    177c:	00000606 	br	1798 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1780:	00017b00 	call	17b0 <alt_get_errno>
    1784:	1007883a 	mov	r3,r2
    1788:	00801444 	movi	r2,81
    178c:	18800015 	stw	r2,0(r3)
    return -1;
    1790:	00bfffc4 	movi	r2,-1
    1794:	e0bffd15 	stw	r2,-12(fp)
    1798:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    179c:	e037883a 	mov	sp,fp
    17a0:	dfc00117 	ldw	ra,4(sp)
    17a4:	df000017 	ldw	fp,0(sp)
    17a8:	dec00204 	addi	sp,sp,8
    17ac:	f800283a 	ret

000017b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    17b0:	defffd04 	addi	sp,sp,-12
    17b4:	dfc00215 	stw	ra,8(sp)
    17b8:	df000115 	stw	fp,4(sp)
    17bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    17c0:	00800034 	movhi	r2,0
    17c4:	108adc04 	addi	r2,r2,11120
    17c8:	10800017 	ldw	r2,0(r2)
    17cc:	1005003a 	cmpeq	r2,r2,zero
    17d0:	1000061e 	bne	r2,zero,17ec <alt_get_errno+0x3c>
    17d4:	00800034 	movhi	r2,0
    17d8:	108adc04 	addi	r2,r2,11120
    17dc:	10800017 	ldw	r2,0(r2)
    17e0:	103ee83a 	callr	r2
    17e4:	e0bfff15 	stw	r2,-4(fp)
    17e8:	00000306 	br	17f8 <alt_get_errno+0x48>
    17ec:	00800034 	movhi	r2,0
    17f0:	108b9804 	addi	r2,r2,11872
    17f4:	e0bfff15 	stw	r2,-4(fp)
    17f8:	e0bfff17 	ldw	r2,-4(fp)
}
    17fc:	e037883a 	mov	sp,fp
    1800:	dfc00117 	ldw	ra,4(sp)
    1804:	df000017 	ldw	fp,0(sp)
    1808:	dec00204 	addi	sp,sp,8
    180c:	f800283a 	ret

00001810 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1810:	deffff04 	addi	sp,sp,-4
    1814:	df000015 	stw	fp,0(sp)
    1818:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    181c:	e037883a 	mov	sp,fp
    1820:	df000017 	ldw	fp,0(sp)
    1824:	dec00104 	addi	sp,sp,4
    1828:	f800283a 	ret

0000182c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    182c:	defffc04 	addi	sp,sp,-16
    1830:	df000315 	stw	fp,12(sp)
    1834:	df000304 	addi	fp,sp,12
    1838:	e13ffd15 	stw	r4,-12(fp)
    183c:	e17ffe15 	stw	r5,-8(fp)
    1840:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1844:	e0bfff17 	ldw	r2,-4(fp)
}
    1848:	e037883a 	mov	sp,fp
    184c:	df000017 	ldw	fp,0(sp)
    1850:	dec00104 	addi	sp,sp,4
    1854:	f800283a 	ret

00001858 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1858:	defff904 	addi	sp,sp,-28
    185c:	dfc00615 	stw	ra,24(sp)
    1860:	df000515 	stw	fp,20(sp)
    1864:	df000504 	addi	fp,sp,20
    1868:	e13ffd15 	stw	r4,-12(fp)
    186c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1870:	e0bffd17 	ldw	r2,-12(fp)
    1874:	1005003a 	cmpeq	r2,r2,zero
    1878:	1000041e 	bne	r2,zero,188c <alt_dev_llist_insert+0x34>
    187c:	e0bffd17 	ldw	r2,-12(fp)
    1880:	10800217 	ldw	r2,8(r2)
    1884:	1004c03a 	cmpne	r2,r2,zero
    1888:	1000071e 	bne	r2,zero,18a8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    188c:	000190c0 	call	190c <alt_get_errno>
    1890:	1007883a 	mov	r3,r2
    1894:	00800584 	movi	r2,22
    1898:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    189c:	00bffa84 	movi	r2,-22
    18a0:	e0bfff15 	stw	r2,-4(fp)
    18a4:	00001306 	br	18f4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    18a8:	e0fffd17 	ldw	r3,-12(fp)
    18ac:	e0bffe17 	ldw	r2,-8(fp)
    18b0:	e0bffb15 	stw	r2,-20(fp)
    18b4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    18b8:	e0fffc17 	ldw	r3,-16(fp)
    18bc:	e0bffb17 	ldw	r2,-20(fp)
    18c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    18c4:	e0bffb17 	ldw	r2,-20(fp)
    18c8:	10c00017 	ldw	r3,0(r2)
    18cc:	e0bffc17 	ldw	r2,-16(fp)
    18d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    18d4:	e0bffb17 	ldw	r2,-20(fp)
    18d8:	10c00017 	ldw	r3,0(r2)
    18dc:	e0bffc17 	ldw	r2,-16(fp)
    18e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    18e4:	e0fffb17 	ldw	r3,-20(fp)
    18e8:	e0bffc17 	ldw	r2,-16(fp)
    18ec:	18800015 	stw	r2,0(r3)

  return 0;  
    18f0:	e03fff15 	stw	zero,-4(fp)
    18f4:	e0bfff17 	ldw	r2,-4(fp)
}
    18f8:	e037883a 	mov	sp,fp
    18fc:	dfc00117 	ldw	ra,4(sp)
    1900:	df000017 	ldw	fp,0(sp)
    1904:	dec00204 	addi	sp,sp,8
    1908:	f800283a 	ret

0000190c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    190c:	defffd04 	addi	sp,sp,-12
    1910:	dfc00215 	stw	ra,8(sp)
    1914:	df000115 	stw	fp,4(sp)
    1918:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    191c:	00800034 	movhi	r2,0
    1920:	108adc04 	addi	r2,r2,11120
    1924:	10800017 	ldw	r2,0(r2)
    1928:	1005003a 	cmpeq	r2,r2,zero
    192c:	1000061e 	bne	r2,zero,1948 <alt_get_errno+0x3c>
    1930:	00800034 	movhi	r2,0
    1934:	108adc04 	addi	r2,r2,11120
    1938:	10800017 	ldw	r2,0(r2)
    193c:	103ee83a 	callr	r2
    1940:	e0bfff15 	stw	r2,-4(fp)
    1944:	00000306 	br	1954 <alt_get_errno+0x48>
    1948:	00800034 	movhi	r2,0
    194c:	108b9804 	addi	r2,r2,11872
    1950:	e0bfff15 	stw	r2,-4(fp)
    1954:	e0bfff17 	ldw	r2,-4(fp)
}
    1958:	e037883a 	mov	sp,fp
    195c:	dfc00117 	ldw	ra,4(sp)
    1960:	df000017 	ldw	fp,0(sp)
    1964:	dec00204 	addi	sp,sp,8
    1968:	f800283a 	ret

0000196c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    196c:	defffe04 	addi	sp,sp,-8
    1970:	dfc00115 	stw	ra,4(sp)
    1974:	df000015 	stw	fp,0(sp)
    1978:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    197c:	0009883a 	mov	r4,zero
    1980:	01420004 	movi	r5,2048
    1984:	000255c0 	call	255c <alt_icache_flush>
#endif
}
    1988:	e037883a 	mov	sp,fp
    198c:	dfc00117 	ldw	ra,4(sp)
    1990:	df000017 	ldw	fp,0(sp)
    1994:	dec00204 	addi	sp,sp,8
    1998:	f800283a 	ret

0000199c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    199c:	defff904 	addi	sp,sp,-28
    19a0:	dfc00615 	stw	ra,24(sp)
    19a4:	df000515 	stw	fp,20(sp)
    19a8:	df000504 	addi	fp,sp,20
    19ac:	e13ffc15 	stw	r4,-16(fp)
    19b0:	e17ffd15 	stw	r5,-12(fp)
    19b4:	e1bffe15 	stw	r6,-8(fp)
    19b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    19bc:	e0800217 	ldw	r2,8(fp)
    19c0:	d8800015 	stw	r2,0(sp)
    19c4:	e13ffc17 	ldw	r4,-16(fp)
    19c8:	e17ffd17 	ldw	r5,-12(fp)
    19cc:	e1bffe17 	ldw	r6,-8(fp)
    19d0:	e1ffff17 	ldw	r7,-4(fp)
    19d4:	0001b700 	call	1b70 <alt_iic_isr_register>
}  
    19d8:	e037883a 	mov	sp,fp
    19dc:	dfc00117 	ldw	ra,4(sp)
    19e0:	df000017 	ldw	fp,0(sp)
    19e4:	dec00204 	addi	sp,sp,8
    19e8:	f800283a 	ret

000019ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    19ec:	defff904 	addi	sp,sp,-28
    19f0:	df000615 	stw	fp,24(sp)
    19f4:	df000604 	addi	fp,sp,24
    19f8:	e13ffe15 	stw	r4,-8(fp)
    19fc:	e17fff15 	stw	r5,-4(fp)
    1a00:	e0bfff17 	ldw	r2,-4(fp)
    1a04:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a08:	0005303a 	rdctl	r2,status
    1a0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a10:	e0fffb17 	ldw	r3,-20(fp)
    1a14:	00bfff84 	movi	r2,-2
    1a18:	1884703a 	and	r2,r3,r2
    1a1c:	1001703a 	wrctl	status,r2
  
  return context;
    1a20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a24:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    1a28:	e0fffc17 	ldw	r3,-16(fp)
    1a2c:	00800044 	movi	r2,1
    1a30:	10c4983a 	sll	r2,r2,r3
    1a34:	1007883a 	mov	r3,r2
    1a38:	00800034 	movhi	r2,0
    1a3c:	108b9e04 	addi	r2,r2,11896
    1a40:	10800017 	ldw	r2,0(r2)
    1a44:	1886b03a 	or	r3,r3,r2
    1a48:	00800034 	movhi	r2,0
    1a4c:	108b9e04 	addi	r2,r2,11896
    1a50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a54:	00800034 	movhi	r2,0
    1a58:	108b9e04 	addi	r2,r2,11896
    1a5c:	10800017 	ldw	r2,0(r2)
    1a60:	100170fa 	wrctl	ienable,r2
    1a64:	e0bffd17 	ldw	r2,-12(fp)
    1a68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a6c:	e0bffa17 	ldw	r2,-24(fp)
    1a70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    1a78:	e037883a 	mov	sp,fp
    1a7c:	df000017 	ldw	fp,0(sp)
    1a80:	dec00104 	addi	sp,sp,4
    1a84:	f800283a 	ret

00001a88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1a88:	defff904 	addi	sp,sp,-28
    1a8c:	df000615 	stw	fp,24(sp)
    1a90:	df000604 	addi	fp,sp,24
    1a94:	e13ffe15 	stw	r4,-8(fp)
    1a98:	e17fff15 	stw	r5,-4(fp)
    1a9c:	e0bfff17 	ldw	r2,-4(fp)
    1aa0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1aa4:	0005303a 	rdctl	r2,status
    1aa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1aac:	e0fffb17 	ldw	r3,-20(fp)
    1ab0:	00bfff84 	movi	r2,-2
    1ab4:	1884703a 	and	r2,r3,r2
    1ab8:	1001703a 	wrctl	status,r2
  
  return context;
    1abc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1ac0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    1ac4:	e0fffc17 	ldw	r3,-16(fp)
    1ac8:	00800044 	movi	r2,1
    1acc:	10c4983a 	sll	r2,r2,r3
    1ad0:	0084303a 	nor	r2,zero,r2
    1ad4:	1007883a 	mov	r3,r2
    1ad8:	00800034 	movhi	r2,0
    1adc:	108b9e04 	addi	r2,r2,11896
    1ae0:	10800017 	ldw	r2,0(r2)
    1ae4:	1886703a 	and	r3,r3,r2
    1ae8:	00800034 	movhi	r2,0
    1aec:	108b9e04 	addi	r2,r2,11896
    1af0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1af4:	00800034 	movhi	r2,0
    1af8:	108b9e04 	addi	r2,r2,11896
    1afc:	10800017 	ldw	r2,0(r2)
    1b00:	100170fa 	wrctl	ienable,r2
    1b04:	e0bffd17 	ldw	r2,-12(fp)
    1b08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1b0c:	e0bffa17 	ldw	r2,-24(fp)
    1b10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1b14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    1b18:	e037883a 	mov	sp,fp
    1b1c:	df000017 	ldw	fp,0(sp)
    1b20:	dec00104 	addi	sp,sp,4
    1b24:	f800283a 	ret

00001b28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    1b28:	defffc04 	addi	sp,sp,-16
    1b2c:	df000315 	stw	fp,12(sp)
    1b30:	df000304 	addi	fp,sp,12
    1b34:	e13ffe15 	stw	r4,-8(fp)
    1b38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    1b3c:	000530fa 	rdctl	r2,ienable
    1b40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    1b44:	e0ffff17 	ldw	r3,-4(fp)
    1b48:	00800044 	movi	r2,1
    1b4c:	10c4983a 	sll	r2,r2,r3
    1b50:	1007883a 	mov	r3,r2
    1b54:	e0bffd17 	ldw	r2,-12(fp)
    1b58:	1884703a 	and	r2,r3,r2
    1b5c:	1004c03a 	cmpne	r2,r2,zero
}
    1b60:	e037883a 	mov	sp,fp
    1b64:	df000017 	ldw	fp,0(sp)
    1b68:	dec00104 	addi	sp,sp,4
    1b6c:	f800283a 	ret

00001b70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1b70:	defff404 	addi	sp,sp,-48
    1b74:	dfc00b15 	stw	ra,44(sp)
    1b78:	df000a15 	stw	fp,40(sp)
    1b7c:	df000a04 	addi	fp,sp,40
    1b80:	e13ffb15 	stw	r4,-20(fp)
    1b84:	e17ffc15 	stw	r5,-16(fp)
    1b88:	e1bffd15 	stw	r6,-12(fp)
    1b8c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    1b90:	00bffa84 	movi	r2,-22
    1b94:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1b98:	e0bffc17 	ldw	r2,-16(fp)
    1b9c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1ba0:	e0bff917 	ldw	r2,-28(fp)
    1ba4:	10800808 	cmpgei	r2,r2,32
    1ba8:	1000291e 	bne	r2,zero,1c50 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1bac:	0005303a 	rdctl	r2,status
    1bb0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bb4:	e0fff717 	ldw	r3,-36(fp)
    1bb8:	00bfff84 	movi	r2,-2
    1bbc:	1884703a 	and	r2,r3,r2
    1bc0:	1001703a 	wrctl	status,r2
  
  return context;
    1bc4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1bc8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    1bcc:	e0bff917 	ldw	r2,-28(fp)
    1bd0:	00c00034 	movhi	r3,0
    1bd4:	18cba104 	addi	r3,r3,11908
    1bd8:	100490fa 	slli	r2,r2,3
    1bdc:	10c7883a 	add	r3,r2,r3
    1be0:	e0bffd17 	ldw	r2,-12(fp)
    1be4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    1be8:	e0bff917 	ldw	r2,-28(fp)
    1bec:	00c00034 	movhi	r3,0
    1bf0:	18cba104 	addi	r3,r3,11908
    1bf4:	100490fa 	slli	r2,r2,3
    1bf8:	10c5883a 	add	r2,r2,r3
    1bfc:	10c00104 	addi	r3,r2,4
    1c00:	e0bffe17 	ldw	r2,-8(fp)
    1c04:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1c08:	e0bffd17 	ldw	r2,-12(fp)
    1c0c:	1005003a 	cmpeq	r2,r2,zero
    1c10:	1000051e 	bne	r2,zero,1c28 <alt_iic_isr_register+0xb8>
    1c14:	e17ff917 	ldw	r5,-28(fp)
    1c18:	e13ffb17 	ldw	r4,-20(fp)
    1c1c:	00019ec0 	call	19ec <alt_ic_irq_enable>
    1c20:	e0bfff15 	stw	r2,-4(fp)
    1c24:	00000406 	br	1c38 <alt_iic_isr_register+0xc8>
    1c28:	e17ff917 	ldw	r5,-28(fp)
    1c2c:	e13ffb17 	ldw	r4,-20(fp)
    1c30:	0001a880 	call	1a88 <alt_ic_irq_disable>
    1c34:	e0bfff15 	stw	r2,-4(fp)
    1c38:	e0bfff17 	ldw	r2,-4(fp)
    1c3c:	e0bffa15 	stw	r2,-24(fp)
    1c40:	e0bff817 	ldw	r2,-32(fp)
    1c44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c48:	e0bff617 	ldw	r2,-40(fp)
    1c4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    1c50:	e0bffa17 	ldw	r2,-24(fp)
}
    1c54:	e037883a 	mov	sp,fp
    1c58:	dfc00117 	ldw	ra,4(sp)
    1c5c:	df000017 	ldw	fp,0(sp)
    1c60:	dec00204 	addi	sp,sp,8
    1c64:	f800283a 	ret

00001c68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1c68:	defff804 	addi	sp,sp,-32
    1c6c:	dfc00715 	stw	ra,28(sp)
    1c70:	df000615 	stw	fp,24(sp)
    1c74:	dc000515 	stw	r16,20(sp)
    1c78:	df000504 	addi	fp,sp,20
    1c7c:	e13ffc15 	stw	r4,-16(fp)
    1c80:	e17ffd15 	stw	r5,-12(fp)
    1c84:	e1bffe15 	stw	r6,-8(fp)
    1c88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    1c8c:	e13ffd17 	ldw	r4,-12(fp)
    1c90:	e17ffe17 	ldw	r5,-8(fp)
    1c94:	e1bfff17 	ldw	r6,-4(fp)
    1c98:	0001eb00 	call	1eb0 <open>
    1c9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    1ca0:	e0bffb17 	ldw	r2,-20(fp)
    1ca4:	1004803a 	cmplt	r2,r2,zero
    1ca8:	10001f1e 	bne	r2,zero,1d28 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    1cac:	e13ffb17 	ldw	r4,-20(fp)
    1cb0:	04000034 	movhi	r16,0
    1cb4:	840a7504 	addi	r16,r16,10708
    1cb8:	01400304 	movi	r5,12
    1cbc:	00006540 	call	654 <__mulsi3>
    1cc0:	1405883a 	add	r2,r2,r16
    1cc4:	10c00017 	ldw	r3,0(r2)
    1cc8:	e0bffc17 	ldw	r2,-16(fp)
    1ccc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1cd0:	e13ffb17 	ldw	r4,-20(fp)
    1cd4:	04000034 	movhi	r16,0
    1cd8:	840a7504 	addi	r16,r16,10708
    1cdc:	01400304 	movi	r5,12
    1ce0:	00006540 	call	654 <__mulsi3>
    1ce4:	1405883a 	add	r2,r2,r16
    1ce8:	10800104 	addi	r2,r2,4
    1cec:	10c00017 	ldw	r3,0(r2)
    1cf0:	e0bffc17 	ldw	r2,-16(fp)
    1cf4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1cf8:	e13ffb17 	ldw	r4,-20(fp)
    1cfc:	04000034 	movhi	r16,0
    1d00:	840a7504 	addi	r16,r16,10708
    1d04:	01400304 	movi	r5,12
    1d08:	00006540 	call	654 <__mulsi3>
    1d0c:	1405883a 	add	r2,r2,r16
    1d10:	10800204 	addi	r2,r2,8
    1d14:	10c00017 	ldw	r3,0(r2)
    1d18:	e0bffc17 	ldw	r2,-16(fp)
    1d1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1d20:	e13ffb17 	ldw	r4,-20(fp)
    1d24:	000209c0 	call	209c <alt_release_fd>
  }
} 
    1d28:	e037883a 	mov	sp,fp
    1d2c:	dfc00217 	ldw	ra,8(sp)
    1d30:	df000117 	ldw	fp,4(sp)
    1d34:	dc000017 	ldw	r16,0(sp)
    1d38:	dec00304 	addi	sp,sp,12
    1d3c:	f800283a 	ret

00001d40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1d40:	defffb04 	addi	sp,sp,-20
    1d44:	dfc00415 	stw	ra,16(sp)
    1d48:	df000315 	stw	fp,12(sp)
    1d4c:	df000304 	addi	fp,sp,12
    1d50:	e13ffd15 	stw	r4,-12(fp)
    1d54:	e17ffe15 	stw	r5,-8(fp)
    1d58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1d5c:	01000034 	movhi	r4,0
    1d60:	210a7804 	addi	r4,r4,10720
    1d64:	e17ffd17 	ldw	r5,-12(fp)
    1d68:	01800044 	movi	r6,1
    1d6c:	01c07fc4 	movi	r7,511
    1d70:	0001c680 	call	1c68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1d74:	01000034 	movhi	r4,0
    1d78:	210a7504 	addi	r4,r4,10708
    1d7c:	e17ffe17 	ldw	r5,-8(fp)
    1d80:	000d883a 	mov	r6,zero
    1d84:	01c07fc4 	movi	r7,511
    1d88:	0001c680 	call	1c68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1d8c:	01000034 	movhi	r4,0
    1d90:	210a7b04 	addi	r4,r4,10732
    1d94:	e17fff17 	ldw	r5,-4(fp)
    1d98:	01800044 	movi	r6,1
    1d9c:	01c07fc4 	movi	r7,511
    1da0:	0001c680 	call	1c68 <alt_open_fd>
}  
    1da4:	e037883a 	mov	sp,fp
    1da8:	dfc00117 	ldw	ra,4(sp)
    1dac:	df000017 	ldw	fp,0(sp)
    1db0:	dec00204 	addi	sp,sp,8
    1db4:	f800283a 	ret

00001db8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1db8:	defffa04 	addi	sp,sp,-24
    1dbc:	dfc00515 	stw	ra,20(sp)
    1dc0:	df000415 	stw	fp,16(sp)
    1dc4:	dc000315 	stw	r16,12(sp)
    1dc8:	df000304 	addi	fp,sp,12
    1dcc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1dd0:	e0bffe17 	ldw	r2,-8(fp)
    1dd4:	10800217 	ldw	r2,8(r2)
    1dd8:	10d00034 	orhi	r3,r2,16384
    1ddc:	e0bffe17 	ldw	r2,-8(fp)
    1de0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1de4:	e03ffd15 	stw	zero,-12(fp)
    1de8:	00002306 	br	1e78 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1dec:	e13ffd17 	ldw	r4,-12(fp)
    1df0:	04000034 	movhi	r16,0
    1df4:	840a7504 	addi	r16,r16,10708
    1df8:	01400304 	movi	r5,12
    1dfc:	00006540 	call	654 <__mulsi3>
    1e00:	1405883a 	add	r2,r2,r16
    1e04:	10c00017 	ldw	r3,0(r2)
    1e08:	e0bffe17 	ldw	r2,-8(fp)
    1e0c:	10800017 	ldw	r2,0(r2)
    1e10:	1880161e 	bne	r3,r2,1e6c <alt_file_locked+0xb4>
    1e14:	e13ffd17 	ldw	r4,-12(fp)
    1e18:	04000034 	movhi	r16,0
    1e1c:	840a7504 	addi	r16,r16,10708
    1e20:	01400304 	movi	r5,12
    1e24:	00006540 	call	654 <__mulsi3>
    1e28:	1405883a 	add	r2,r2,r16
    1e2c:	10800204 	addi	r2,r2,8
    1e30:	10800017 	ldw	r2,0(r2)
    1e34:	1004403a 	cmpge	r2,r2,zero
    1e38:	10000c1e 	bne	r2,zero,1e6c <alt_file_locked+0xb4>
    1e3c:	e13ffd17 	ldw	r4,-12(fp)
    1e40:	01400304 	movi	r5,12
    1e44:	00006540 	call	654 <__mulsi3>
    1e48:	1007883a 	mov	r3,r2
    1e4c:	00800034 	movhi	r2,0
    1e50:	108a7504 	addi	r2,r2,10708
    1e54:	1887883a 	add	r3,r3,r2
    1e58:	e0bffe17 	ldw	r2,-8(fp)
    1e5c:	18800326 	beq	r3,r2,1e6c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1e60:	00bffcc4 	movi	r2,-13
    1e64:	e0bfff15 	stw	r2,-4(fp)
    1e68:	00000a06 	br	1e94 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1e6c:	e0bffd17 	ldw	r2,-12(fp)
    1e70:	10800044 	addi	r2,r2,1
    1e74:	e0bffd15 	stw	r2,-12(fp)
    1e78:	00800034 	movhi	r2,0
    1e7c:	108adb04 	addi	r2,r2,11116
    1e80:	10800017 	ldw	r2,0(r2)
    1e84:	1007883a 	mov	r3,r2
    1e88:	e0bffd17 	ldw	r2,-12(fp)
    1e8c:	18bfd72e 	bgeu	r3,r2,1dec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1e90:	e03fff15 	stw	zero,-4(fp)
    1e94:	e0bfff17 	ldw	r2,-4(fp)
}
    1e98:	e037883a 	mov	sp,fp
    1e9c:	dfc00217 	ldw	ra,8(sp)
    1ea0:	df000117 	ldw	fp,4(sp)
    1ea4:	dc000017 	ldw	r16,0(sp)
    1ea8:	dec00304 	addi	sp,sp,12
    1eac:	f800283a 	ret

00001eb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1eb0:	defff404 	addi	sp,sp,-48
    1eb4:	dfc00b15 	stw	ra,44(sp)
    1eb8:	df000a15 	stw	fp,40(sp)
    1ebc:	df000a04 	addi	fp,sp,40
    1ec0:	e13ffb15 	stw	r4,-20(fp)
    1ec4:	e17ffc15 	stw	r5,-16(fp)
    1ec8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1ecc:	00bfffc4 	movi	r2,-1
    1ed0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    1ed4:	00bffb44 	movi	r2,-19
    1ed8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    1edc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1ee0:	e13ffb17 	ldw	r4,-20(fp)
    1ee4:	01400034 	movhi	r5,0
    1ee8:	294ad904 	addi	r5,r5,11108
    1eec:	00022d80 	call	22d8 <alt_find_dev>
    1ef0:	e0bffa15 	stw	r2,-24(fp)
    1ef4:	e0bffa17 	ldw	r2,-24(fp)
    1ef8:	1004c03a 	cmpne	r2,r2,zero
    1efc:	1000051e 	bne	r2,zero,1f14 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1f00:	e13ffb17 	ldw	r4,-20(fp)
    1f04:	000236c0 	call	236c <alt_find_file>
    1f08:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    1f0c:	00800044 	movi	r2,1
    1f10:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1f14:	e0bffa17 	ldw	r2,-24(fp)
    1f18:	1005003a 	cmpeq	r2,r2,zero
    1f1c:	1000311e 	bne	r2,zero,1fe4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1f20:	e13ffa17 	ldw	r4,-24(fp)
    1f24:	000248c0 	call	248c <alt_get_fd>
    1f28:	e0bff815 	stw	r2,-32(fp)
    1f2c:	e0bff817 	ldw	r2,-32(fp)
    1f30:	1004403a 	cmpge	r2,r2,zero
    1f34:	1000031e 	bne	r2,zero,1f44 <open+0x94>
    {
      status = index;
    1f38:	e0bff817 	ldw	r2,-32(fp)
    1f3c:	e0bff715 	stw	r2,-36(fp)
    1f40:	00002a06 	br	1fec <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    1f44:	e13ff817 	ldw	r4,-32(fp)
    1f48:	01400304 	movi	r5,12
    1f4c:	00006540 	call	654 <__mulsi3>
    1f50:	1007883a 	mov	r3,r2
    1f54:	00800034 	movhi	r2,0
    1f58:	108a7504 	addi	r2,r2,10708
    1f5c:	1885883a 	add	r2,r3,r2
    1f60:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1f64:	e0fffc17 	ldw	r3,-16(fp)
    1f68:	00900034 	movhi	r2,16384
    1f6c:	10bfffc4 	addi	r2,r2,-1
    1f70:	1886703a 	and	r3,r3,r2
    1f74:	e0bff917 	ldw	r2,-28(fp)
    1f78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1f7c:	e0bff617 	ldw	r2,-40(fp)
    1f80:	1004c03a 	cmpne	r2,r2,zero
    1f84:	1000061e 	bne	r2,zero,1fa0 <open+0xf0>
    1f88:	e13ff917 	ldw	r4,-28(fp)
    1f8c:	0001db80 	call	1db8 <alt_file_locked>
    1f90:	e0bff715 	stw	r2,-36(fp)
    1f94:	e0bff717 	ldw	r2,-36(fp)
    1f98:	1004803a 	cmplt	r2,r2,zero
    1f9c:	1000131e 	bne	r2,zero,1fec <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1fa0:	e0bffa17 	ldw	r2,-24(fp)
    1fa4:	10800317 	ldw	r2,12(r2)
    1fa8:	1005003a 	cmpeq	r2,r2,zero
    1fac:	1000091e 	bne	r2,zero,1fd4 <open+0x124>
    1fb0:	e0bffa17 	ldw	r2,-24(fp)
    1fb4:	10800317 	ldw	r2,12(r2)
    1fb8:	e13ff917 	ldw	r4,-28(fp)
    1fbc:	e17ffb17 	ldw	r5,-20(fp)
    1fc0:	e1bffc17 	ldw	r6,-16(fp)
    1fc4:	e1fffd17 	ldw	r7,-12(fp)
    1fc8:	103ee83a 	callr	r2
    1fcc:	e0bfff15 	stw	r2,-4(fp)
    1fd0:	00000106 	br	1fd8 <open+0x128>
    1fd4:	e03fff15 	stw	zero,-4(fp)
    1fd8:	e0bfff17 	ldw	r2,-4(fp)
    1fdc:	e0bff715 	stw	r2,-36(fp)
    1fe0:	00000206 	br	1fec <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1fe4:	00bffb44 	movi	r2,-19
    1fe8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1fec:	e0bff717 	ldw	r2,-36(fp)
    1ff0:	1004403a 	cmpge	r2,r2,zero
    1ff4:	1000091e 	bne	r2,zero,201c <open+0x16c>
  {
    alt_release_fd (index);  
    1ff8:	e13ff817 	ldw	r4,-32(fp)
    1ffc:	000209c0 	call	209c <alt_release_fd>
    ALT_ERRNO = -status;
    2000:	000203c0 	call	203c <alt_get_errno>
    2004:	e0fff717 	ldw	r3,-36(fp)
    2008:	00c7c83a 	sub	r3,zero,r3
    200c:	10c00015 	stw	r3,0(r2)
    return -1;
    2010:	00bfffc4 	movi	r2,-1
    2014:	e0bffe15 	stw	r2,-8(fp)
    2018:	00000206 	br	2024 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    201c:	e0bff817 	ldw	r2,-32(fp)
    2020:	e0bffe15 	stw	r2,-8(fp)
    2024:	e0bffe17 	ldw	r2,-8(fp)
}
    2028:	e037883a 	mov	sp,fp
    202c:	dfc00117 	ldw	ra,4(sp)
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00204 	addi	sp,sp,8
    2038:	f800283a 	ret

0000203c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    203c:	defffd04 	addi	sp,sp,-12
    2040:	dfc00215 	stw	ra,8(sp)
    2044:	df000115 	stw	fp,4(sp)
    2048:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    204c:	00800034 	movhi	r2,0
    2050:	108adc04 	addi	r2,r2,11120
    2054:	10800017 	ldw	r2,0(r2)
    2058:	1005003a 	cmpeq	r2,r2,zero
    205c:	1000061e 	bne	r2,zero,2078 <alt_get_errno+0x3c>
    2060:	00800034 	movhi	r2,0
    2064:	108adc04 	addi	r2,r2,11120
    2068:	10800017 	ldw	r2,0(r2)
    206c:	103ee83a 	callr	r2
    2070:	e0bfff15 	stw	r2,-4(fp)
    2074:	00000306 	br	2084 <alt_get_errno+0x48>
    2078:	00800034 	movhi	r2,0
    207c:	108b9804 	addi	r2,r2,11872
    2080:	e0bfff15 	stw	r2,-4(fp)
    2084:	e0bfff17 	ldw	r2,-4(fp)
}
    2088:	e037883a 	mov	sp,fp
    208c:	dfc00117 	ldw	ra,4(sp)
    2090:	df000017 	ldw	fp,0(sp)
    2094:	dec00204 	addi	sp,sp,8
    2098:	f800283a 	ret

0000209c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    209c:	defffc04 	addi	sp,sp,-16
    20a0:	dfc00315 	stw	ra,12(sp)
    20a4:	df000215 	stw	fp,8(sp)
    20a8:	dc000115 	stw	r16,4(sp)
    20ac:	df000104 	addi	fp,sp,4
    20b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    20b4:	e0bfff17 	ldw	r2,-4(fp)
    20b8:	108000d0 	cmplti	r2,r2,3
    20bc:	10000f1e 	bne	r2,zero,20fc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    20c0:	e13fff17 	ldw	r4,-4(fp)
    20c4:	04000034 	movhi	r16,0
    20c8:	840a7504 	addi	r16,r16,10708
    20cc:	01400304 	movi	r5,12
    20d0:	00006540 	call	654 <__mulsi3>
    20d4:	1405883a 	add	r2,r2,r16
    20d8:	10800204 	addi	r2,r2,8
    20dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    20e0:	e13fff17 	ldw	r4,-4(fp)
    20e4:	04000034 	movhi	r16,0
    20e8:	840a7504 	addi	r16,r16,10708
    20ec:	01400304 	movi	r5,12
    20f0:	00006540 	call	654 <__mulsi3>
    20f4:	1405883a 	add	r2,r2,r16
    20f8:	10000015 	stw	zero,0(r2)
  }
}
    20fc:	e037883a 	mov	sp,fp
    2100:	dfc00217 	ldw	ra,8(sp)
    2104:	df000117 	ldw	fp,4(sp)
    2108:	dc000017 	ldw	r16,0(sp)
    210c:	dec00304 	addi	sp,sp,12
    2110:	f800283a 	ret

00002114 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2114:	defffa04 	addi	sp,sp,-24
    2118:	df000515 	stw	fp,20(sp)
    211c:	df000504 	addi	fp,sp,20
    2120:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2124:	0005303a 	rdctl	r2,status
    2128:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    212c:	e0fffd17 	ldw	r3,-12(fp)
    2130:	00bfff84 	movi	r2,-2
    2134:	1884703a 	and	r2,r3,r2
    2138:	1001703a 	wrctl	status,r2
  
  return context;
    213c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2140:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    2144:	e0bfff17 	ldw	r2,-4(fp)
    2148:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    214c:	e0bffc17 	ldw	r2,-16(fp)
    2150:	10c00017 	ldw	r3,0(r2)
    2154:	e0bffc17 	ldw	r2,-16(fp)
    2158:	10800117 	ldw	r2,4(r2)
    215c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2160:	e0bffc17 	ldw	r2,-16(fp)
    2164:	10c00117 	ldw	r3,4(r2)
    2168:	e0bffc17 	ldw	r2,-16(fp)
    216c:	10800017 	ldw	r2,0(r2)
    2170:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2174:	e0fffc17 	ldw	r3,-16(fp)
    2178:	e0bffc17 	ldw	r2,-16(fp)
    217c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    2180:	e0fffc17 	ldw	r3,-16(fp)
    2184:	e0bffc17 	ldw	r2,-16(fp)
    2188:	18800015 	stw	r2,0(r3)
    218c:	e0bffe17 	ldw	r2,-8(fp)
    2190:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2194:	e0bffb17 	ldw	r2,-20(fp)
    2198:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    219c:	e037883a 	mov	sp,fp
    21a0:	df000017 	ldw	fp,0(sp)
    21a4:	dec00104 	addi	sp,sp,4
    21a8:	f800283a 	ret

000021ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    21ac:	defffb04 	addi	sp,sp,-20
    21b0:	dfc00415 	stw	ra,16(sp)
    21b4:	df000315 	stw	fp,12(sp)
    21b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    21bc:	d0a00917 	ldw	r2,-32732(gp)
    21c0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    21c4:	d0a0cb17 	ldw	r2,-31956(gp)
    21c8:	10800044 	addi	r2,r2,1
    21cc:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    21d0:	00003106 	br	2298 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    21d4:	e0bffe17 	ldw	r2,-8(fp)
    21d8:	10800017 	ldw	r2,0(r2)
    21dc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    21e0:	e0bffe17 	ldw	r2,-8(fp)
    21e4:	10800403 	ldbu	r2,16(r2)
    21e8:	10803fcc 	andi	r2,r2,255
    21ec:	1005003a 	cmpeq	r2,r2,zero
    21f0:	1000051e 	bne	r2,zero,2208 <alt_tick+0x5c>
    21f4:	d0a0cb17 	ldw	r2,-31956(gp)
    21f8:	1004c03a 	cmpne	r2,r2,zero
    21fc:	1000021e 	bne	r2,zero,2208 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    2200:	e0bffe17 	ldw	r2,-8(fp)
    2204:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2208:	e0bffe17 	ldw	r2,-8(fp)
    220c:	10c00217 	ldw	r3,8(r2)
    2210:	d0a0cb17 	ldw	r2,-31956(gp)
    2214:	10c01e36 	bltu	r2,r3,2290 <alt_tick+0xe4>
    2218:	e0bffe17 	ldw	r2,-8(fp)
    221c:	10800403 	ldbu	r2,16(r2)
    2220:	10803fcc 	andi	r2,r2,255
    2224:	1004c03a 	cmpne	r2,r2,zero
    2228:	1000191e 	bne	r2,zero,2290 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    222c:	e0bffe17 	ldw	r2,-8(fp)
    2230:	10c00317 	ldw	r3,12(r2)
    2234:	e0bffe17 	ldw	r2,-8(fp)
    2238:	11000517 	ldw	r4,20(r2)
    223c:	183ee83a 	callr	r3
    2240:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2244:	e0bffd17 	ldw	r2,-12(fp)
    2248:	1004c03a 	cmpne	r2,r2,zero
    224c:	1000031e 	bne	r2,zero,225c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    2250:	e13ffe17 	ldw	r4,-8(fp)
    2254:	00021140 	call	2114 <alt_alarm_stop>
    2258:	00000d06 	br	2290 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    225c:	e0bffe17 	ldw	r2,-8(fp)
    2260:	10c00217 	ldw	r3,8(r2)
    2264:	e0bffd17 	ldw	r2,-12(fp)
    2268:	1887883a 	add	r3,r3,r2
    226c:	e0bffe17 	ldw	r2,-8(fp)
    2270:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2274:	e0bffe17 	ldw	r2,-8(fp)
    2278:	10c00217 	ldw	r3,8(r2)
    227c:	d0a0cb17 	ldw	r2,-31956(gp)
    2280:	1880032e 	bgeu	r3,r2,2290 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    2284:	e0fffe17 	ldw	r3,-8(fp)
    2288:	00800044 	movi	r2,1
    228c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    2290:	e0bfff17 	ldw	r2,-4(fp)
    2294:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2298:	d0e00904 	addi	r3,gp,-32732
    229c:	e0bffe17 	ldw	r2,-8(fp)
    22a0:	10ffcc1e 	bne	r2,r3,21d4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    22a4:	e037883a 	mov	sp,fp
    22a8:	dfc00117 	ldw	ra,4(sp)
    22ac:	df000017 	ldw	fp,0(sp)
    22b0:	dec00204 	addi	sp,sp,8
    22b4:	f800283a 	ret

000022b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    22b8:	deffff04 	addi	sp,sp,-4
    22bc:	df000015 	stw	fp,0(sp)
    22c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    22c4:	000170fa 	wrctl	ienable,zero
}
    22c8:	e037883a 	mov	sp,fp
    22cc:	df000017 	ldw	fp,0(sp)
    22d0:	dec00104 	addi	sp,sp,4
    22d4:	f800283a 	ret

000022d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    22d8:	defff904 	addi	sp,sp,-28
    22dc:	dfc00615 	stw	ra,24(sp)
    22e0:	df000515 	stw	fp,20(sp)
    22e4:	df000504 	addi	fp,sp,20
    22e8:	e13ffd15 	stw	r4,-12(fp)
    22ec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    22f0:	e0bffe17 	ldw	r2,-8(fp)
    22f4:	10800017 	ldw	r2,0(r2)
    22f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    22fc:	e13ffd17 	ldw	r4,-12(fp)
    2300:	0000f200 	call	f20 <strlen>
    2304:	10800044 	addi	r2,r2,1
    2308:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    230c:	00000d06 	br	2344 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2310:	e0bffc17 	ldw	r2,-16(fp)
    2314:	11000217 	ldw	r4,8(r2)
    2318:	e1bffb17 	ldw	r6,-20(fp)
    231c:	e17ffd17 	ldw	r5,-12(fp)
    2320:	000260c0 	call	260c <memcmp>
    2324:	1004c03a 	cmpne	r2,r2,zero
    2328:	1000031e 	bne	r2,zero,2338 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    232c:	e0bffc17 	ldw	r2,-16(fp)
    2330:	e0bfff15 	stw	r2,-4(fp)
    2334:	00000706 	br	2354 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2338:	e0bffc17 	ldw	r2,-16(fp)
    233c:	10800017 	ldw	r2,0(r2)
    2340:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2344:	e0fffe17 	ldw	r3,-8(fp)
    2348:	e0bffc17 	ldw	r2,-16(fp)
    234c:	10fff01e 	bne	r2,r3,2310 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2350:	e03fff15 	stw	zero,-4(fp)
    2354:	e0bfff17 	ldw	r2,-4(fp)
}
    2358:	e037883a 	mov	sp,fp
    235c:	dfc00117 	ldw	ra,4(sp)
    2360:	df000017 	ldw	fp,0(sp)
    2364:	dec00204 	addi	sp,sp,8
    2368:	f800283a 	ret

0000236c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    236c:	defffa04 	addi	sp,sp,-24
    2370:	dfc00515 	stw	ra,20(sp)
    2374:	df000415 	stw	fp,16(sp)
    2378:	df000404 	addi	fp,sp,16
    237c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2380:	00800034 	movhi	r2,0
    2384:	108ad704 	addi	r2,r2,11100
    2388:	10800017 	ldw	r2,0(r2)
    238c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2390:	00003306 	br	2460 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    2394:	e0bffd17 	ldw	r2,-12(fp)
    2398:	11000217 	ldw	r4,8(r2)
    239c:	0000f200 	call	f20 <strlen>
    23a0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    23a4:	e0bffd17 	ldw	r2,-12(fp)
    23a8:	10c00217 	ldw	r3,8(r2)
    23ac:	e0bffc17 	ldw	r2,-16(fp)
    23b0:	1885883a 	add	r2,r3,r2
    23b4:	10bfffc4 	addi	r2,r2,-1
    23b8:	10800003 	ldbu	r2,0(r2)
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1080201c 	xori	r2,r2,128
    23c4:	10bfe004 	addi	r2,r2,-128
    23c8:	10800bd8 	cmpnei	r2,r2,47
    23cc:	1000031e 	bne	r2,zero,23dc <alt_find_file+0x70>
    {
      len -= 1;
    23d0:	e0bffc17 	ldw	r2,-16(fp)
    23d4:	10bfffc4 	addi	r2,r2,-1
    23d8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    23dc:	e0bffc17 	ldw	r2,-16(fp)
    23e0:	1007883a 	mov	r3,r2
    23e4:	e0bffe17 	ldw	r2,-8(fp)
    23e8:	1885883a 	add	r2,r3,r2
    23ec:	10800003 	ldbu	r2,0(r2)
    23f0:	10803fcc 	andi	r2,r2,255
    23f4:	1080201c 	xori	r2,r2,128
    23f8:	10bfe004 	addi	r2,r2,-128
    23fc:	10800be0 	cmpeqi	r2,r2,47
    2400:	10000a1e 	bne	r2,zero,242c <alt_find_file+0xc0>
    2404:	e0bffc17 	ldw	r2,-16(fp)
    2408:	1007883a 	mov	r3,r2
    240c:	e0bffe17 	ldw	r2,-8(fp)
    2410:	1885883a 	add	r2,r3,r2
    2414:	10800003 	ldbu	r2,0(r2)
    2418:	10803fcc 	andi	r2,r2,255
    241c:	1080201c 	xori	r2,r2,128
    2420:	10bfe004 	addi	r2,r2,-128
    2424:	1004c03a 	cmpne	r2,r2,zero
    2428:	10000a1e 	bne	r2,zero,2454 <alt_find_file+0xe8>
    242c:	e0bffd17 	ldw	r2,-12(fp)
    2430:	11000217 	ldw	r4,8(r2)
    2434:	e1bffc17 	ldw	r6,-16(fp)
    2438:	e17ffe17 	ldw	r5,-8(fp)
    243c:	000260c0 	call	260c <memcmp>
    2440:	1004c03a 	cmpne	r2,r2,zero
    2444:	1000031e 	bne	r2,zero,2454 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2448:	e0bffd17 	ldw	r2,-12(fp)
    244c:	e0bfff15 	stw	r2,-4(fp)
    2450:	00000806 	br	2474 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    2454:	e0bffd17 	ldw	r2,-12(fp)
    2458:	10800017 	ldw	r2,0(r2)
    245c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2460:	00c00034 	movhi	r3,0
    2464:	18cad704 	addi	r3,r3,11100
    2468:	e0bffd17 	ldw	r2,-12(fp)
    246c:	10ffc91e 	bne	r2,r3,2394 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2470:	e03fff15 	stw	zero,-4(fp)
    2474:	e0bfff17 	ldw	r2,-4(fp)
}
    2478:	e037883a 	mov	sp,fp
    247c:	dfc00117 	ldw	ra,4(sp)
    2480:	df000017 	ldw	fp,0(sp)
    2484:	dec00204 	addi	sp,sp,8
    2488:	f800283a 	ret

0000248c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    248c:	defffa04 	addi	sp,sp,-24
    2490:	dfc00515 	stw	ra,20(sp)
    2494:	df000415 	stw	fp,16(sp)
    2498:	dc000315 	stw	r16,12(sp)
    249c:	df000304 	addi	fp,sp,12
    24a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    24a4:	00bffa04 	movi	r2,-24
    24a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    24ac:	e03ffe15 	stw	zero,-8(fp)
    24b0:	00002006 	br	2534 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    24b4:	e13ffe17 	ldw	r4,-8(fp)
    24b8:	04000034 	movhi	r16,0
    24bc:	840a7504 	addi	r16,r16,10708
    24c0:	01400304 	movi	r5,12
    24c4:	00006540 	call	654 <__mulsi3>
    24c8:	1405883a 	add	r2,r2,r16
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	1004c03a 	cmpne	r2,r2,zero
    24d4:	1000141e 	bne	r2,zero,2528 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    24d8:	e13ffe17 	ldw	r4,-8(fp)
    24dc:	04000034 	movhi	r16,0
    24e0:	840a7504 	addi	r16,r16,10708
    24e4:	01400304 	movi	r5,12
    24e8:	00006540 	call	654 <__mulsi3>
    24ec:	1407883a 	add	r3,r2,r16
    24f0:	e0bfff17 	ldw	r2,-4(fp)
    24f4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    24f8:	00800034 	movhi	r2,0
    24fc:	108adb04 	addi	r2,r2,11116
    2500:	10c00017 	ldw	r3,0(r2)
    2504:	e0bffe17 	ldw	r2,-8(fp)
    2508:	1880040e 	bge	r3,r2,251c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    250c:	00c00034 	movhi	r3,0
    2510:	18cadb04 	addi	r3,r3,11116
    2514:	e0bffe17 	ldw	r2,-8(fp)
    2518:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    251c:	e0bffe17 	ldw	r2,-8(fp)
    2520:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2524:	00000606 	br	2540 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2528:	e0bffe17 	ldw	r2,-8(fp)
    252c:	10800044 	addi	r2,r2,1
    2530:	e0bffe15 	stw	r2,-8(fp)
    2534:	e0bffe17 	ldw	r2,-8(fp)
    2538:	10800810 	cmplti	r2,r2,32
    253c:	103fdd1e 	bne	r2,zero,24b4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2540:	e0bffd17 	ldw	r2,-12(fp)
}
    2544:	e037883a 	mov	sp,fp
    2548:	dfc00217 	ldw	ra,8(sp)
    254c:	df000117 	ldw	fp,4(sp)
    2550:	dc000017 	ldw	r16,0(sp)
    2554:	dec00304 	addi	sp,sp,12
    2558:	f800283a 	ret

0000255c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    255c:	defffb04 	addi	sp,sp,-20
    2560:	df000415 	stw	fp,16(sp)
    2564:	df000404 	addi	fp,sp,16
    2568:	e13ffe15 	stw	r4,-8(fp)
    256c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2570:	e0bfff17 	ldw	r2,-4(fp)
    2574:	10820070 	cmpltui	r2,r2,2049
    2578:	1000021e 	bne	r2,zero,2584 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    257c:	00820004 	movi	r2,2048
    2580:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2584:	e0fffe17 	ldw	r3,-8(fp)
    2588:	e0bfff17 	ldw	r2,-4(fp)
    258c:	1885883a 	add	r2,r3,r2
    2590:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2594:	e0bffe17 	ldw	r2,-8(fp)
    2598:	e0bffd15 	stw	r2,-12(fp)
    259c:	00000506 	br	25b4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    25a0:	e0bffd17 	ldw	r2,-12(fp)
    25a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    25a8:	e0bffd17 	ldw	r2,-12(fp)
    25ac:	10800804 	addi	r2,r2,32
    25b0:	e0bffd15 	stw	r2,-12(fp)
    25b4:	e0fffd17 	ldw	r3,-12(fp)
    25b8:	e0bffc17 	ldw	r2,-16(fp)
    25bc:	18bff836 	bltu	r3,r2,25a0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    25c0:	e0bffe17 	ldw	r2,-8(fp)
    25c4:	108007cc 	andi	r2,r2,31
    25c8:	1005003a 	cmpeq	r2,r2,zero
    25cc:	1000021e 	bne	r2,zero,25d8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    25d0:	e0bffd17 	ldw	r2,-12(fp)
    25d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    25d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    25dc:	e037883a 	mov	sp,fp
    25e0:	df000017 	ldw	fp,0(sp)
    25e4:	dec00104 	addi	sp,sp,4
    25e8:	f800283a 	ret

000025ec <exit>:
    25ec:	defffe04 	addi	sp,sp,-8
    25f0:	dc400015 	stw	r17,0(sp)
    25f4:	000b883a 	mov	r5,zero
    25f8:	2023883a 	mov	r17,r4
    25fc:	dfc00115 	stw	ra,4(sp)
    2600:	000264c0 	call	264c <__call_exitprocs>
    2604:	8809883a 	mov	r4,r17
    2608:	00028480 	call	2848 <_exit>

0000260c <memcmp>:
    260c:	31ffffc4 	addi	r7,r6,-1
    2610:	3000061e 	bne	r6,zero,262c <memcmp+0x20>
    2614:	00000a06 	br	2640 <memcmp+0x34>
    2618:	39ffffc4 	addi	r7,r7,-1
    261c:	00bfffc4 	movi	r2,-1
    2620:	21000044 	addi	r4,r4,1
    2624:	29400044 	addi	r5,r5,1
    2628:	38800526 	beq	r7,r2,2640 <memcmp+0x34>
    262c:	20c00003 	ldbu	r3,0(r4)
    2630:	28800003 	ldbu	r2,0(r5)
    2634:	18bff826 	beq	r3,r2,2618 <memcmp+0xc>
    2638:	1885c83a 	sub	r2,r3,r2
    263c:	f800283a 	ret
    2640:	0005883a 	mov	r2,zero
    2644:	f800283a 	ret

00002648 <register_fini>:
    2648:	f800283a 	ret

0000264c <__call_exitprocs>:
    264c:	defff304 	addi	sp,sp,-52
    2650:	00800034 	movhi	r2,0
    2654:	108ad604 	addi	r2,r2,11096
    2658:	df000b15 	stw	fp,44(sp)
    265c:	17000017 	ldw	fp,0(r2)
    2660:	00800034 	movhi	r2,0
    2664:	10800004 	addi	r2,r2,0
    2668:	1005003a 	cmpeq	r2,r2,zero
    266c:	d8800215 	stw	r2,8(sp)
    2670:	e0800c04 	addi	r2,fp,48
    2674:	dd800915 	stw	r22,36(sp)
    2678:	dd400815 	stw	r21,32(sp)
    267c:	dfc00c15 	stw	ra,48(sp)
    2680:	ddc00a15 	stw	r23,40(sp)
    2684:	dd000715 	stw	r20,28(sp)
    2688:	dcc00615 	stw	r19,24(sp)
    268c:	dc800515 	stw	r18,20(sp)
    2690:	dc400415 	stw	r17,16(sp)
    2694:	dc000315 	stw	r16,12(sp)
    2698:	282d883a 	mov	r22,r5
    269c:	d9000115 	stw	r4,4(sp)
    26a0:	d8800015 	stw	r2,0(sp)
    26a4:	282b003a 	cmpeq	r21,r5,zero
    26a8:	e4400c17 	ldw	r17,48(fp)
    26ac:	88001226 	beq	r17,zero,26f8 <__call_exitprocs+0xac>
    26b0:	ddc00017 	ldw	r23,0(sp)
    26b4:	88800117 	ldw	r2,4(r17)
    26b8:	8c802217 	ldw	r18,136(r17)
    26bc:	143fffc4 	addi	r16,r2,-1
    26c0:	80000b16 	blt	r16,zero,26f0 <__call_exitprocs+0xa4>
    26c4:	9027003a 	cmpeq	r19,r18,zero
    26c8:	a800171e 	bne	r21,zero,2728 <__call_exitprocs+0xdc>
    26cc:	9800051e 	bne	r19,zero,26e4 <__call_exitprocs+0x98>
    26d0:	8409883a 	add	r4,r16,r16
    26d4:	2105883a 	add	r2,r4,r4
    26d8:	1485883a 	add	r2,r2,r18
    26dc:	10c02017 	ldw	r3,128(r2)
    26e0:	b0c01226 	beq	r22,r3,272c <__call_exitprocs+0xe0>
    26e4:	843fffc4 	addi	r16,r16,-1
    26e8:	00bfffc4 	movi	r2,-1
    26ec:	80bff61e 	bne	r16,r2,26c8 <__call_exitprocs+0x7c>
    26f0:	d8800217 	ldw	r2,8(sp)
    26f4:	10003226 	beq	r2,zero,27c0 <__call_exitprocs+0x174>
    26f8:	dfc00c17 	ldw	ra,48(sp)
    26fc:	df000b17 	ldw	fp,44(sp)
    2700:	ddc00a17 	ldw	r23,40(sp)
    2704:	dd800917 	ldw	r22,36(sp)
    2708:	dd400817 	ldw	r21,32(sp)
    270c:	dd000717 	ldw	r20,28(sp)
    2710:	dcc00617 	ldw	r19,24(sp)
    2714:	dc800517 	ldw	r18,20(sp)
    2718:	dc400417 	ldw	r17,16(sp)
    271c:	dc000317 	ldw	r16,12(sp)
    2720:	dec00d04 	addi	sp,sp,52
    2724:	f800283a 	ret
    2728:	8409883a 	add	r4,r16,r16
    272c:	88c00117 	ldw	r3,4(r17)
    2730:	2105883a 	add	r2,r4,r4
    2734:	1445883a 	add	r2,r2,r17
    2738:	18ffffc4 	addi	r3,r3,-1
    273c:	11800217 	ldw	r6,8(r2)
    2740:	1c001826 	beq	r3,r16,27a4 <__call_exitprocs+0x158>
    2744:	10000215 	stw	zero,8(r2)
    2748:	303fe626 	beq	r6,zero,26e4 <__call_exitprocs+0x98>
    274c:	8d000117 	ldw	r20,4(r17)
    2750:	9800121e 	bne	r19,zero,279c <__call_exitprocs+0x150>
    2754:	00c00044 	movi	r3,1
    2758:	1c06983a 	sll	r3,r3,r16
    275c:	90804017 	ldw	r2,256(r18)
    2760:	1884703a 	and	r2,r3,r2
    2764:	10000d26 	beq	r2,zero,279c <__call_exitprocs+0x150>
    2768:	90804117 	ldw	r2,260(r18)
    276c:	1884703a 	and	r2,r3,r2
    2770:	10000e1e 	bne	r2,zero,27ac <__call_exitprocs+0x160>
    2774:	2105883a 	add	r2,r4,r4
    2778:	1485883a 	add	r2,r2,r18
    277c:	11400017 	ldw	r5,0(r2)
    2780:	d9000117 	ldw	r4,4(sp)
    2784:	303ee83a 	callr	r6
    2788:	88800117 	ldw	r2,4(r17)
    278c:	a0bfc61e 	bne	r20,r2,26a8 <__call_exitprocs+0x5c>
    2790:	b8800017 	ldw	r2,0(r23)
    2794:	147fd326 	beq	r2,r17,26e4 <__call_exitprocs+0x98>
    2798:	003fc306 	br	26a8 <__call_exitprocs+0x5c>
    279c:	303ee83a 	callr	r6
    27a0:	003ff906 	br	2788 <__call_exitprocs+0x13c>
    27a4:	8c000115 	stw	r16,4(r17)
    27a8:	003fe706 	br	2748 <__call_exitprocs+0xfc>
    27ac:	2105883a 	add	r2,r4,r4
    27b0:	1485883a 	add	r2,r2,r18
    27b4:	11000017 	ldw	r4,0(r2)
    27b8:	303ee83a 	callr	r6
    27bc:	003ff206 	br	2788 <__call_exitprocs+0x13c>
    27c0:	88800117 	ldw	r2,4(r17)
    27c4:	10000b1e 	bne	r2,zero,27f4 <__call_exitprocs+0x1a8>
    27c8:	89000017 	ldw	r4,0(r17)
    27cc:	20000a26 	beq	r4,zero,27f8 <__call_exitprocs+0x1ac>
    27d0:	b9000015 	stw	r4,0(r23)
    27d4:	90000226 	beq	r18,zero,27e0 <__call_exitprocs+0x194>
    27d8:	9009883a 	mov	r4,r18
    27dc:	00000000 	call	0 <__alt_mem_onchip_mem>
    27e0:	8809883a 	mov	r4,r17
    27e4:	00000000 	call	0 <__alt_mem_onchip_mem>
    27e8:	bc400017 	ldw	r17,0(r23)
    27ec:	883fb11e 	bne	r17,zero,26b4 <__call_exitprocs+0x68>
    27f0:	003fc106 	br	26f8 <__call_exitprocs+0xac>
    27f4:	89000017 	ldw	r4,0(r17)
    27f8:	882f883a 	mov	r23,r17
    27fc:	2023883a 	mov	r17,r4
    2800:	883fac1e 	bne	r17,zero,26b4 <__call_exitprocs+0x68>
    2804:	003fbc06 	br	26f8 <__call_exitprocs+0xac>

00002808 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    2808:	defffd04 	addi	sp,sp,-12
    280c:	df000215 	stw	fp,8(sp)
    2810:	df000204 	addi	fp,sp,8
    2814:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    2818:	e0bfff17 	ldw	r2,-4(fp)
    281c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2820:	e0bffe17 	ldw	r2,-8(fp)
    2824:	1005003a 	cmpeq	r2,r2,zero
    2828:	1000021e 	bne	r2,zero,2834 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    282c:	002af070 	cmpltui	zero,zero,43969
    2830:	00000106 	br	2838 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    2834:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    2838:	e037883a 	mov	sp,fp
    283c:	df000017 	ldw	fp,0(sp)
    2840:	dec00104 	addi	sp,sp,4
    2844:	f800283a 	ret

00002848 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2848:	defffd04 	addi	sp,sp,-12
    284c:	dfc00215 	stw	ra,8(sp)
    2850:	df000115 	stw	fp,4(sp)
    2854:	df000104 	addi	fp,sp,4
    2858:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    285c:	e13fff17 	ldw	r4,-4(fp)
    2860:	00028080 	call	2808 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2864:	003fff06 	br	2864 <_exit+0x1c>
    2868:	00002648 	cmpgei	zero,zero,153
