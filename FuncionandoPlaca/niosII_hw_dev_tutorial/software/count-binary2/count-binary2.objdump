
count-binary2.elf:     file format elf32-littlenios2
count-binary2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002f6c memsz 0x00002f6c flags r-x
    LOAD off    0x00003f8c vaddr 0x00002f8c paddr 0x0000326c align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x0000454c vaddr 0x0000354c paddr 0x0000354c align 2**12
         filesz 0x00000000 memsz 0x000001b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002cc8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  00002e7c  00002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00002f8c  0000326c  00003f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b8  0000354c  0000354c  0000454c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000426c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000658  00000000  00000000  00004298  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000937  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c33b  00000000  00000000  00005227  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d80  00000000  00000000  00011562  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007db3  00000000  00000000  000142e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b38  00000000  00000000  0001c098  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ef5  00000000  00000000  0001cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001bd6  00000000  00000000  0001dac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0001f69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  0001f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000216fc  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000216ff  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021702  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021703  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00021704  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00021708  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002170c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00021710  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00021719  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00021722  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0002172b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  0002173d  2**0
                  CONTENTS, READONLY
 29 .jdi          000055f2  00000000  00000000  00021760  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00045535  00000000  00000000  00026d52  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00002e7c l    d  .rodata	00000000 .rodata
00002f8c l    d  .rwdata	00000000 .rwdata
0000354c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
000001f0 l     F .text	00000020 lcd_init
00000210 l     F .text	00000054 initial_message
00000264 l     F .text	0000002c count_led
0000354c l     O .bss	00000001 count
00000290 l     F .text	0000001c count_sevenseg
000002ac l     F .text	00000028 count_lcd
000002d4 l     F .text	0000004c count_all
00000320 l     F .text	00000160 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000588 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000854 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002f8c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00001264 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00001490 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000306c l     O .rwdata	0000002c jtag_uart
0000158c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000181c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001b78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001bf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001cd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000020f8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002248 l     F .text	000000f8 alt_file_locked
000024cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00002c58 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00002e18 l     F .text	00000040 alt_sim_halt
0000076c g     F .text	0000001c putchar
000012d0 g     F .text	0000006c alt_main
00000790 g     F .text	00000090 _puts_r
00003578 g     O .bss	00000100 alt_irq
0000326c g       *ABS*	00000000 __flash_rwdata_start
000006d4 g     F .text	00000054 printf
00100000 g       *ABS*	00000000 __alt_mem_sram
00003568 g     O .bss	00000004 altera_avalon_timer_ts_freq
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00003550 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003554 g     O .bss	00000004 errno
0000355c g     O .bss	00000004 alt_argv
0000b240 g       *ABS*	00000000 _gp
0000133c g     F .text	00000030 usleep
000030c0 g     O .rwdata	00000180 alt_fd_list
00000788 g     F .text	00000008 _putchar_r
00002768 g     F .text	00000094 alt_find_dev
000021d0 g     F .text	00000078 alt_io_redirect
00002e7c g       *ABS*	00000000 __DTOR_END__
00000820 g     F .text	00000014 puts
00001674 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000728 g     F .text	00000044 _printf_r
000006c4 g     F .text	00000008 __udivsi3
000029ec g     F .text	00000090 alt_icache_flush
00003258 g     O .rwdata	00000004 alt_max_fd
00003244 g     O .rwdata	00000004 _global_impure_ptr
00003704 g       *ABS*	00000000 __bss_end
00002000 g     F .text	000000f8 alt_iic_isr_register
0000263c g     F .text	0000010c alt_tick
00001fb8 g     F .text	00000048 alt_ic_irq_enabled
000025a4 g     F .text	00000098 alt_alarm_stop
0000356c g     O .bss	00000004 alt_irq_active
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000ec g     F .exceptions	000000c8 alt_irq_handler
00003098 g     O .rwdata	00000028 alt_dev_null
00001bd8 g     F .text	0000001c alt_dcache_flush_all
0000326c g       *ABS*	00000000 __ram_rwdata_end
00003250 g     O .rwdata	00000008 alt_dev_list
0000136c g     F .text	00000124 write
000010c0 g     F .text	00000074 _putc_r
00002f8c g       *ABS*	00000000 __ram_rodata_end
000006cc g     F .text	00000008 __umodsi3
00003704 g       *ABS*	00000000 end
00002e78 g       *ABS*	00000000 __CTOR_LIST__
00005000 g       *ABS*	00000000 __alt_stack_pointer
0000188c g     F .text	00000090 alt_avalon_timer_sc_init
00001778 g     F .text	000000a4 altera_avalon_jtag_uart_write
000008d4 g     F .text	0000069c ___vfprintf_internal_r
00002c5c g     F .text	000001bc __call_exitprocs
000001b4 g     F .text	0000003c _start
00003570 g     O .bss	00000004 _alt_tick_rate
00003574 g     O .bss	00000004 _alt_nticks
00001524 g     F .text	00000068 alt_sys_init
00002aec g     F .text	0000016c __register_exitproc
000011ac g     F .text	00000038 __mulsi3
00002f8c g       *ABS*	00000000 __ram_rwdata_start
00002e7c g       *ABS*	00000000 __ram_rodata_start
000015c4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000291c g     F .text	000000d0 alt_get_fd
0000191c g     F .text	0000015c alt_busy_sleep
00002ab0 g     F .text	0000003c memcmp
00003704 g       *ABS*	00000000 __alt_stack_base
000027fc g     F .text	00000120 alt_find_file
00001c20 g     F .text	000000b4 alt_dev_llist_insert
00000f94 g     F .text	000000bc __sfvwrite_small_dev
0000354c g       *ABS*	00000000 __bss_start
00000480 g     F .text	00000108 main
00003560 g     O .bss	00000004 alt_envp
0000161c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00003678 g     O .bss	0000008c _atexit0
0000325c g     O .rwdata	00000004 alt_errno
00001050 g     F .text	00000070 putc
00000604 g     F .text	00000060 __divsi3
00002e7c g       *ABS*	00000000 __CTOR_END__
00002e7c g       *ABS*	00000000 __flash_rodata_start
00002e7c g       *ABS*	00000000 __DTOR_LIST__
000014f0 g     F .text	00000034 alt_irq_init
0000252c g     F .text	00000078 alt_release_fd
00002a7c g     F .text	00000014 atexit
00001134 g     F .text	00000078 _write_r
00003240 g     O .rwdata	00000004 _impure_ptr
00003558 g     O .bss	00000004 alt_argc
00003564 g     O .bss	00000004 altera_avalon_timer_ts_base
00001d98 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00003248 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001e2c g     F .text	00000050 alt_ic_isr_register
0000326c g       *ABS*	00000000 _edata
00003704 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00001f18 g     F .text	000000a0 alt_ic_irq_disable
00002748 g     F .text	00000020 altera_nios2_qsys_irq_init
00002a90 g     F .text	00000020 exit
00000664 g     F .text	00000060 __modsi3
00005000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
00002e58 g     F .text	00000020 _exit
00000834 g     F .text	00000020 strlen
00002340 g     F .text	0000018c open
00001dfc g     F .text	00000030 alt_icache_flush_all
00003260 g     O .rwdata	00000004 alt_priority_mask
00001e7c g     F .text	0000009c alt_ic_irq_enable
00000f70 g     F .text	00000024 __vfprintf_internal
00003264 g     O .rwdata	00000008 alt_alarm_list
00001d34 g     F .text	00000064 _do_ctors
00001a78 g     F .text	00000100 close
000011e4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18cd5e04 	addi	r3,r3,13688
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18cd5e04 	addi	r3,r3,13688
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6ac9014 	ori	gp,gp,45632
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	108d5314 	ori	r2,r2,13644

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18cdc114 	ori	r3,r3,14084

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	00011e40 	call	11e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	00012d00 	call	12d0 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	df000115 	stw	fp,4(sp)
     1f8:	df000104 	addi	fp,sp,4
     1fc:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
     200:	e037883a 	mov	sp,fp
     204:	df000017 	ldw	fp,0(sp)
     208:	dec00104 	addi	sp,sp,4
     20c:	f800283a 	ret

00000210 <initial_message>:

static void initial_message()
{
     210:	defffe04 	addi	sp,sp,-8
     214:	dfc00115 	stw	ra,4(sp)
     218:	df000015 	stw	fp,0(sp)
     21c:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
     220:	01000034 	movhi	r4,0
     224:	210b9f04 	addi	r4,r4,11900
     228:	00008200 	call	820 <puts>
    printf("* Hello from Nios II!    *\n");
     22c:	01000034 	movhi	r4,0
     230:	210ba704 	addi	r4,r4,11932
     234:	00008200 	call	820 <puts>
    printf("* Counting from 00 to ff *\n");
     238:	01000034 	movhi	r4,0
     23c:	210bae04 	addi	r4,r4,11960
     240:	00008200 	call	820 <puts>
    printf("**************************\n");
     244:	01000034 	movhi	r4,0
     248:	210bb504 	addi	r4,r4,11988
     24c:	00008200 	call	820 <puts>
}
     250:	e037883a 	mov	sp,fp
     254:	dfc00117 	ldw	ra,4(sp)
     258:	df000017 	ldw	fp,0(sp)
     25c:	dec00204 	addi	sp,sp,8
     260:	f800283a 	ret

00000264 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
     264:	deffff04 	addi	sp,sp,-4
     268:	df000015 	stw	fp,0(sp)
     26c:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
     270:	d0a0c303 	ldbu	r2,-31988(gp)
     274:	10c03fcc 	andi	r3,r2,255
     278:	00a41814 	movui	r2,36960
     27c:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
     280:	e037883a 	mov	sp,fp
     284:	df000017 	ldw	fp,0(sp)
     288:	dec00104 	addi	sp,sp,4
     28c:	f800283a 	ret

00000290 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
     290:	deffff04 	addi	sp,sp,-4
     294:	df000015 	stw	fp,0(sp)
     298:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
     29c:	e037883a 	mov	sp,fp
     2a0:	df000017 	ldw	fp,0(sp)
     2a4:	dec00104 	addi	sp,sp,4
     2a8:	f800283a 	ret

000002ac <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
     2ac:	defffd04 	addi	sp,sp,-12
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	e13fff15 	stw	r4,-4(fp)
    FILE *lcd = (FILE*) arg;
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
     2c4:	e037883a 	mov	sp,fp
     2c8:	df000017 	ldw	fp,0(sp)
     2cc:	dec00104 	addi	sp,sp,4
     2d0:	f800283a 	ret

000002d4 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
     2d4:	defffd04 	addi	sp,sp,-12
     2d8:	dfc00215 	stw	ra,8(sp)
     2dc:	df000115 	stw	fp,4(sp)
     2e0:	df000104 	addi	fp,sp,4
     2e4:	e13fff15 	stw	r4,-4(fp)
    count_led();
     2e8:	00002640 	call	264 <count_led>
    count_sevenseg();
     2ec:	00002900 	call	290 <count_sevenseg>
    count_lcd( arg );
     2f0:	e13fff17 	ldw	r4,-4(fp)
     2f4:	00002ac0 	call	2ac <count_lcd>
    printf("%02x,  ", count);
     2f8:	d0a0c303 	ldbu	r2,-31988(gp)
     2fc:	11403fcc 	andi	r5,r2,255
     300:	01000034 	movhi	r4,0
     304:	210bbc04 	addi	r4,r4,12016
     308:	00006d40 	call	6d4 <printf>
}
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
     320:	defffa04 	addi	sp,sp,-24
     324:	dfc00515 	stw	ra,20(sp)
     328:	df000415 	stw	fp,16(sp)
     32c:	df000404 	addi	fp,sp,16
     330:	e17ffd15 	stw	r5,-12(fp)
     334:	e13ffc05 	stb	r4,-16(fp)
    /* Button press actions while counting. */
    if (type == 'c')
     338:	e0bffc03 	ldbu	r2,-16(fp)
     33c:	108018d8 	cmpnei	r2,r2,99
     340:	1000201e 	bne	r2,zero,3c4 <handle_button_press+0xa4>
    {
        switch (edge_capture) 
     344:	d0a0c417 	ldw	r2,-31984(gp)
     348:	e0bfff15 	stw	r2,-4(fp)
     34c:	e0ffff17 	ldw	r3,-4(fp)
     350:	188000a0 	cmpeqi	r2,r3,2
     354:	1000101e 	bne	r2,zero,398 <handle_button_press+0x78>
     358:	e0ffff17 	ldw	r3,-4(fp)
     35c:	188000c8 	cmpgei	r2,r3,3
     360:	1000041e 	bne	r2,zero,374 <handle_button_press+0x54>
     364:	e0ffff17 	ldw	r3,-4(fp)
     368:	18800060 	cmpeqi	r2,r3,1
     36c:	1000081e 	bne	r2,zero,390 <handle_button_press+0x70>
     370:	00001106 	br	3b8 <handle_button_press+0x98>
     374:	e0ffff17 	ldw	r3,-4(fp)
     378:	18800120 	cmpeqi	r2,r3,4
     37c:	1000081e 	bne	r2,zero,3a0 <handle_button_press+0x80>
     380:	e0ffff17 	ldw	r3,-4(fp)
     384:	18800220 	cmpeqi	r2,r3,8
     388:	1000081e 	bne	r2,zero,3ac <handle_button_press+0x8c>
     38c:	00000a06 	br	3b8 <handle_button_press+0x98>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
     390:	00002640 	call	264 <count_led>
            break;
     394:	00003506 	br	46c <handle_button_press+0x14c>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
     398:	00002900 	call	290 <count_sevenseg>
            break;
     39c:	00003306 	br	46c <handle_button_press+0x14c>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
     3a0:	e13ffd17 	ldw	r4,-12(fp)
     3a4:	00002ac0 	call	2ac <count_lcd>
            break;
     3a8:	00003006 	br	46c <handle_button_press+0x14c>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
     3ac:	e13ffd17 	ldw	r4,-12(fp)
     3b0:	00002d40 	call	2d4 <count_all>
            break;
     3b4:	00002d06 	br	46c <handle_button_press+0x14c>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
     3b8:	e13ffd17 	ldw	r4,-12(fp)
     3bc:	00002d40 	call	2d4 <count_all>
     3c0:	00002a06 	br	46c <handle_button_press+0x14c>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
     3c4:	d0a0c417 	ldw	r2,-31984(gp)
     3c8:	e0bffe15 	stw	r2,-8(fp)
     3cc:	e0fffe17 	ldw	r3,-8(fp)
     3d0:	188000a0 	cmpeqi	r2,r3,2
     3d4:	1000131e 	bne	r2,zero,424 <handle_button_press+0x104>
     3d8:	e0fffe17 	ldw	r3,-8(fp)
     3dc:	188000c8 	cmpgei	r2,r3,3
     3e0:	1000041e 	bne	r2,zero,3f4 <handle_button_press+0xd4>
     3e4:	e0fffe17 	ldw	r3,-8(fp)
     3e8:	18800060 	cmpeqi	r2,r3,1
     3ec:	1000081e 	bne	r2,zero,410 <handle_button_press+0xf0>
     3f0:	00001b06 	br	460 <handle_button_press+0x140>
     3f4:	e0fffe17 	ldw	r3,-8(fp)
     3f8:	18800120 	cmpeqi	r2,r3,4
     3fc:	10000e1e 	bne	r2,zero,438 <handle_button_press+0x118>
     400:	e0fffe17 	ldw	r3,-8(fp)
     404:	18800220 	cmpeqi	r2,r3,8
     408:	1000101e 	bne	r2,zero,44c <handle_button_press+0x12c>
     40c:	00001406 	br	460 <handle_button_press+0x140>
        {
        case 0x1:
            printf( "Button 1\n");
     410:	01000034 	movhi	r4,0
     414:	210bbe04 	addi	r4,r4,12024
     418:	00008200 	call	820 <puts>
            edge_capture = 0;
     41c:	d020c415 	stw	zero,-31984(gp)
            break;
     420:	00001206 	br	46c <handle_button_press+0x14c>
        case 0x2:
            printf( "Button 2\n");
     424:	01000034 	movhi	r4,0
     428:	210bc104 	addi	r4,r4,12036
     42c:	00008200 	call	820 <puts>
            edge_capture = 0;
     430:	d020c415 	stw	zero,-31984(gp)
            break;
     434:	00000d06 	br	46c <handle_button_press+0x14c>
        case 0x4:
            printf( "Button 3\n");
     438:	01000034 	movhi	r4,0
     43c:	210bc404 	addi	r4,r4,12048
     440:	00008200 	call	820 <puts>
            edge_capture = 0;
     444:	d020c415 	stw	zero,-31984(gp)
            break;
     448:	00000806 	br	46c <handle_button_press+0x14c>
        case 0x8:
            printf( "Button 4\n");
     44c:	01000034 	movhi	r4,0
     450:	210bc704 	addi	r4,r4,12060
     454:	00008200 	call	820 <puts>
            edge_capture = 0;
     458:	d020c415 	stw	zero,-31984(gp)
            break;
     45c:	00000306 	br	46c <handle_button_press+0x14c>
        default:
            printf( "Button press UNKNOWN!!\n");
     460:	01000034 	movhi	r4,0
     464:	210bca04 	addi	r4,r4,12072
     468:	00008200 	call	820 <puts>
        }
    }
}
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
     480:	defffb04 	addi	sp,sp,-20
     484:	dfc00415 	stw	ra,16(sp)
     488:	df000315 	stw	fp,12(sp)
     48c:	df000304 	addi	fp,sp,12
    int i;
    int wait_time;
    FILE * lcd;

    count = 0;
     490:	d020c305 	stb	zero,-31988(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
     494:	e03ffd15 	stw	zero,-12(fp)
    if(lcd != NULL) {lcd_init( lcd );}
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	1005003a 	cmpeq	r2,r2,zero
     4a0:	1000021e 	bne	r2,zero,4ac <main+0x2c>
     4a4:	e13ffd17 	ldw	r4,-12(fp)
     4a8:	00001f00 	call	1f0 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
     4ac:	00002100 	call	210 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
     4b0:	010000b4 	movhi	r4,2
     4b4:	2121a804 	addi	r4,r4,-31072
     4b8:	000133c0 	call	133c <usleep>
        if (edge_capture != 0)
     4bc:	d0a0c417 	ldw	r2,-31984(gp)
     4c0:	1005003a 	cmpeq	r2,r2,zero
     4c4:	1000041e 	bne	r2,zero,4d8 <main+0x58>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
     4c8:	010018c4 	movi	r4,99
     4cc:	e17ffd17 	ldw	r5,-12(fp)
     4d0:	00003200 	call	320 <handle_button_press>
     4d4:	00000206 	br	4e0 <main+0x60>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
     4d8:	e13ffd17 	ldw	r4,-12(fp)
     4dc:	00002d40 	call	2d4 <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
     4e0:	d0a0c303 	ldbu	r2,-31988(gp)
     4e4:	10803fcc 	andi	r2,r2,255
     4e8:	10803fd8 	cmpnei	r2,r2,255
     4ec:	1000221e 	bne	r2,zero,578 <main+0xf8>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
     4f0:	01000034 	movhi	r4,0
     4f4:	210bd004 	addi	r4,r4,12096
     4f8:	00006d40 	call	6d4 <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
     4fc:	d020c415 	stw	zero,-31984(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
     500:	e03ffe15 	stw	zero,-8(fp)
            for (i = 0; i<70; ++i)
     504:	e03fff15 	stw	zero,-4(fp)
     508:	00001506 	br	560 <main+0xe0>
            {
                printf(".");
     50c:	01000b84 	movi	r4,46
     510:	000076c0 	call	76c <putchar>
                wait_time = i/10;
     514:	e13fff17 	ldw	r4,-4(fp)
     518:	01400284 	movi	r5,10
     51c:	00006040 	call	604 <__divsi3>
     520:	e0bffe15 	stw	r2,-8(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
     524:	d0a0c417 	ldw	r2,-31984(gp)
     528:	1005003a 	cmpeq	r2,r2,zero
     52c:	1000061e 	bne	r2,zero,548 <main+0xc8>
                {
                    printf( "\nYou pushed:  " );
     530:	01000034 	movhi	r4,0
     534:	210bd304 	addi	r4,r4,12108
     538:	00006d40 	call	6d4 <printf>
                    handle_button_press('w', lcd);
     53c:	01001dc4 	movi	r4,119
     540:	e17ffd17 	ldw	r5,-12(fp)
     544:	00003200 	call	320 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
     548:	010000b4 	movhi	r4,2
     54c:	2121a804 	addi	r4,r4,-31072
     550:	000133c0 	call	133c <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
     554:	e0bfff17 	ldw	r2,-4(fp)
     558:	10800044 	addi	r2,r2,1
     55c:	e0bfff15 	stw	r2,-4(fp)
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10801190 	cmplti	r2,r2,70
     568:	103fe81e 	bne	r2,zero,50c <main+0x8c>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
     56c:	00002100 	call	210 <initial_message>
            lcd_init( lcd );
     570:	e13ffd17 	ldw	r4,-12(fp)
     574:	00001f00 	call	1f0 <lcd_init>
        }
        count++;
     578:	d0a0c303 	ldbu	r2,-31988(gp)
     57c:	10800044 	addi	r2,r2,1
     580:	d0a0c305 	stb	r2,-31988(gp)
    }
     584:	003fca06 	br	4b0 <main+0x30>

00000588 <udivmodsi4>:
     588:	29001b2e 	bgeu	r5,r4,5f8 <udivmodsi4+0x70>
     58c:	28001a16 	blt	r5,zero,5f8 <udivmodsi4+0x70>
     590:	00800044 	movi	r2,1
     594:	0007883a 	mov	r3,zero
     598:	01c007c4 	movi	r7,31
     59c:	00000306 	br	5ac <udivmodsi4+0x24>
     5a0:	19c01326 	beq	r3,r7,5f0 <udivmodsi4+0x68>
     5a4:	18c00044 	addi	r3,r3,1
     5a8:	28000416 	blt	r5,zero,5bc <udivmodsi4+0x34>
     5ac:	294b883a 	add	r5,r5,r5
     5b0:	1085883a 	add	r2,r2,r2
     5b4:	293ffa36 	bltu	r5,r4,5a0 <udivmodsi4+0x18>
     5b8:	10000d26 	beq	r2,zero,5f0 <udivmodsi4+0x68>
     5bc:	0007883a 	mov	r3,zero
     5c0:	21400236 	bltu	r4,r5,5cc <udivmodsi4+0x44>
     5c4:	2149c83a 	sub	r4,r4,r5
     5c8:	1886b03a 	or	r3,r3,r2
     5cc:	1004d07a 	srli	r2,r2,1
     5d0:	280ad07a 	srli	r5,r5,1
     5d4:	103ffa1e 	bne	r2,zero,5c0 <udivmodsi4+0x38>
     5d8:	30000226 	beq	r6,zero,5e4 <udivmodsi4+0x5c>
     5dc:	2005883a 	mov	r2,r4
     5e0:	f800283a 	ret
     5e4:	1809883a 	mov	r4,r3
     5e8:	2005883a 	mov	r2,r4
     5ec:	f800283a 	ret
     5f0:	0007883a 	mov	r3,zero
     5f4:	003ff806 	br	5d8 <udivmodsi4+0x50>
     5f8:	00800044 	movi	r2,1
     5fc:	0007883a 	mov	r3,zero
     600:	003fef06 	br	5c0 <udivmodsi4+0x38>

00000604 <__divsi3>:
     604:	defffe04 	addi	sp,sp,-8
     608:	dc000015 	stw	r16,0(sp)
     60c:	dfc00115 	stw	ra,4(sp)
     610:	0021883a 	mov	r16,zero
     614:	20000c16 	blt	r4,zero,648 <__divsi3+0x44>
     618:	000d883a 	mov	r6,zero
     61c:	28000e16 	blt	r5,zero,658 <__divsi3+0x54>
     620:	00005880 	call	588 <udivmodsi4>
     624:	1007883a 	mov	r3,r2
     628:	8005003a 	cmpeq	r2,r16,zero
     62c:	1000011e 	bne	r2,zero,634 <__divsi3+0x30>
     630:	00c7c83a 	sub	r3,zero,r3
     634:	1805883a 	mov	r2,r3
     638:	dfc00117 	ldw	ra,4(sp)
     63c:	dc000017 	ldw	r16,0(sp)
     640:	dec00204 	addi	sp,sp,8
     644:	f800283a 	ret
     648:	0109c83a 	sub	r4,zero,r4
     64c:	04000044 	movi	r16,1
     650:	000d883a 	mov	r6,zero
     654:	283ff20e 	bge	r5,zero,620 <__divsi3+0x1c>
     658:	014bc83a 	sub	r5,zero,r5
     65c:	8021003a 	cmpeq	r16,r16,zero
     660:	003fef06 	br	620 <__divsi3+0x1c>

00000664 <__modsi3>:
     664:	deffff04 	addi	sp,sp,-4
     668:	dfc00015 	stw	ra,0(sp)
     66c:	01800044 	movi	r6,1
     670:	2807883a 	mov	r3,r5
     674:	20000416 	blt	r4,zero,688 <__modsi3+0x24>
     678:	28000c16 	blt	r5,zero,6ac <__modsi3+0x48>
     67c:	dfc00017 	ldw	ra,0(sp)
     680:	dec00104 	addi	sp,sp,4
     684:	00005881 	jmpi	588 <udivmodsi4>
     688:	0109c83a 	sub	r4,zero,r4
     68c:	28000b16 	blt	r5,zero,6bc <__modsi3+0x58>
     690:	180b883a 	mov	r5,r3
     694:	01800044 	movi	r6,1
     698:	00005880 	call	588 <udivmodsi4>
     69c:	0085c83a 	sub	r2,zero,r2
     6a0:	dfc00017 	ldw	ra,0(sp)
     6a4:	dec00104 	addi	sp,sp,4
     6a8:	f800283a 	ret
     6ac:	014bc83a 	sub	r5,zero,r5
     6b0:	dfc00017 	ldw	ra,0(sp)
     6b4:	dec00104 	addi	sp,sp,4
     6b8:	00005881 	jmpi	588 <udivmodsi4>
     6bc:	0147c83a 	sub	r3,zero,r5
     6c0:	003ff306 	br	690 <__modsi3+0x2c>

000006c4 <__udivsi3>:
     6c4:	000d883a 	mov	r6,zero
     6c8:	00005881 	jmpi	588 <udivmodsi4>

000006cc <__umodsi3>:
     6cc:	01800044 	movi	r6,1
     6d0:	00005881 	jmpi	588 <udivmodsi4>

000006d4 <printf>:
     6d4:	defffb04 	addi	sp,sp,-20
     6d8:	dfc00115 	stw	ra,4(sp)
     6dc:	d9400215 	stw	r5,8(sp)
     6e0:	d9800315 	stw	r6,12(sp)
     6e4:	d9c00415 	stw	r7,16(sp)
     6e8:	00800034 	movhi	r2,0
     6ec:	108c9004 	addi	r2,r2,12864
     6f0:	11400017 	ldw	r5,0(r2)
     6f4:	d8800204 	addi	r2,sp,8
     6f8:	d8800015 	stw	r2,0(sp)
     6fc:	29c00217 	ldw	r7,8(r5)
     700:	100d883a 	mov	r6,r2
     704:	00800034 	movhi	r2,0
     708:	1083e504 	addi	r2,r2,3988
     70c:	200b883a 	mov	r5,r4
     710:	38800115 	stw	r2,4(r7)
     714:	3809883a 	mov	r4,r7
     718:	0000f700 	call	f70 <__vfprintf_internal>
     71c:	dfc00117 	ldw	ra,4(sp)
     720:	dec00504 	addi	sp,sp,20
     724:	f800283a 	ret

00000728 <_printf_r>:
     728:	defffc04 	addi	sp,sp,-16
     72c:	dfc00115 	stw	ra,4(sp)
     730:	d9800215 	stw	r6,8(sp)
     734:	d9c00315 	stw	r7,12(sp)
     738:	22000217 	ldw	r8,8(r4)
     73c:	d8800204 	addi	r2,sp,8
     740:	d8800015 	stw	r2,0(sp)
     744:	100f883a 	mov	r7,r2
     748:	00800034 	movhi	r2,0
     74c:	1083e504 	addi	r2,r2,3988
     750:	280d883a 	mov	r6,r5
     754:	40800115 	stw	r2,4(r8)
     758:	400b883a 	mov	r5,r8
     75c:	00008d40 	call	8d4 <___vfprintf_internal_r>
     760:	dfc00117 	ldw	ra,4(sp)
     764:	dec00404 	addi	sp,sp,16
     768:	f800283a 	ret

0000076c <putchar>:
     76c:	00800034 	movhi	r2,0
     770:	108c9004 	addi	r2,r2,12864
     774:	11800017 	ldw	r6,0(r2)
     778:	200b883a 	mov	r5,r4
     77c:	3009883a 	mov	r4,r6
     780:	31800217 	ldw	r6,8(r6)
     784:	00010c01 	jmpi	10c0 <_putc_r>

00000788 <_putchar_r>:
     788:	21800217 	ldw	r6,8(r4)
     78c:	00010c01 	jmpi	10c0 <_putc_r>

00000790 <_puts_r>:
     790:	defffd04 	addi	sp,sp,-12
     794:	dc000015 	stw	r16,0(sp)
     798:	2021883a 	mov	r16,r4
     79c:	2809883a 	mov	r4,r5
     7a0:	dfc00215 	stw	ra,8(sp)
     7a4:	dc400115 	stw	r17,4(sp)
     7a8:	2823883a 	mov	r17,r5
     7ac:	00008340 	call	834 <strlen>
     7b0:	80c00217 	ldw	r3,8(r16)
     7b4:	02000034 	movhi	r8,0
     7b8:	4203e504 	addi	r8,r8,3988
     7bc:	880d883a 	mov	r6,r17
     7c0:	100f883a 	mov	r7,r2
     7c4:	8009883a 	mov	r4,r16
     7c8:	180b883a 	mov	r5,r3
     7cc:	1a000115 	stw	r8,4(r3)
     7d0:	403ee83a 	callr	r8
     7d4:	047fffc4 	movi	r17,-1
     7d8:	8009883a 	mov	r4,r16
     7dc:	01800034 	movhi	r6,0
     7e0:	318bd704 	addi	r6,r6,12124
     7e4:	01c00044 	movi	r7,1
     7e8:	1440071e 	bne	r2,r17,808 <_puts_r+0x78>
     7ec:	00ffffc4 	movi	r3,-1
     7f0:	1805883a 	mov	r2,r3
     7f4:	dfc00217 	ldw	ra,8(sp)
     7f8:	dc400117 	ldw	r17,4(sp)
     7fc:	dc000017 	ldw	r16,0(sp)
     800:	dec00304 	addi	sp,sp,12
     804:	f800283a 	ret
     808:	81400217 	ldw	r5,8(r16)
     80c:	28c00117 	ldw	r3,4(r5)
     810:	183ee83a 	callr	r3
     814:	0007883a 	mov	r3,zero
     818:	147ff51e 	bne	r2,r17,7f0 <_puts_r+0x60>
     81c:	003ff306 	br	7ec <_puts_r+0x5c>

00000820 <puts>:
     820:	00800034 	movhi	r2,0
     824:	108c9004 	addi	r2,r2,12864
     828:	200b883a 	mov	r5,r4
     82c:	11000017 	ldw	r4,0(r2)
     830:	00007901 	jmpi	790 <_puts_r>

00000834 <strlen>:
     834:	20800007 	ldb	r2,0(r4)
     838:	10000526 	beq	r2,zero,850 <strlen+0x1c>
     83c:	2007883a 	mov	r3,r4
     840:	18c00044 	addi	r3,r3,1
     844:	18800007 	ldb	r2,0(r3)
     848:	103ffd1e 	bne	r2,zero,840 <strlen+0xc>
     84c:	1905c83a 	sub	r2,r3,r4
     850:	f800283a 	ret

00000854 <print_repeat>:
     854:	defffb04 	addi	sp,sp,-20
     858:	dc800315 	stw	r18,12(sp)
     85c:	dc400215 	stw	r17,8(sp)
     860:	dc000115 	stw	r16,4(sp)
     864:	dfc00415 	stw	ra,16(sp)
     868:	2025883a 	mov	r18,r4
     86c:	2823883a 	mov	r17,r5
     870:	3821883a 	mov	r16,r7
     874:	d9800005 	stb	r6,0(sp)
     878:	9009883a 	mov	r4,r18
     87c:	880b883a 	mov	r5,r17
     880:	d80d883a 	mov	r6,sp
     884:	01c00044 	movi	r7,1
     888:	04000b0e 	bge	zero,r16,8b8 <print_repeat+0x64>
     88c:	88c00117 	ldw	r3,4(r17)
     890:	843fffc4 	addi	r16,r16,-1
     894:	183ee83a 	callr	r3
     898:	103ff726 	beq	r2,zero,878 <print_repeat+0x24>
     89c:	00bfffc4 	movi	r2,-1
     8a0:	dfc00417 	ldw	ra,16(sp)
     8a4:	dc800317 	ldw	r18,12(sp)
     8a8:	dc400217 	ldw	r17,8(sp)
     8ac:	dc000117 	ldw	r16,4(sp)
     8b0:	dec00504 	addi	sp,sp,20
     8b4:	f800283a 	ret
     8b8:	0005883a 	mov	r2,zero
     8bc:	dfc00417 	ldw	ra,16(sp)
     8c0:	dc800317 	ldw	r18,12(sp)
     8c4:	dc400217 	ldw	r17,8(sp)
     8c8:	dc000117 	ldw	r16,4(sp)
     8cc:	dec00504 	addi	sp,sp,20
     8d0:	f800283a 	ret

000008d4 <___vfprintf_internal_r>:
     8d4:	deffe304 	addi	sp,sp,-116
     8d8:	df001b15 	stw	fp,108(sp)
     8dc:	ddc01a15 	stw	r23,104(sp)
     8e0:	dd001715 	stw	r20,92(sp)
     8e4:	dc801515 	stw	r18,84(sp)
     8e8:	dc001315 	stw	r16,76(sp)
     8ec:	dfc01c15 	stw	ra,112(sp)
     8f0:	dd801915 	stw	r22,100(sp)
     8f4:	dd401815 	stw	r21,96(sp)
     8f8:	dcc01615 	stw	r19,88(sp)
     8fc:	dc401415 	stw	r17,80(sp)
     900:	d9001015 	stw	r4,64(sp)
     904:	2829883a 	mov	r20,r5
     908:	d9c01115 	stw	r7,68(sp)
     90c:	3025883a 	mov	r18,r6
     910:	0021883a 	mov	r16,zero
     914:	d8000f15 	stw	zero,60(sp)
     918:	d8000e15 	stw	zero,56(sp)
     91c:	0039883a 	mov	fp,zero
     920:	d8000915 	stw	zero,36(sp)
     924:	d8000d15 	stw	zero,52(sp)
     928:	d8000c15 	stw	zero,48(sp)
     92c:	d8000b15 	stw	zero,44(sp)
     930:	002f883a 	mov	r23,zero
     934:	91400003 	ldbu	r5,0(r18)
     938:	01c00044 	movi	r7,1
     93c:	94800044 	addi	r18,r18,1
     940:	29003fcc 	andi	r4,r5,255
     944:	2100201c 	xori	r4,r4,128
     948:	213fe004 	addi	r4,r4,-128
     94c:	20001526 	beq	r4,zero,9a4 <___vfprintf_internal_r+0xd0>
     950:	81c03526 	beq	r16,r7,a28 <___vfprintf_internal_r+0x154>
     954:	3c002016 	blt	r7,r16,9d8 <___vfprintf_internal_r+0x104>
     958:	803ff61e 	bne	r16,zero,934 <___vfprintf_internal_r+0x60>
     95c:	00800944 	movi	r2,37
     960:	2081501e 	bne	r4,r2,ea4 <___vfprintf_internal_r+0x5d0>
     964:	073fffc4 	movi	fp,-1
     968:	00800284 	movi	r2,10
     96c:	d9c00c15 	stw	r7,48(sp)
     970:	d8000f15 	stw	zero,60(sp)
     974:	d8000e15 	stw	zero,56(sp)
     978:	df000915 	stw	fp,36(sp)
     97c:	d8800d15 	stw	r2,52(sp)
     980:	d8000b15 	stw	zero,44(sp)
     984:	91400003 	ldbu	r5,0(r18)
     988:	3821883a 	mov	r16,r7
     98c:	94800044 	addi	r18,r18,1
     990:	29003fcc 	andi	r4,r5,255
     994:	2100201c 	xori	r4,r4,128
     998:	213fe004 	addi	r4,r4,-128
     99c:	01c00044 	movi	r7,1
     9a0:	203feb1e 	bne	r4,zero,950 <___vfprintf_internal_r+0x7c>
     9a4:	b805883a 	mov	r2,r23
     9a8:	dfc01c17 	ldw	ra,112(sp)
     9ac:	df001b17 	ldw	fp,108(sp)
     9b0:	ddc01a17 	ldw	r23,104(sp)
     9b4:	dd801917 	ldw	r22,100(sp)
     9b8:	dd401817 	ldw	r21,96(sp)
     9bc:	dd001717 	ldw	r20,92(sp)
     9c0:	dcc01617 	ldw	r19,88(sp)
     9c4:	dc801517 	ldw	r18,84(sp)
     9c8:	dc401417 	ldw	r17,80(sp)
     9cc:	dc001317 	ldw	r16,76(sp)
     9d0:	dec01d04 	addi	sp,sp,116
     9d4:	f800283a 	ret
     9d8:	00800084 	movi	r2,2
     9dc:	80801726 	beq	r16,r2,a3c <___vfprintf_internal_r+0x168>
     9e0:	008000c4 	movi	r2,3
     9e4:	80bfd31e 	bne	r16,r2,934 <___vfprintf_internal_r+0x60>
     9e8:	2c7ff404 	addi	r17,r5,-48
     9ec:	88c03fcc 	andi	r3,r17,255
     9f0:	00800244 	movi	r2,9
     9f4:	10c02136 	bltu	r2,r3,a7c <___vfprintf_internal_r+0x1a8>
     9f8:	d8c00917 	ldw	r3,36(sp)
     9fc:	18012716 	blt	r3,zero,e9c <___vfprintf_internal_r+0x5c8>
     a00:	d9000917 	ldw	r4,36(sp)
     a04:	01400284 	movi	r5,10
     a08:	00011ac0 	call	11ac <__mulsi3>
     a0c:	1007883a 	mov	r3,r2
     a10:	88803fcc 	andi	r2,r17,255
     a14:	1080201c 	xori	r2,r2,128
     a18:	10bfe004 	addi	r2,r2,-128
     a1c:	1887883a 	add	r3,r3,r2
     a20:	d8c00915 	stw	r3,36(sp)
     a24:	003fc306 	br	934 <___vfprintf_internal_r+0x60>
     a28:	00800c04 	movi	r2,48
     a2c:	2080b326 	beq	r4,r2,cfc <___vfprintf_internal_r+0x428>
     a30:	00800944 	movi	r2,37
     a34:	20812726 	beq	r4,r2,ed4 <___vfprintf_internal_r+0x600>
     a38:	04000084 	movi	r16,2
     a3c:	2c7ff404 	addi	r17,r5,-48
     a40:	88c03fcc 	andi	r3,r17,255
     a44:	00800244 	movi	r2,9
     a48:	10c00a36 	bltu	r2,r3,a74 <___vfprintf_internal_r+0x1a0>
     a4c:	e000b416 	blt	fp,zero,d20 <___vfprintf_internal_r+0x44c>
     a50:	e009883a 	mov	r4,fp
     a54:	01400284 	movi	r5,10
     a58:	00011ac0 	call	11ac <__mulsi3>
     a5c:	1007883a 	mov	r3,r2
     a60:	88803fcc 	andi	r2,r17,255
     a64:	1080201c 	xori	r2,r2,128
     a68:	10bfe004 	addi	r2,r2,-128
     a6c:	18b9883a 	add	fp,r3,r2
     a70:	003fb006 	br	934 <___vfprintf_internal_r+0x60>
     a74:	00800b84 	movi	r2,46
     a78:	2080a326 	beq	r4,r2,d08 <___vfprintf_internal_r+0x434>
     a7c:	00801b04 	movi	r2,108
     a80:	2080a326 	beq	r4,r2,d10 <___vfprintf_internal_r+0x43c>
     a84:	d8c00917 	ldw	r3,36(sp)
     a88:	1800a716 	blt	r3,zero,d28 <___vfprintf_internal_r+0x454>
     a8c:	d8000f15 	stw	zero,60(sp)
     a90:	28bfea04 	addi	r2,r5,-88
     a94:	10803fcc 	andi	r2,r2,255
     a98:	00c00804 	movi	r3,32
     a9c:	18802836 	bltu	r3,r2,b40 <___vfprintf_internal_r+0x26c>
     aa0:	1085883a 	add	r2,r2,r2
     aa4:	1085883a 	add	r2,r2,r2
     aa8:	00c00034 	movhi	r3,0
     aac:	18c2af04 	addi	r3,r3,2748
     ab0:	10c5883a 	add	r2,r2,r3
     ab4:	11000017 	ldw	r4,0(r2)
     ab8:	2000683a 	jmp	r4
     abc:	00000b48 	cmpgei	zero,zero,45
     ac0:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ac4:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ac8:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     acc:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ad0:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ad4:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ad8:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     adc:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ae0:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ae4:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     ae8:	00000d74 	movhi	zero,53
     aec:	00000b5c 	xori	zero,zero,45
     af0:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     af4:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     af8:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     afc:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b00:	00000b5c 	xori	zero,zero,45
     b04:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b08:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b0c:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b10:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b14:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b18:	00000ddc 	xori	zero,zero,55
     b1c:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b20:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b24:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b28:	00000dec 	andhi	zero,zero,55
     b2c:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b30:	00000cc0 	call	cc <__flash_exceptions_start+0xac>
     b34:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b38:	00000b40 	call	b4 <__flash_exceptions_start+0x94>
     b3c:	00000cb8 	rdprs	zero,zero,50
     b40:	0021883a 	mov	r16,zero
     b44:	003f7b06 	br	934 <___vfprintf_internal_r+0x60>
     b48:	00c00404 	movi	r3,16
     b4c:	00800044 	movi	r2,1
     b50:	d8c00d15 	stw	r3,52(sp)
     b54:	d8000c15 	stw	zero,48(sp)
     b58:	d8800b15 	stw	r2,44(sp)
     b5c:	d8c00e17 	ldw	r3,56(sp)
     b60:	1805003a 	cmpeq	r2,r3,zero
     b64:	10005a1e 	bne	r2,zero,cd0 <___vfprintf_internal_r+0x3fc>
     b68:	d8800c17 	ldw	r2,48(sp)
     b6c:	1000781e 	bne	r2,zero,d50 <___vfprintf_internal_r+0x47c>
     b70:	d8801117 	ldw	r2,68(sp)
     b74:	d8000a15 	stw	zero,40(sp)
     b78:	14400017 	ldw	r17,0(r2)
     b7c:	11c00104 	addi	r7,r2,4
     b80:	d9c01115 	stw	r7,68(sp)
     b84:	88005a26 	beq	r17,zero,cf0 <___vfprintf_internal_r+0x41c>
     b88:	d8c00b17 	ldw	r3,44(sp)
     b8c:	dcc00044 	addi	r19,sp,1
     b90:	05800244 	movi	r22,9
     b94:	182b003a 	cmpeq	r21,r3,zero
     b98:	dcc01215 	stw	r19,72(sp)
     b9c:	00000506 	br	bb4 <___vfprintf_internal_r+0x2e0>
     ba0:	21000c04 	addi	r4,r4,48
     ba4:	99000005 	stb	r4,0(r19)
     ba8:	9cc00044 	addi	r19,r19,1
     bac:	80000f26 	beq	r16,zero,bec <___vfprintf_internal_r+0x318>
     bb0:	8023883a 	mov	r17,r16
     bb4:	d9400d17 	ldw	r5,52(sp)
     bb8:	8809883a 	mov	r4,r17
     bbc:	00006c40 	call	6c4 <__udivsi3>
     bc0:	d9000d17 	ldw	r4,52(sp)
     bc4:	100b883a 	mov	r5,r2
     bc8:	1021883a 	mov	r16,r2
     bcc:	00011ac0 	call	11ac <__mulsi3>
     bd0:	8889c83a 	sub	r4,r17,r2
     bd4:	b13ff20e 	bge	r22,r4,ba0 <___vfprintf_internal_r+0x2cc>
     bd8:	a8009f1e 	bne	r21,zero,e58 <___vfprintf_internal_r+0x584>
     bdc:	21000dc4 	addi	r4,r4,55
     be0:	99000005 	stb	r4,0(r19)
     be4:	9cc00044 	addi	r19,r19,1
     be8:	803ff11e 	bne	r16,zero,bb0 <___vfprintf_internal_r+0x2dc>
     bec:	d8801217 	ldw	r2,72(sp)
     bf0:	98a3c83a 	sub	r17,r19,r2
     bf4:	d8c00917 	ldw	r3,36(sp)
     bf8:	1c4bc83a 	sub	r5,r3,r17
     bfc:	0140130e 	bge	zero,r5,c4c <___vfprintf_internal_r+0x378>
     c00:	d8c00044 	addi	r3,sp,1
     c04:	18800804 	addi	r2,r3,32
     c08:	9880102e 	bgeu	r19,r2,c4c <___vfprintf_internal_r+0x378>
     c0c:	00800c04 	movi	r2,48
     c10:	28ffffc4 	addi	r3,r5,-1
     c14:	98800005 	stb	r2,0(r19)
     c18:	99000044 	addi	r4,r19,1
     c1c:	00c0080e 	bge	zero,r3,c40 <___vfprintf_internal_r+0x36c>
     c20:	d8c00044 	addi	r3,sp,1
     c24:	18800804 	addi	r2,r3,32
     c28:	2080052e 	bgeu	r4,r2,c40 <___vfprintf_internal_r+0x36c>
     c2c:	00800c04 	movi	r2,48
     c30:	20800005 	stb	r2,0(r4)
     c34:	21000044 	addi	r4,r4,1
     c38:	9945883a 	add	r2,r19,r5
     c3c:	20bff81e 	bne	r4,r2,c20 <___vfprintf_internal_r+0x34c>
     c40:	d8801217 	ldw	r2,72(sp)
     c44:	2027883a 	mov	r19,r4
     c48:	20a3c83a 	sub	r17,r4,r2
     c4c:	d8c00a17 	ldw	r3,40(sp)
     c50:	1c45883a 	add	r2,r3,r17
     c54:	e0a1c83a 	sub	r16,fp,r2
     c58:	d8800f17 	ldw	r2,60(sp)
     c5c:	10008026 	beq	r2,zero,e60 <___vfprintf_internal_r+0x58c>
     c60:	1805003a 	cmpeq	r2,r3,zero
     c64:	1000ae26 	beq	r2,zero,f20 <___vfprintf_internal_r+0x64c>
     c68:	0400a516 	blt	zero,r16,f00 <___vfprintf_internal_r+0x62c>
     c6c:	b805883a 	mov	r2,r23
     c70:	0440950e 	bge	zero,r17,ec8 <___vfprintf_internal_r+0x5f4>
     c74:	102f883a 	mov	r23,r2
     c78:	1461883a 	add	r16,r2,r17
     c7c:	00000206 	br	c88 <___vfprintf_internal_r+0x3b4>
     c80:	bdc00044 	addi	r23,r23,1
     c84:	85ffae26 	beq	r16,r23,b40 <___vfprintf_internal_r+0x26c>
     c88:	9cffffc4 	addi	r19,r19,-1
     c8c:	98800003 	ldbu	r2,0(r19)
     c90:	a0c00117 	ldw	r3,4(r20)
     c94:	d9001017 	ldw	r4,64(sp)
     c98:	d8800005 	stb	r2,0(sp)
     c9c:	a00b883a 	mov	r5,r20
     ca0:	d80d883a 	mov	r6,sp
     ca4:	01c00044 	movi	r7,1
     ca8:	183ee83a 	callr	r3
     cac:	103ff426 	beq	r2,zero,c80 <___vfprintf_internal_r+0x3ac>
     cb0:	05ffffc4 	movi	r23,-1
     cb4:	003f3b06 	br	9a4 <___vfprintf_internal_r+0xd0>
     cb8:	00c00404 	movi	r3,16
     cbc:	d8c00d15 	stw	r3,52(sp)
     cc0:	d8000c15 	stw	zero,48(sp)
     cc4:	d8c00e17 	ldw	r3,56(sp)
     cc8:	1805003a 	cmpeq	r2,r3,zero
     ccc:	103fa626 	beq	r2,zero,b68 <___vfprintf_internal_r+0x294>
     cd0:	d8c00c17 	ldw	r3,48(sp)
     cd4:	1800171e 	bne	r3,zero,d34 <___vfprintf_internal_r+0x460>
     cd8:	d8c01117 	ldw	r3,68(sp)
     cdc:	d8000a15 	stw	zero,40(sp)
     ce0:	1c400017 	ldw	r17,0(r3)
     ce4:	19c00104 	addi	r7,r3,4
     ce8:	d9c01115 	stw	r7,68(sp)
     cec:	883fa61e 	bne	r17,zero,b88 <___vfprintf_internal_r+0x2b4>
     cf0:	dcc00044 	addi	r19,sp,1
     cf4:	dcc01215 	stw	r19,72(sp)
     cf8:	003fbe06 	br	bf4 <___vfprintf_internal_r+0x320>
     cfc:	04000084 	movi	r16,2
     d00:	d9c00f15 	stw	r7,60(sp)
     d04:	003f0b06 	br	934 <___vfprintf_internal_r+0x60>
     d08:	040000c4 	movi	r16,3
     d0c:	003f0906 	br	934 <___vfprintf_internal_r+0x60>
     d10:	00800044 	movi	r2,1
     d14:	040000c4 	movi	r16,3
     d18:	d8800e15 	stw	r2,56(sp)
     d1c:	003f0506 	br	934 <___vfprintf_internal_r+0x60>
     d20:	0007883a 	mov	r3,zero
     d24:	003f4e06 	br	a60 <___vfprintf_internal_r+0x18c>
     d28:	00800044 	movi	r2,1
     d2c:	d8800915 	stw	r2,36(sp)
     d30:	003f5706 	br	a90 <___vfprintf_internal_r+0x1bc>
     d34:	d8801117 	ldw	r2,68(sp)
     d38:	14400017 	ldw	r17,0(r2)
     d3c:	10800104 	addi	r2,r2,4
     d40:	d8801115 	stw	r2,68(sp)
     d44:	88000716 	blt	r17,zero,d64 <___vfprintf_internal_r+0x490>
     d48:	d8000a15 	stw	zero,40(sp)
     d4c:	003f8d06 	br	b84 <___vfprintf_internal_r+0x2b0>
     d50:	d8c01117 	ldw	r3,68(sp)
     d54:	1c400017 	ldw	r17,0(r3)
     d58:	18c00104 	addi	r3,r3,4
     d5c:	d8c01115 	stw	r3,68(sp)
     d60:	883ff90e 	bge	r17,zero,d48 <___vfprintf_internal_r+0x474>
     d64:	00800044 	movi	r2,1
     d68:	0463c83a 	sub	r17,zero,r17
     d6c:	d8800a15 	stw	r2,40(sp)
     d70:	003f8406 	br	b84 <___vfprintf_internal_r+0x2b0>
     d74:	04000044 	movi	r16,1
     d78:	8700080e 	bge	r16,fp,d9c <___vfprintf_internal_r+0x4c8>
     d7c:	d9001017 	ldw	r4,64(sp)
     d80:	a00b883a 	mov	r5,r20
     d84:	01800804 	movi	r6,32
     d88:	e1ffffc4 	addi	r7,fp,-1
     d8c:	00008540 	call	854 <print_repeat>
     d90:	103fc71e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     d94:	e5c5883a 	add	r2,fp,r23
     d98:	15ffffc4 	addi	r23,r2,-1
     d9c:	d8c01117 	ldw	r3,68(sp)
     da0:	d9001017 	ldw	r4,64(sp)
     da4:	800f883a 	mov	r7,r16
     da8:	18800017 	ldw	r2,0(r3)
     dac:	a0c00117 	ldw	r3,4(r20)
     db0:	a00b883a 	mov	r5,r20
     db4:	d8800005 	stb	r2,0(sp)
     db8:	d80d883a 	mov	r6,sp
     dbc:	183ee83a 	callr	r3
     dc0:	103fbb1e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     dc4:	d8801117 	ldw	r2,68(sp)
     dc8:	bdc00044 	addi	r23,r23,1
     dcc:	0021883a 	mov	r16,zero
     dd0:	10800104 	addi	r2,r2,4
     dd4:	d8801115 	stw	r2,68(sp)
     dd8:	003ed606 	br	934 <___vfprintf_internal_r+0x60>
     ddc:	00800204 	movi	r2,8
     de0:	d8800d15 	stw	r2,52(sp)
     de4:	d8000c15 	stw	zero,48(sp)
     de8:	003fb606 	br	cc4 <___vfprintf_internal_r+0x3f0>
     dec:	d8c01117 	ldw	r3,68(sp)
     df0:	1cc00017 	ldw	r19,0(r3)
     df4:	9809883a 	mov	r4,r19
     df8:	00008340 	call	834 <strlen>
     dfc:	e0a1c83a 	sub	r16,fp,r2
     e00:	1023883a 	mov	r17,r2
     e04:	0400070e 	bge	zero,r16,e24 <___vfprintf_internal_r+0x550>
     e08:	d9001017 	ldw	r4,64(sp)
     e0c:	a00b883a 	mov	r5,r20
     e10:	01800804 	movi	r6,32
     e14:	800f883a 	mov	r7,r16
     e18:	00008540 	call	854 <print_repeat>
     e1c:	103fa41e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     e20:	bc2f883a 	add	r23,r23,r16
     e24:	a0c00117 	ldw	r3,4(r20)
     e28:	d9001017 	ldw	r4,64(sp)
     e2c:	980d883a 	mov	r6,r19
     e30:	a00b883a 	mov	r5,r20
     e34:	880f883a 	mov	r7,r17
     e38:	183ee83a 	callr	r3
     e3c:	103f9c1e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     e40:	d8801117 	ldw	r2,68(sp)
     e44:	bc6f883a 	add	r23,r23,r17
     e48:	0021883a 	mov	r16,zero
     e4c:	10800104 	addi	r2,r2,4
     e50:	d8801115 	stw	r2,68(sp)
     e54:	003eb706 	br	934 <___vfprintf_internal_r+0x60>
     e58:	210015c4 	addi	r4,r4,87
     e5c:	003f5106 	br	ba4 <___vfprintf_internal_r+0x2d0>
     e60:	04003b16 	blt	zero,r16,f50 <___vfprintf_internal_r+0x67c>
     e64:	d8c00a17 	ldw	r3,40(sp)
     e68:	1805003a 	cmpeq	r2,r3,zero
     e6c:	103f7f1e 	bne	r2,zero,c6c <___vfprintf_internal_r+0x398>
     e70:	a0c00117 	ldw	r3,4(r20)
     e74:	d9001017 	ldw	r4,64(sp)
     e78:	00800b44 	movi	r2,45
     e7c:	d8800005 	stb	r2,0(sp)
     e80:	a00b883a 	mov	r5,r20
     e84:	d80d883a 	mov	r6,sp
     e88:	01c00044 	movi	r7,1
     e8c:	183ee83a 	callr	r3
     e90:	103f871e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     e94:	b8800044 	addi	r2,r23,1
     e98:	003f7506 	br	c70 <___vfprintf_internal_r+0x39c>
     e9c:	0007883a 	mov	r3,zero
     ea0:	003edb06 	br	a10 <___vfprintf_internal_r+0x13c>
     ea4:	a0c00117 	ldw	r3,4(r20)
     ea8:	d9001017 	ldw	r4,64(sp)
     eac:	d9400005 	stb	r5,0(sp)
     eb0:	d80d883a 	mov	r6,sp
     eb4:	a00b883a 	mov	r5,r20
     eb8:	183ee83a 	callr	r3
     ebc:	103f7c1e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     ec0:	bdc00044 	addi	r23,r23,1
     ec4:	003e9b06 	br	934 <___vfprintf_internal_r+0x60>
     ec8:	102f883a 	mov	r23,r2
     ecc:	0021883a 	mov	r16,zero
     ed0:	003e9806 	br	934 <___vfprintf_internal_r+0x60>
     ed4:	a0c00117 	ldw	r3,4(r20)
     ed8:	d9000005 	stb	r4,0(sp)
     edc:	d9001017 	ldw	r4,64(sp)
     ee0:	a00b883a 	mov	r5,r20
     ee4:	d80d883a 	mov	r6,sp
     ee8:	800f883a 	mov	r7,r16
     eec:	183ee83a 	callr	r3
     ef0:	103f6f1e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     ef4:	bc2f883a 	add	r23,r23,r16
     ef8:	0021883a 	mov	r16,zero
     efc:	003e8d06 	br	934 <___vfprintf_internal_r+0x60>
     f00:	d9001017 	ldw	r4,64(sp)
     f04:	a00b883a 	mov	r5,r20
     f08:	01800c04 	movi	r6,48
     f0c:	800f883a 	mov	r7,r16
     f10:	00008540 	call	854 <print_repeat>
     f14:	103f661e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     f18:	bc05883a 	add	r2,r23,r16
     f1c:	003f5406 	br	c70 <___vfprintf_internal_r+0x39c>
     f20:	a0c00117 	ldw	r3,4(r20)
     f24:	d9001017 	ldw	r4,64(sp)
     f28:	00800b44 	movi	r2,45
     f2c:	d8800005 	stb	r2,0(sp)
     f30:	a00b883a 	mov	r5,r20
     f34:	d80d883a 	mov	r6,sp
     f38:	01c00044 	movi	r7,1
     f3c:	183ee83a 	callr	r3
     f40:	103f5b1e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     f44:	bdc00044 	addi	r23,r23,1
     f48:	043f480e 	bge	zero,r16,c6c <___vfprintf_internal_r+0x398>
     f4c:	003fec06 	br	f00 <___vfprintf_internal_r+0x62c>
     f50:	d9001017 	ldw	r4,64(sp)
     f54:	a00b883a 	mov	r5,r20
     f58:	01800804 	movi	r6,32
     f5c:	800f883a 	mov	r7,r16
     f60:	00008540 	call	854 <print_repeat>
     f64:	103f521e 	bne	r2,zero,cb0 <___vfprintf_internal_r+0x3dc>
     f68:	bc2f883a 	add	r23,r23,r16
     f6c:	003fbd06 	br	e64 <___vfprintf_internal_r+0x590>

00000f70 <__vfprintf_internal>:
     f70:	00800034 	movhi	r2,0
     f74:	108c9004 	addi	r2,r2,12864
     f78:	2013883a 	mov	r9,r4
     f7c:	11000017 	ldw	r4,0(r2)
     f80:	2805883a 	mov	r2,r5
     f84:	300f883a 	mov	r7,r6
     f88:	480b883a 	mov	r5,r9
     f8c:	100d883a 	mov	r6,r2
     f90:	00008d41 	jmpi	8d4 <___vfprintf_internal_r>

00000f94 <__sfvwrite_small_dev>:
     f94:	2880000b 	ldhu	r2,0(r5)
     f98:	defffa04 	addi	sp,sp,-24
     f9c:	dcc00315 	stw	r19,12(sp)
     fa0:	1080020c 	andi	r2,r2,8
     fa4:	dc800215 	stw	r18,8(sp)
     fa8:	dc400115 	stw	r17,4(sp)
     fac:	dfc00515 	stw	ra,20(sp)
     fb0:	dd000415 	stw	r20,16(sp)
     fb4:	dc000015 	stw	r16,0(sp)
     fb8:	2825883a 	mov	r18,r5
     fbc:	2027883a 	mov	r19,r4
     fc0:	3023883a 	mov	r17,r6
     fc4:	10002026 	beq	r2,zero,1048 <__sfvwrite_small_dev+0xb4>
     fc8:	2940008f 	ldh	r5,2(r5)
     fcc:	28000f16 	blt	r5,zero,100c <__sfvwrite_small_dev+0x78>
     fd0:	01c01b0e 	bge	zero,r7,1040 <__sfvwrite_small_dev+0xac>
     fd4:	3821883a 	mov	r16,r7
     fd8:	05010004 	movi	r20,1024
     fdc:	00000206 	br	fe8 <__sfvwrite_small_dev+0x54>
     fe0:	0400170e 	bge	zero,r16,1040 <__sfvwrite_small_dev+0xac>
     fe4:	9140008f 	ldh	r5,2(r18)
     fe8:	880d883a 	mov	r6,r17
     fec:	9809883a 	mov	r4,r19
     ff0:	800f883a 	mov	r7,r16
     ff4:	a400010e 	bge	r20,r16,ffc <__sfvwrite_small_dev+0x68>
     ff8:	01c10004 	movi	r7,1024
     ffc:	00011340 	call	1134 <_write_r>
    1000:	88a3883a 	add	r17,r17,r2
    1004:	80a1c83a 	sub	r16,r16,r2
    1008:	00bff516 	blt	zero,r2,fe0 <__sfvwrite_small_dev+0x4c>
    100c:	9080000b 	ldhu	r2,0(r18)
    1010:	00ffffc4 	movi	r3,-1
    1014:	10801014 	ori	r2,r2,64
    1018:	9080000d 	sth	r2,0(r18)
    101c:	1805883a 	mov	r2,r3
    1020:	dfc00517 	ldw	ra,20(sp)
    1024:	dd000417 	ldw	r20,16(sp)
    1028:	dcc00317 	ldw	r19,12(sp)
    102c:	dc800217 	ldw	r18,8(sp)
    1030:	dc400117 	ldw	r17,4(sp)
    1034:	dc000017 	ldw	r16,0(sp)
    1038:	dec00604 	addi	sp,sp,24
    103c:	f800283a 	ret
    1040:	0007883a 	mov	r3,zero
    1044:	003ff506 	br	101c <__sfvwrite_small_dev+0x88>
    1048:	00ffffc4 	movi	r3,-1
    104c:	003ff306 	br	101c <__sfvwrite_small_dev+0x88>

00001050 <putc>:
    1050:	defffd04 	addi	sp,sp,-12
    1054:	00800034 	movhi	r2,0
    1058:	108c9004 	addi	r2,r2,12864
    105c:	dc000115 	stw	r16,4(sp)
    1060:	2021883a 	mov	r16,r4
    1064:	11000017 	ldw	r4,0(r2)
    1068:	dc000005 	stb	r16,0(sp)
    106c:	00800034 	movhi	r2,0
    1070:	1083e504 	addi	r2,r2,3988
    1074:	dfc00215 	stw	ra,8(sp)
    1078:	28800115 	stw	r2,4(r5)
    107c:	d80d883a 	mov	r6,sp
    1080:	01c00044 	movi	r7,1
    1084:	103ee83a 	callr	r2
    1088:	1007883a 	mov	r3,r2
    108c:	00bfffc4 	movi	r2,-1
    1090:	18800526 	beq	r3,r2,10a8 <putc+0x58>
    1094:	8005883a 	mov	r2,r16
    1098:	dfc00217 	ldw	ra,8(sp)
    109c:	dc000117 	ldw	r16,4(sp)
    10a0:	dec00304 	addi	sp,sp,12
    10a4:	f800283a 	ret
    10a8:	1821883a 	mov	r16,r3
    10ac:	8005883a 	mov	r2,r16
    10b0:	dfc00217 	ldw	ra,8(sp)
    10b4:	dc000117 	ldw	r16,4(sp)
    10b8:	dec00304 	addi	sp,sp,12
    10bc:	f800283a 	ret

000010c0 <_putc_r>:
    10c0:	00800034 	movhi	r2,0
    10c4:	108c9004 	addi	r2,r2,12864
    10c8:	defffd04 	addi	sp,sp,-12
    10cc:	11000017 	ldw	r4,0(r2)
    10d0:	00800034 	movhi	r2,0
    10d4:	1083e504 	addi	r2,r2,3988
    10d8:	30800115 	stw	r2,4(r6)
    10dc:	dc000115 	stw	r16,4(sp)
    10e0:	2821883a 	mov	r16,r5
    10e4:	dfc00215 	stw	ra,8(sp)
    10e8:	300b883a 	mov	r5,r6
    10ec:	01c00044 	movi	r7,1
    10f0:	d80d883a 	mov	r6,sp
    10f4:	dc000005 	stb	r16,0(sp)
    10f8:	103ee83a 	callr	r2
    10fc:	1007883a 	mov	r3,r2
    1100:	00bfffc4 	movi	r2,-1
    1104:	18800526 	beq	r3,r2,111c <_putc_r+0x5c>
    1108:	8005883a 	mov	r2,r16
    110c:	dfc00217 	ldw	ra,8(sp)
    1110:	dc000117 	ldw	r16,4(sp)
    1114:	dec00304 	addi	sp,sp,12
    1118:	f800283a 	ret
    111c:	1821883a 	mov	r16,r3
    1120:	8005883a 	mov	r2,r16
    1124:	dfc00217 	ldw	ra,8(sp)
    1128:	dc000117 	ldw	r16,4(sp)
    112c:	dec00304 	addi	sp,sp,12
    1130:	f800283a 	ret

00001134 <_write_r>:
    1134:	defffd04 	addi	sp,sp,-12
    1138:	dc000015 	stw	r16,0(sp)
    113c:	04000034 	movhi	r16,0
    1140:	840d5504 	addi	r16,r16,13652
    1144:	dc400115 	stw	r17,4(sp)
    1148:	80000015 	stw	zero,0(r16)
    114c:	2023883a 	mov	r17,r4
    1150:	2809883a 	mov	r4,r5
    1154:	300b883a 	mov	r5,r6
    1158:	380d883a 	mov	r6,r7
    115c:	dfc00215 	stw	ra,8(sp)
    1160:	000136c0 	call	136c <write>
    1164:	1007883a 	mov	r3,r2
    1168:	00bfffc4 	movi	r2,-1
    116c:	18800626 	beq	r3,r2,1188 <_write_r+0x54>
    1170:	1805883a 	mov	r2,r3
    1174:	dfc00217 	ldw	ra,8(sp)
    1178:	dc400117 	ldw	r17,4(sp)
    117c:	dc000017 	ldw	r16,0(sp)
    1180:	dec00304 	addi	sp,sp,12
    1184:	f800283a 	ret
    1188:	80800017 	ldw	r2,0(r16)
    118c:	103ff826 	beq	r2,zero,1170 <_write_r+0x3c>
    1190:	88800015 	stw	r2,0(r17)
    1194:	1805883a 	mov	r2,r3
    1198:	dfc00217 	ldw	ra,8(sp)
    119c:	dc400117 	ldw	r17,4(sp)
    11a0:	dc000017 	ldw	r16,0(sp)
    11a4:	dec00304 	addi	sp,sp,12
    11a8:	f800283a 	ret

000011ac <__mulsi3>:
    11ac:	20000a26 	beq	r4,zero,11d8 <__mulsi3+0x2c>
    11b0:	0007883a 	mov	r3,zero
    11b4:	2080004c 	andi	r2,r4,1
    11b8:	1005003a 	cmpeq	r2,r2,zero
    11bc:	2008d07a 	srli	r4,r4,1
    11c0:	1000011e 	bne	r2,zero,11c8 <__mulsi3+0x1c>
    11c4:	1947883a 	add	r3,r3,r5
    11c8:	294b883a 	add	r5,r5,r5
    11cc:	203ff91e 	bne	r4,zero,11b4 <__mulsi3+0x8>
    11d0:	1805883a 	mov	r2,r3
    11d4:	f800283a 	ret
    11d8:	0007883a 	mov	r3,zero
    11dc:	1805883a 	mov	r2,r3
    11e0:	f800283a 	ret

000011e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    11e4:	defffe04 	addi	sp,sp,-8
    11e8:	dfc00115 	stw	ra,4(sp)
    11ec:	df000015 	stw	fp,0(sp)
    11f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    11f4:	01000034 	movhi	r4,0
    11f8:	210c9b04 	addi	r4,r4,12908
    11fc:	01400034 	movhi	r5,0
    1200:	294be304 	addi	r5,r5,12172
    1204:	01800034 	movhi	r6,0
    1208:	318c9b04 	addi	r6,r6,12908
    120c:	00012640 	call	1264 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1210:	01000034 	movhi	r4,0
    1214:	21000804 	addi	r4,r4,32
    1218:	01400034 	movhi	r5,0
    121c:	29400804 	addi	r5,r5,32
    1220:	01800034 	movhi	r6,0
    1224:	31806d04 	addi	r6,r6,436
    1228:	00012640 	call	1264 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    122c:	01000034 	movhi	r4,0
    1230:	210b9f04 	addi	r4,r4,11900
    1234:	01400034 	movhi	r5,0
    1238:	294b9f04 	addi	r5,r5,11900
    123c:	01800034 	movhi	r6,0
    1240:	318be304 	addi	r6,r6,12172
    1244:	00012640 	call	1264 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1248:	0001bd80 	call	1bd8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    124c:	0001dfc0 	call	1dfc <alt_icache_flush_all>
}
    1250:	e037883a 	mov	sp,fp
    1254:	dfc00117 	ldw	ra,4(sp)
    1258:	df000017 	ldw	fp,0(sp)
    125c:	dec00204 	addi	sp,sp,8
    1260:	f800283a 	ret

00001264 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1264:	defffc04 	addi	sp,sp,-16
    1268:	df000315 	stw	fp,12(sp)
    126c:	df000304 	addi	fp,sp,12
    1270:	e13ffd15 	stw	r4,-12(fp)
    1274:	e17ffe15 	stw	r5,-8(fp)
    1278:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    127c:	e0fffe17 	ldw	r3,-8(fp)
    1280:	e0bffd17 	ldw	r2,-12(fp)
    1284:	18800e26 	beq	r3,r2,12c0 <alt_load_section+0x5c>
  {
    while( to != end )
    1288:	00000a06 	br	12b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    128c:	e0bffd17 	ldw	r2,-12(fp)
    1290:	10c00017 	ldw	r3,0(r2)
    1294:	e0bffe17 	ldw	r2,-8(fp)
    1298:	10c00015 	stw	r3,0(r2)
    129c:	e0bffe17 	ldw	r2,-8(fp)
    12a0:	10800104 	addi	r2,r2,4
    12a4:	e0bffe15 	stw	r2,-8(fp)
    12a8:	e0bffd17 	ldw	r2,-12(fp)
    12ac:	10800104 	addi	r2,r2,4
    12b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    12b4:	e0fffe17 	ldw	r3,-8(fp)
    12b8:	e0bfff17 	ldw	r2,-4(fp)
    12bc:	18bff31e 	bne	r3,r2,128c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    12c0:	e037883a 	mov	sp,fp
    12c4:	df000017 	ldw	fp,0(sp)
    12c8:	dec00104 	addi	sp,sp,4
    12cc:	f800283a 	ret

000012d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12d0:	defffd04 	addi	sp,sp,-12
    12d4:	dfc00215 	stw	ra,8(sp)
    12d8:	df000115 	stw	fp,4(sp)
    12dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12e0:	0009883a 	mov	r4,zero
    12e4:	00014f00 	call	14f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    12e8:	00015240 	call	1524 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    12ec:	01000034 	movhi	r4,0
    12f0:	210bd804 	addi	r4,r4,12128
    12f4:	01400034 	movhi	r5,0
    12f8:	294bd804 	addi	r5,r5,12128
    12fc:	01800034 	movhi	r6,0
    1300:	318bd804 	addi	r6,r6,12128
    1304:	00021d00 	call	21d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1308:	0001d340 	call	1d34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    130c:	01000034 	movhi	r4,0
    1310:	21076604 	addi	r4,r4,7576
    1314:	0002a7c0 	call	2a7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1318:	d120c617 	ldw	r4,-31976(gp)
    131c:	d160c717 	ldw	r5,-31972(gp)
    1320:	d1a0c817 	ldw	r6,-31968(gp)
    1324:	00004800 	call	480 <main>
    1328:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    132c:	01000044 	movi	r4,1
    1330:	0001a780 	call	1a78 <close>
  exit (result);
    1334:	e13fff17 	ldw	r4,-4(fp)
    1338:	0002a900 	call	2a90 <exit>

0000133c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    133c:	defffd04 	addi	sp,sp,-12
    1340:	dfc00215 	stw	ra,8(sp)
    1344:	df000115 	stw	fp,4(sp)
    1348:	df000104 	addi	fp,sp,4
    134c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    1350:	e13fff17 	ldw	r4,-4(fp)
    1354:	000191c0 	call	191c <alt_busy_sleep>
}
    1358:	e037883a 	mov	sp,fp
    135c:	dfc00117 	ldw	ra,4(sp)
    1360:	df000017 	ldw	fp,0(sp)
    1364:	dec00204 	addi	sp,sp,8
    1368:	f800283a 	ret

0000136c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    136c:	defff704 	addi	sp,sp,-36
    1370:	dfc00815 	stw	ra,32(sp)
    1374:	df000715 	stw	fp,28(sp)
    1378:	df000704 	addi	fp,sp,28
    137c:	e13ffb15 	stw	r4,-20(fp)
    1380:	e17ffc15 	stw	r5,-16(fp)
    1384:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    1388:	e0bffb17 	ldw	r2,-20(fp)
    138c:	1004803a 	cmplt	r2,r2,zero
    1390:	1000091e 	bne	r2,zero,13b8 <write+0x4c>
    1394:	e13ffb17 	ldw	r4,-20(fp)
    1398:	01400304 	movi	r5,12
    139c:	00011ac0 	call	11ac <__mulsi3>
    13a0:	1007883a 	mov	r3,r2
    13a4:	00800034 	movhi	r2,0
    13a8:	108c3004 	addi	r2,r2,12480
    13ac:	1887883a 	add	r3,r3,r2
    13b0:	e0ffff15 	stw	r3,-4(fp)
    13b4:	00000106 	br	13bc <write+0x50>
    13b8:	e03fff15 	stw	zero,-4(fp)
    13bc:	e0bfff17 	ldw	r2,-4(fp)
    13c0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    13c4:	e0bffa17 	ldw	r2,-24(fp)
    13c8:	1005003a 	cmpeq	r2,r2,zero
    13cc:	1000241e 	bne	r2,zero,1460 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    13d0:	e0bffa17 	ldw	r2,-24(fp)
    13d4:	10800217 	ldw	r2,8(r2)
    13d8:	108000cc 	andi	r2,r2,3
    13dc:	1005003a 	cmpeq	r2,r2,zero
    13e0:	10001a1e 	bne	r2,zero,144c <write+0xe0>
    13e4:	e0bffa17 	ldw	r2,-24(fp)
    13e8:	10800017 	ldw	r2,0(r2)
    13ec:	10800617 	ldw	r2,24(r2)
    13f0:	1005003a 	cmpeq	r2,r2,zero
    13f4:	1000151e 	bne	r2,zero,144c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    13f8:	e0bffa17 	ldw	r2,-24(fp)
    13fc:	10800017 	ldw	r2,0(r2)
    1400:	10800617 	ldw	r2,24(r2)
    1404:	e17ffc17 	ldw	r5,-16(fp)
    1408:	e1bffd17 	ldw	r6,-12(fp)
    140c:	e13ffa17 	ldw	r4,-24(fp)
    1410:	103ee83a 	callr	r2
    1414:	e0bff915 	stw	r2,-28(fp)
    1418:	e0bff917 	ldw	r2,-28(fp)
    141c:	1004403a 	cmpge	r2,r2,zero
    1420:	1000071e 	bne	r2,zero,1440 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    1424:	00014900 	call	1490 <alt_get_errno>
    1428:	e0fff917 	ldw	r3,-28(fp)
    142c:	00c7c83a 	sub	r3,zero,r3
    1430:	10c00015 	stw	r3,0(r2)
        return -1;
    1434:	00bfffc4 	movi	r2,-1
    1438:	e0bffe15 	stw	r2,-8(fp)
    143c:	00000e06 	br	1478 <write+0x10c>
      }
      return rval;
    1440:	e0bff917 	ldw	r2,-28(fp)
    1444:	e0bffe15 	stw	r2,-8(fp)
    1448:	00000b06 	br	1478 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    144c:	00014900 	call	1490 <alt_get_errno>
    1450:	1007883a 	mov	r3,r2
    1454:	00800344 	movi	r2,13
    1458:	18800015 	stw	r2,0(r3)
    145c:	00000406 	br	1470 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    1460:	00014900 	call	1490 <alt_get_errno>
    1464:	1007883a 	mov	r3,r2
    1468:	00801444 	movi	r2,81
    146c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    1470:	00bfffc4 	movi	r2,-1
    1474:	e0bffe15 	stw	r2,-8(fp)
    1478:	e0bffe17 	ldw	r2,-8(fp)
}
    147c:	e037883a 	mov	sp,fp
    1480:	dfc00117 	ldw	ra,4(sp)
    1484:	df000017 	ldw	fp,0(sp)
    1488:	dec00204 	addi	sp,sp,8
    148c:	f800283a 	ret

00001490 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1490:	defffd04 	addi	sp,sp,-12
    1494:	dfc00215 	stw	ra,8(sp)
    1498:	df000115 	stw	fp,4(sp)
    149c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    14a0:	00800034 	movhi	r2,0
    14a4:	108c9704 	addi	r2,r2,12892
    14a8:	10800017 	ldw	r2,0(r2)
    14ac:	1005003a 	cmpeq	r2,r2,zero
    14b0:	1000061e 	bne	r2,zero,14cc <alt_get_errno+0x3c>
    14b4:	00800034 	movhi	r2,0
    14b8:	108c9704 	addi	r2,r2,12892
    14bc:	10800017 	ldw	r2,0(r2)
    14c0:	103ee83a 	callr	r2
    14c4:	e0bfff15 	stw	r2,-4(fp)
    14c8:	00000306 	br	14d8 <alt_get_errno+0x48>
    14cc:	00800034 	movhi	r2,0
    14d0:	108d5504 	addi	r2,r2,13652
    14d4:	e0bfff15 	stw	r2,-4(fp)
    14d8:	e0bfff17 	ldw	r2,-4(fp)
}
    14dc:	e037883a 	mov	sp,fp
    14e0:	dfc00117 	ldw	ra,4(sp)
    14e4:	df000017 	ldw	fp,0(sp)
    14e8:	dec00204 	addi	sp,sp,8
    14ec:	f800283a 	ret

000014f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    14f0:	defffd04 	addi	sp,sp,-12
    14f4:	dfc00215 	stw	ra,8(sp)
    14f8:	df000115 	stw	fp,4(sp)
    14fc:	df000104 	addi	fp,sp,4
    1500:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    1504:	00027480 	call	2748 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1508:	00800044 	movi	r2,1
    150c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1510:	e037883a 	mov	sp,fp
    1514:	dfc00117 	ldw	ra,4(sp)
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00204 	addi	sp,sp,8
    1520:	f800283a 	ret

00001524 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1524:	defffe04 	addi	sp,sp,-8
    1528:	dfc00115 	stw	ra,4(sp)
    152c:	df000015 	stw	fp,0(sp)
    1530:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    1534:	01241014 	movui	r4,36928
    1538:	000b883a 	mov	r5,zero
    153c:	01800044 	movi	r6,1
    1540:	01c0fa04 	movi	r7,1000
    1544:	000188c0 	call	188c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
    1548:	00c00034 	movhi	r3,0
    154c:	18cd5904 	addi	r3,r3,13668
    1550:	00a40014 	movui	r2,36864
    1554:	18800015 	stw	r2,0(r3)
    1558:	00c00034 	movhi	r3,0
    155c:	18cd5a04 	addi	r3,r3,13672
    1560:	0080bef4 	movhi	r2,763
    1564:	10bc2004 	addi	r2,r2,-3968
    1568:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    156c:	01000034 	movhi	r4,0
    1570:	210c1b04 	addi	r4,r4,12396
    1574:	000158c0 	call	158c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    1578:	e037883a 	mov	sp,fp
    157c:	dfc00117 	ldw	ra,4(sp)
    1580:	df000017 	ldw	fp,0(sp)
    1584:	dec00204 	addi	sp,sp,8
    1588:	f800283a 	ret

0000158c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    158c:	defffd04 	addi	sp,sp,-12
    1590:	dfc00215 	stw	ra,8(sp)
    1594:	df000115 	stw	fp,4(sp)
    1598:	df000104 	addi	fp,sp,4
    159c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    15a0:	e13fff17 	ldw	r4,-4(fp)
    15a4:	01400034 	movhi	r5,0
    15a8:	294c9404 	addi	r5,r5,12880
    15ac:	0001c200 	call	1c20 <alt_dev_llist_insert>
}
    15b0:	e037883a 	mov	sp,fp
    15b4:	dfc00117 	ldw	ra,4(sp)
    15b8:	df000017 	ldw	fp,0(sp)
    15bc:	dec00204 	addi	sp,sp,8
    15c0:	f800283a 	ret

000015c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    15c4:	defffa04 	addi	sp,sp,-24
    15c8:	dfc00515 	stw	ra,20(sp)
    15cc:	df000415 	stw	fp,16(sp)
    15d0:	df000404 	addi	fp,sp,16
    15d4:	e13ffd15 	stw	r4,-12(fp)
    15d8:	e17ffe15 	stw	r5,-8(fp)
    15dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    15e0:	e0bffd17 	ldw	r2,-12(fp)
    15e4:	10800017 	ldw	r2,0(r2)
    15e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    15ec:	e0bffc17 	ldw	r2,-16(fp)
    15f0:	11000a04 	addi	r4,r2,40
    15f4:	e0bffd17 	ldw	r2,-12(fp)
    15f8:	11c00217 	ldw	r7,8(r2)
    15fc:	e17ffe17 	ldw	r5,-8(fp)
    1600:	e1bfff17 	ldw	r6,-4(fp)
    1604:	00016740 	call	1674 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1608:	e037883a 	mov	sp,fp
    160c:	dfc00117 	ldw	ra,4(sp)
    1610:	df000017 	ldw	fp,0(sp)
    1614:	dec00204 	addi	sp,sp,8
    1618:	f800283a 	ret

0000161c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    161c:	defffa04 	addi	sp,sp,-24
    1620:	dfc00515 	stw	ra,20(sp)
    1624:	df000415 	stw	fp,16(sp)
    1628:	df000404 	addi	fp,sp,16
    162c:	e13ffd15 	stw	r4,-12(fp)
    1630:	e17ffe15 	stw	r5,-8(fp)
    1634:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1638:	e0bffd17 	ldw	r2,-12(fp)
    163c:	10800017 	ldw	r2,0(r2)
    1640:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1644:	e0bffc17 	ldw	r2,-16(fp)
    1648:	11000a04 	addi	r4,r2,40
    164c:	e0bffd17 	ldw	r2,-12(fp)
    1650:	11c00217 	ldw	r7,8(r2)
    1654:	e17ffe17 	ldw	r5,-8(fp)
    1658:	e1bfff17 	ldw	r6,-4(fp)
    165c:	00017780 	call	1778 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1660:	e037883a 	mov	sp,fp
    1664:	dfc00117 	ldw	ra,4(sp)
    1668:	df000017 	ldw	fp,0(sp)
    166c:	dec00204 	addi	sp,sp,8
    1670:	f800283a 	ret

00001674 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    1674:	defff604 	addi	sp,sp,-40
    1678:	df000915 	stw	fp,36(sp)
    167c:	df000904 	addi	fp,sp,36
    1680:	e13ffb15 	stw	r4,-20(fp)
    1684:	e17ffc15 	stw	r5,-16(fp)
    1688:	e1bffd15 	stw	r6,-12(fp)
    168c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    1690:	e0bffb17 	ldw	r2,-20(fp)
    1694:	10800017 	ldw	r2,0(r2)
    1698:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    169c:	e0bffc17 	ldw	r2,-16(fp)
    16a0:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    16a4:	e0bffd17 	ldw	r2,-12(fp)
    16a8:	1007883a 	mov	r3,r2
    16ac:	e0bffc17 	ldw	r2,-16(fp)
    16b0:	10c5883a 	add	r2,r2,r3
    16b4:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    16b8:	00001606 	br	1714 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    16bc:	e0bffa17 	ldw	r2,-24(fp)
    16c0:	10800037 	ldwio	r2,0(r2)
    16c4:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    16c8:	e0bff717 	ldw	r2,-36(fp)
    16cc:	10a0000c 	andi	r2,r2,32768
    16d0:	1005003a 	cmpeq	r2,r2,zero
    16d4:	1000081e 	bne	r2,zero,16f8 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    16d8:	e0bff717 	ldw	r2,-36(fp)
    16dc:	1007883a 	mov	r3,r2
    16e0:	e0bff917 	ldw	r2,-28(fp)
    16e4:	10c00005 	stb	r3,0(r2)
    16e8:	e0bff917 	ldw	r2,-28(fp)
    16ec:	10800044 	addi	r2,r2,1
    16f0:	e0bff915 	stw	r2,-28(fp)
    16f4:	00000706 	br	1714 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    16f8:	e0fff917 	ldw	r3,-28(fp)
    16fc:	e0bffc17 	ldw	r2,-16(fp)
    1700:	1880071e 	bne	r3,r2,1720 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    1704:	e0bffe17 	ldw	r2,-8(fp)
    1708:	1090000c 	andi	r2,r2,16384
    170c:	1004c03a 	cmpne	r2,r2,zero
    1710:	1000031e 	bne	r2,zero,1720 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1714:	e0fff917 	ldw	r3,-28(fp)
    1718:	e0bff817 	ldw	r2,-32(fp)
    171c:	18bfe736 	bltu	r3,r2,16bc <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    1720:	e0fff917 	ldw	r3,-28(fp)
    1724:	e0bffc17 	ldw	r2,-16(fp)
    1728:	18800526 	beq	r3,r2,1740 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    172c:	e0fff917 	ldw	r3,-28(fp)
    1730:	e0bffc17 	ldw	r2,-16(fp)
    1734:	1887c83a 	sub	r3,r3,r2
    1738:	e0ffff15 	stw	r3,-4(fp)
    173c:	00000906 	br	1764 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    1740:	e0bffe17 	ldw	r2,-8(fp)
    1744:	1090000c 	andi	r2,r2,16384
    1748:	1005003a 	cmpeq	r2,r2,zero
    174c:	1000031e 	bne	r2,zero,175c <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    1750:	00bffd44 	movi	r2,-11
    1754:	e0bfff15 	stw	r2,-4(fp)
    1758:	00000206 	br	1764 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    175c:	00bffec4 	movi	r2,-5
    1760:	e0bfff15 	stw	r2,-4(fp)
    1764:	e0bfff17 	ldw	r2,-4(fp)
}
    1768:	e037883a 	mov	sp,fp
    176c:	df000017 	ldw	fp,0(sp)
    1770:	dec00104 	addi	sp,sp,4
    1774:	f800283a 	ret

00001778 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1778:	defff904 	addi	sp,sp,-28
    177c:	df000615 	stw	fp,24(sp)
    1780:	df000604 	addi	fp,sp,24
    1784:	e13ffc15 	stw	r4,-16(fp)
    1788:	e17ffd15 	stw	r5,-12(fp)
    178c:	e1bffe15 	stw	r6,-8(fp)
    1790:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1794:	e0bffc17 	ldw	r2,-16(fp)
    1798:	10800017 	ldw	r2,0(r2)
    179c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    17a0:	e0bffe17 	ldw	r2,-8(fp)
    17a4:	1007883a 	mov	r3,r2
    17a8:	e0bffd17 	ldw	r2,-12(fp)
    17ac:	10c5883a 	add	r2,r2,r3
    17b0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    17b4:	00001106 	br	17fc <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    17b8:	e0bffb17 	ldw	r2,-20(fp)
    17bc:	10800104 	addi	r2,r2,4
    17c0:	10800037 	ldwio	r2,0(r2)
    17c4:	10bfffec 	andhi	r2,r2,65535
    17c8:	1005003a 	cmpeq	r2,r2,zero
    17cc:	10000b1e 	bne	r2,zero,17fc <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    17d0:	e13ffb17 	ldw	r4,-20(fp)
    17d4:	e0bffd17 	ldw	r2,-12(fp)
    17d8:	10800003 	ldbu	r2,0(r2)
    17dc:	10c03fcc 	andi	r3,r2,255
    17e0:	18c0201c 	xori	r3,r3,128
    17e4:	18ffe004 	addi	r3,r3,-128
    17e8:	e0bffd17 	ldw	r2,-12(fp)
    17ec:	10800044 	addi	r2,r2,1
    17f0:	e0bffd15 	stw	r2,-12(fp)
    17f4:	2005883a 	mov	r2,r4
    17f8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    17fc:	e0fffd17 	ldw	r3,-12(fp)
    1800:	e0bffa17 	ldw	r2,-24(fp)
    1804:	18bfec36 	bltu	r3,r2,17b8 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    1808:	e0bffe17 	ldw	r2,-8(fp)
}
    180c:	e037883a 	mov	sp,fp
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00104 	addi	sp,sp,4
    1818:	f800283a 	ret

0000181c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1830:	e0bfff17 	ldw	r2,-4(fp)
    1834:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1838:	e0bfff17 	ldw	r2,-4(fp)
    183c:	10800104 	addi	r2,r2,4
    1840:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1844:	0005303a 	rdctl	r2,status
    1848:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    184c:	e0fffd17 	ldw	r3,-12(fp)
    1850:	00bfff84 	movi	r2,-2
    1854:	1884703a 	and	r2,r3,r2
    1858:	1001703a 	wrctl	status,r2
  
  return context;
    185c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1860:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    1864:	000263c0 	call	263c <alt_tick>
    1868:	e0bffe17 	ldw	r2,-8(fp)
    186c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1870:	e0bffc17 	ldw	r2,-16(fp)
    1874:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1878:	e037883a 	mov	sp,fp
    187c:	dfc00117 	ldw	ra,4(sp)
    1880:	df000017 	ldw	fp,0(sp)
    1884:	dec00204 	addi	sp,sp,8
    1888:	f800283a 	ret

0000188c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    188c:	defff804 	addi	sp,sp,-32
    1890:	dfc00715 	stw	ra,28(sp)
    1894:	df000615 	stw	fp,24(sp)
    1898:	df000604 	addi	fp,sp,24
    189c:	e13ffc15 	stw	r4,-16(fp)
    18a0:	e17ffd15 	stw	r5,-12(fp)
    18a4:	e1bffe15 	stw	r6,-8(fp)
    18a8:	e1ffff15 	stw	r7,-4(fp)
    18ac:	e0bfff17 	ldw	r2,-4(fp)
    18b0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    18b4:	00800034 	movhi	r2,0
    18b8:	108d5c04 	addi	r2,r2,13680
    18bc:	10800017 	ldw	r2,0(r2)
    18c0:	1004c03a 	cmpne	r2,r2,zero
    18c4:	1000041e 	bne	r2,zero,18d8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    18c8:	00c00034 	movhi	r3,0
    18cc:	18cd5c04 	addi	r3,r3,13680
    18d0:	e0bffb17 	ldw	r2,-20(fp)
    18d4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    18d8:	e0bffc17 	ldw	r2,-16(fp)
    18dc:	10800104 	addi	r2,r2,4
    18e0:	1007883a 	mov	r3,r2
    18e4:	008001c4 	movi	r2,7
    18e8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    18ec:	d8000015 	stw	zero,0(sp)
    18f0:	e13ffd17 	ldw	r4,-12(fp)
    18f4:	e17ffe17 	ldw	r5,-8(fp)
    18f8:	01800034 	movhi	r6,0
    18fc:	31860704 	addi	r6,r6,6172
    1900:	e1fffc17 	ldw	r7,-16(fp)
    1904:	0001e2c0 	call	1e2c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    1908:	e037883a 	mov	sp,fp
    190c:	dfc00117 	ldw	ra,4(sp)
    1910:	df000017 	ldw	fp,0(sp)
    1914:	dec00204 	addi	sp,sp,8
    1918:	f800283a 	ret

0000191c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    191c:	defffa04 	addi	sp,sp,-24
    1920:	dfc00515 	stw	ra,20(sp)
    1924:	df000415 	stw	fp,16(sp)
    1928:	df000404 	addi	fp,sp,16
    192c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    1930:	008000c4 	movi	r2,3
    1934:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    1938:	e13ffc17 	ldw	r4,-16(fp)
    193c:	014003f4 	movhi	r5,15
    1940:	29509004 	addi	r5,r5,16960
    1944:	00011ac0 	call	11ac <__mulsi3>
    1948:	100b883a 	mov	r5,r2
    194c:	0100bef4 	movhi	r4,763
    1950:	213c2004 	addi	r4,r4,-3968
    1954:	00006c40 	call	6c4 <__udivsi3>
    1958:	100b883a 	mov	r5,r2
    195c:	01200034 	movhi	r4,32768
    1960:	213fffc4 	addi	r4,r4,-1
    1964:	00006c40 	call	6c4 <__udivsi3>
    1968:	100b883a 	mov	r5,r2
    196c:	e13fff17 	ldw	r4,-4(fp)
    1970:	00006c40 	call	6c4 <__udivsi3>
    1974:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1978:	e0bffd17 	ldw	r2,-12(fp)
    197c:	1005003a 	cmpeq	r2,r2,zero
    1980:	10002a1e 	bne	r2,zero,1a2c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
    1984:	e03ffe15 	stw	zero,-8(fp)
    1988:	00001706 	br	19e8 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    198c:	00a00034 	movhi	r2,32768
    1990:	10bfffc4 	addi	r2,r2,-1
    1994:	10bfffc4 	addi	r2,r2,-1
    1998:	103ffe1e 	bne	r2,zero,1994 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    199c:	e13ffc17 	ldw	r4,-16(fp)
    19a0:	014003f4 	movhi	r5,15
    19a4:	29509004 	addi	r5,r5,16960
    19a8:	00011ac0 	call	11ac <__mulsi3>
    19ac:	100b883a 	mov	r5,r2
    19b0:	0100bef4 	movhi	r4,763
    19b4:	213c2004 	addi	r4,r4,-3968
    19b8:	00006c40 	call	6c4 <__udivsi3>
    19bc:	100b883a 	mov	r5,r2
    19c0:	01200034 	movhi	r4,32768
    19c4:	213fffc4 	addi	r4,r4,-1
    19c8:	00006c40 	call	6c4 <__udivsi3>
    19cc:	1007883a 	mov	r3,r2
    19d0:	e0bfff17 	ldw	r2,-4(fp)
    19d4:	10c5c83a 	sub	r2,r2,r3
    19d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    19dc:	e0bffe17 	ldw	r2,-8(fp)
    19e0:	10800044 	addi	r2,r2,1
    19e4:	e0bffe15 	stw	r2,-8(fp)
    19e8:	e0fffe17 	ldw	r3,-8(fp)
    19ec:	e0bffd17 	ldw	r2,-12(fp)
    19f0:	18bfe616 	blt	r3,r2,198c <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    19f4:	e13ffc17 	ldw	r4,-16(fp)
    19f8:	014003f4 	movhi	r5,15
    19fc:	29509004 	addi	r5,r5,16960
    1a00:	00011ac0 	call	11ac <__mulsi3>
    1a04:	100b883a 	mov	r5,r2
    1a08:	0100bef4 	movhi	r4,763
    1a0c:	213c2004 	addi	r4,r4,-3968
    1a10:	00006c40 	call	6c4 <__udivsi3>
    1a14:	1009883a 	mov	r4,r2
    1a18:	e17fff17 	ldw	r5,-4(fp)
    1a1c:	00011ac0 	call	11ac <__mulsi3>
    1a20:	10bfffc4 	addi	r2,r2,-1
    1a24:	103ffe1e 	bne	r2,zero,1a20 <alt_busy_sleep+0x104>
    1a28:	00000d06 	br	1a60 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1a2c:	e13ffc17 	ldw	r4,-16(fp)
    1a30:	014003f4 	movhi	r5,15
    1a34:	29509004 	addi	r5,r5,16960
    1a38:	00011ac0 	call	11ac <__mulsi3>
    1a3c:	100b883a 	mov	r5,r2
    1a40:	0100bef4 	movhi	r4,763
    1a44:	213c2004 	addi	r4,r4,-3968
    1a48:	00006c40 	call	6c4 <__udivsi3>
    1a4c:	1009883a 	mov	r4,r2
    1a50:	e17fff17 	ldw	r5,-4(fp)
    1a54:	00011ac0 	call	11ac <__mulsi3>
    1a58:	10bfffc4 	addi	r2,r2,-1
    1a5c:	00bffe16 	blt	zero,r2,1a58 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1a60:	0005883a 	mov	r2,zero
}
    1a64:	e037883a 	mov	sp,fp
    1a68:	dfc00117 	ldw	ra,4(sp)
    1a6c:	df000017 	ldw	fp,0(sp)
    1a70:	dec00204 	addi	sp,sp,8
    1a74:	f800283a 	ret

00001a78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1a78:	defff804 	addi	sp,sp,-32
    1a7c:	dfc00715 	stw	ra,28(sp)
    1a80:	df000615 	stw	fp,24(sp)
    1a84:	df000604 	addi	fp,sp,24
    1a88:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1a8c:	e0bffc17 	ldw	r2,-16(fp)
    1a90:	1004803a 	cmplt	r2,r2,zero
    1a94:	1000091e 	bne	r2,zero,1abc <close+0x44>
    1a98:	e13ffc17 	ldw	r4,-16(fp)
    1a9c:	01400304 	movi	r5,12
    1aa0:	00011ac0 	call	11ac <__mulsi3>
    1aa4:	1007883a 	mov	r3,r2
    1aa8:	00800034 	movhi	r2,0
    1aac:	108c3004 	addi	r2,r2,12480
    1ab0:	1887883a 	add	r3,r3,r2
    1ab4:	e0ffff15 	stw	r3,-4(fp)
    1ab8:	00000106 	br	1ac0 <close+0x48>
    1abc:	e03fff15 	stw	zero,-4(fp)
    1ac0:	e0bfff17 	ldw	r2,-4(fp)
    1ac4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    1ac8:	e0bffb17 	ldw	r2,-20(fp)
    1acc:	1005003a 	cmpeq	r2,r2,zero
    1ad0:	10001d1e 	bne	r2,zero,1b48 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1ad4:	e0bffb17 	ldw	r2,-20(fp)
    1ad8:	10800017 	ldw	r2,0(r2)
    1adc:	10800417 	ldw	r2,16(r2)
    1ae0:	1005003a 	cmpeq	r2,r2,zero
    1ae4:	1000071e 	bne	r2,zero,1b04 <close+0x8c>
    1ae8:	e0bffb17 	ldw	r2,-20(fp)
    1aec:	10800017 	ldw	r2,0(r2)
    1af0:	10800417 	ldw	r2,16(r2)
    1af4:	e13ffb17 	ldw	r4,-20(fp)
    1af8:	103ee83a 	callr	r2
    1afc:	e0bffe15 	stw	r2,-8(fp)
    1b00:	00000106 	br	1b08 <close+0x90>
    1b04:	e03ffe15 	stw	zero,-8(fp)
    1b08:	e0bffe17 	ldw	r2,-8(fp)
    1b0c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1b10:	e13ffc17 	ldw	r4,-16(fp)
    1b14:	000252c0 	call	252c <alt_release_fd>
    if (rval < 0)
    1b18:	e0bffa17 	ldw	r2,-24(fp)
    1b1c:	1004403a 	cmpge	r2,r2,zero
    1b20:	1000071e 	bne	r2,zero,1b40 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    1b24:	0001b780 	call	1b78 <alt_get_errno>
    1b28:	e0fffa17 	ldw	r3,-24(fp)
    1b2c:	00c7c83a 	sub	r3,zero,r3
    1b30:	10c00015 	stw	r3,0(r2)
      return -1;
    1b34:	00bfffc4 	movi	r2,-1
    1b38:	e0bffd15 	stw	r2,-12(fp)
    1b3c:	00000806 	br	1b60 <close+0xe8>
    }
    return 0;
    1b40:	e03ffd15 	stw	zero,-12(fp)
    1b44:	00000606 	br	1b60 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1b48:	0001b780 	call	1b78 <alt_get_errno>
    1b4c:	1007883a 	mov	r3,r2
    1b50:	00801444 	movi	r2,81
    1b54:	18800015 	stw	r2,0(r3)
    return -1;
    1b58:	00bfffc4 	movi	r2,-1
    1b5c:	e0bffd15 	stw	r2,-12(fp)
    1b60:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    1b64:	e037883a 	mov	sp,fp
    1b68:	dfc00117 	ldw	ra,4(sp)
    1b6c:	df000017 	ldw	fp,0(sp)
    1b70:	dec00204 	addi	sp,sp,8
    1b74:	f800283a 	ret

00001b78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1b78:	defffd04 	addi	sp,sp,-12
    1b7c:	dfc00215 	stw	ra,8(sp)
    1b80:	df000115 	stw	fp,4(sp)
    1b84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1b88:	00800034 	movhi	r2,0
    1b8c:	108c9704 	addi	r2,r2,12892
    1b90:	10800017 	ldw	r2,0(r2)
    1b94:	1005003a 	cmpeq	r2,r2,zero
    1b98:	1000061e 	bne	r2,zero,1bb4 <alt_get_errno+0x3c>
    1b9c:	00800034 	movhi	r2,0
    1ba0:	108c9704 	addi	r2,r2,12892
    1ba4:	10800017 	ldw	r2,0(r2)
    1ba8:	103ee83a 	callr	r2
    1bac:	e0bfff15 	stw	r2,-4(fp)
    1bb0:	00000306 	br	1bc0 <alt_get_errno+0x48>
    1bb4:	00800034 	movhi	r2,0
    1bb8:	108d5504 	addi	r2,r2,13652
    1bbc:	e0bfff15 	stw	r2,-4(fp)
    1bc0:	e0bfff17 	ldw	r2,-4(fp)
}
    1bc4:	e037883a 	mov	sp,fp
    1bc8:	dfc00117 	ldw	ra,4(sp)
    1bcc:	df000017 	ldw	fp,0(sp)
    1bd0:	dec00204 	addi	sp,sp,8
    1bd4:	f800283a 	ret

00001bd8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1bd8:	deffff04 	addi	sp,sp,-4
    1bdc:	df000015 	stw	fp,0(sp)
    1be0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1be4:	e037883a 	mov	sp,fp
    1be8:	df000017 	ldw	fp,0(sp)
    1bec:	dec00104 	addi	sp,sp,4
    1bf0:	f800283a 	ret

00001bf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1bf4:	defffc04 	addi	sp,sp,-16
    1bf8:	df000315 	stw	fp,12(sp)
    1bfc:	df000304 	addi	fp,sp,12
    1c00:	e13ffd15 	stw	r4,-12(fp)
    1c04:	e17ffe15 	stw	r5,-8(fp)
    1c08:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1c0c:	e0bfff17 	ldw	r2,-4(fp)
}
    1c10:	e037883a 	mov	sp,fp
    1c14:	df000017 	ldw	fp,0(sp)
    1c18:	dec00104 	addi	sp,sp,4
    1c1c:	f800283a 	ret

00001c20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1c20:	defff904 	addi	sp,sp,-28
    1c24:	dfc00615 	stw	ra,24(sp)
    1c28:	df000515 	stw	fp,20(sp)
    1c2c:	df000504 	addi	fp,sp,20
    1c30:	e13ffd15 	stw	r4,-12(fp)
    1c34:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1c38:	e0bffd17 	ldw	r2,-12(fp)
    1c3c:	1005003a 	cmpeq	r2,r2,zero
    1c40:	1000041e 	bne	r2,zero,1c54 <alt_dev_llist_insert+0x34>
    1c44:	e0bffd17 	ldw	r2,-12(fp)
    1c48:	10800217 	ldw	r2,8(r2)
    1c4c:	1004c03a 	cmpne	r2,r2,zero
    1c50:	1000071e 	bne	r2,zero,1c70 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    1c54:	0001cd40 	call	1cd4 <alt_get_errno>
    1c58:	1007883a 	mov	r3,r2
    1c5c:	00800584 	movi	r2,22
    1c60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1c64:	00bffa84 	movi	r2,-22
    1c68:	e0bfff15 	stw	r2,-4(fp)
    1c6c:	00001306 	br	1cbc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1c70:	e0fffd17 	ldw	r3,-12(fp)
    1c74:	e0bffe17 	ldw	r2,-8(fp)
    1c78:	e0bffb15 	stw	r2,-20(fp)
    1c7c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1c80:	e0fffc17 	ldw	r3,-16(fp)
    1c84:	e0bffb17 	ldw	r2,-20(fp)
    1c88:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1c8c:	e0bffb17 	ldw	r2,-20(fp)
    1c90:	10c00017 	ldw	r3,0(r2)
    1c94:	e0bffc17 	ldw	r2,-16(fp)
    1c98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1c9c:	e0bffb17 	ldw	r2,-20(fp)
    1ca0:	10c00017 	ldw	r3,0(r2)
    1ca4:	e0bffc17 	ldw	r2,-16(fp)
    1ca8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1cac:	e0fffb17 	ldw	r3,-20(fp)
    1cb0:	e0bffc17 	ldw	r2,-16(fp)
    1cb4:	18800015 	stw	r2,0(r3)

  return 0;  
    1cb8:	e03fff15 	stw	zero,-4(fp)
    1cbc:	e0bfff17 	ldw	r2,-4(fp)
}
    1cc0:	e037883a 	mov	sp,fp
    1cc4:	dfc00117 	ldw	ra,4(sp)
    1cc8:	df000017 	ldw	fp,0(sp)
    1ccc:	dec00204 	addi	sp,sp,8
    1cd0:	f800283a 	ret

00001cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1cd4:	defffd04 	addi	sp,sp,-12
    1cd8:	dfc00215 	stw	ra,8(sp)
    1cdc:	df000115 	stw	fp,4(sp)
    1ce0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1ce4:	00800034 	movhi	r2,0
    1ce8:	108c9704 	addi	r2,r2,12892
    1cec:	10800017 	ldw	r2,0(r2)
    1cf0:	1005003a 	cmpeq	r2,r2,zero
    1cf4:	1000061e 	bne	r2,zero,1d10 <alt_get_errno+0x3c>
    1cf8:	00800034 	movhi	r2,0
    1cfc:	108c9704 	addi	r2,r2,12892
    1d00:	10800017 	ldw	r2,0(r2)
    1d04:	103ee83a 	callr	r2
    1d08:	e0bfff15 	stw	r2,-4(fp)
    1d0c:	00000306 	br	1d1c <alt_get_errno+0x48>
    1d10:	00800034 	movhi	r2,0
    1d14:	108d5504 	addi	r2,r2,13652
    1d18:	e0bfff15 	stw	r2,-4(fp)
    1d1c:	e0bfff17 	ldw	r2,-4(fp)
}
    1d20:	e037883a 	mov	sp,fp
    1d24:	dfc00117 	ldw	ra,4(sp)
    1d28:	df000017 	ldw	fp,0(sp)
    1d2c:	dec00204 	addi	sp,sp,8
    1d30:	f800283a 	ret

00001d34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1d34:	defffd04 	addi	sp,sp,-12
    1d38:	dfc00215 	stw	ra,8(sp)
    1d3c:	df000115 	stw	fp,4(sp)
    1d40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1d44:	00bfff04 	movi	r2,-4
    1d48:	00c00034 	movhi	r3,0
    1d4c:	18cb9f04 	addi	r3,r3,11900
    1d50:	1885883a 	add	r2,r3,r2
    1d54:	e0bfff15 	stw	r2,-4(fp)
    1d58:	00000606 	br	1d74 <_do_ctors+0x40>
        (*ctor) (); 
    1d5c:	e0bfff17 	ldw	r2,-4(fp)
    1d60:	10800017 	ldw	r2,0(r2)
    1d64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1d68:	e0bfff17 	ldw	r2,-4(fp)
    1d6c:	10bfff04 	addi	r2,r2,-4
    1d70:	e0bfff15 	stw	r2,-4(fp)
    1d74:	e0ffff17 	ldw	r3,-4(fp)
    1d78:	00800034 	movhi	r2,0
    1d7c:	108b9e04 	addi	r2,r2,11896
    1d80:	18bff62e 	bgeu	r3,r2,1d5c <_do_ctors+0x28>
        (*ctor) (); 
}
    1d84:	e037883a 	mov	sp,fp
    1d88:	dfc00117 	ldw	ra,4(sp)
    1d8c:	df000017 	ldw	fp,0(sp)
    1d90:	dec00204 	addi	sp,sp,8
    1d94:	f800283a 	ret

00001d98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1d98:	defffd04 	addi	sp,sp,-12
    1d9c:	dfc00215 	stw	ra,8(sp)
    1da0:	df000115 	stw	fp,4(sp)
    1da4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1da8:	00bfff04 	movi	r2,-4
    1dac:	00c00034 	movhi	r3,0
    1db0:	18cb9f04 	addi	r3,r3,11900
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	e0bfff15 	stw	r2,-4(fp)
    1dbc:	00000606 	br	1dd8 <_do_dtors+0x40>
        (*dtor) (); 
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	10800017 	ldw	r2,0(r2)
    1dc8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1dcc:	e0bfff17 	ldw	r2,-4(fp)
    1dd0:	10bfff04 	addi	r2,r2,-4
    1dd4:	e0bfff15 	stw	r2,-4(fp)
    1dd8:	e0ffff17 	ldw	r3,-4(fp)
    1ddc:	00800034 	movhi	r2,0
    1de0:	108b9f04 	addi	r2,r2,11900
    1de4:	18bff62e 	bgeu	r3,r2,1dc0 <_do_dtors+0x28>
        (*dtor) (); 
}
    1de8:	e037883a 	mov	sp,fp
    1dec:	dfc00117 	ldw	ra,4(sp)
    1df0:	df000017 	ldw	fp,0(sp)
    1df4:	dec00204 	addi	sp,sp,8
    1df8:	f800283a 	ret

00001dfc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1dfc:	defffe04 	addi	sp,sp,-8
    1e00:	dfc00115 	stw	ra,4(sp)
    1e04:	df000015 	stw	fp,0(sp)
    1e08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1e0c:	0009883a 	mov	r4,zero
    1e10:	01420004 	movi	r5,2048
    1e14:	00029ec0 	call	29ec <alt_icache_flush>
#endif
}
    1e18:	e037883a 	mov	sp,fp
    1e1c:	dfc00117 	ldw	ra,4(sp)
    1e20:	df000017 	ldw	fp,0(sp)
    1e24:	dec00204 	addi	sp,sp,8
    1e28:	f800283a 	ret

00001e2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1e2c:	defff904 	addi	sp,sp,-28
    1e30:	dfc00615 	stw	ra,24(sp)
    1e34:	df000515 	stw	fp,20(sp)
    1e38:	df000504 	addi	fp,sp,20
    1e3c:	e13ffc15 	stw	r4,-16(fp)
    1e40:	e17ffd15 	stw	r5,-12(fp)
    1e44:	e1bffe15 	stw	r6,-8(fp)
    1e48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1e4c:	e0800217 	ldw	r2,8(fp)
    1e50:	d8800015 	stw	r2,0(sp)
    1e54:	e13ffc17 	ldw	r4,-16(fp)
    1e58:	e17ffd17 	ldw	r5,-12(fp)
    1e5c:	e1bffe17 	ldw	r6,-8(fp)
    1e60:	e1ffff17 	ldw	r7,-4(fp)
    1e64:	00020000 	call	2000 <alt_iic_isr_register>
}  
    1e68:	e037883a 	mov	sp,fp
    1e6c:	dfc00117 	ldw	ra,4(sp)
    1e70:	df000017 	ldw	fp,0(sp)
    1e74:	dec00204 	addi	sp,sp,8
    1e78:	f800283a 	ret

00001e7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    1e7c:	defff904 	addi	sp,sp,-28
    1e80:	df000615 	stw	fp,24(sp)
    1e84:	df000604 	addi	fp,sp,24
    1e88:	e13ffe15 	stw	r4,-8(fp)
    1e8c:	e17fff15 	stw	r5,-4(fp)
    1e90:	e0bfff17 	ldw	r2,-4(fp)
    1e94:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e98:	0005303a 	rdctl	r2,status
    1e9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1ea0:	e0fffb17 	ldw	r3,-20(fp)
    1ea4:	00bfff84 	movi	r2,-2
    1ea8:	1884703a 	and	r2,r3,r2
    1eac:	1001703a 	wrctl	status,r2
  
  return context;
    1eb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1eb4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    1eb8:	e0fffc17 	ldw	r3,-16(fp)
    1ebc:	00800044 	movi	r2,1
    1ec0:	10c4983a 	sll	r2,r2,r3
    1ec4:	1007883a 	mov	r3,r2
    1ec8:	00800034 	movhi	r2,0
    1ecc:	108d5b04 	addi	r2,r2,13676
    1ed0:	10800017 	ldw	r2,0(r2)
    1ed4:	1886b03a 	or	r3,r3,r2
    1ed8:	00800034 	movhi	r2,0
    1edc:	108d5b04 	addi	r2,r2,13676
    1ee0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1ee4:	00800034 	movhi	r2,0
    1ee8:	108d5b04 	addi	r2,r2,13676
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	100170fa 	wrctl	ienable,r2
    1ef4:	e0bffd17 	ldw	r2,-12(fp)
    1ef8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1efc:	e0bffa17 	ldw	r2,-24(fp)
    1f00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1f04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    1f08:	e037883a 	mov	sp,fp
    1f0c:	df000017 	ldw	fp,0(sp)
    1f10:	dec00104 	addi	sp,sp,4
    1f14:	f800283a 	ret

00001f18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1f18:	defff904 	addi	sp,sp,-28
    1f1c:	df000615 	stw	fp,24(sp)
    1f20:	df000604 	addi	fp,sp,24
    1f24:	e13ffe15 	stw	r4,-8(fp)
    1f28:	e17fff15 	stw	r5,-4(fp)
    1f2c:	e0bfff17 	ldw	r2,-4(fp)
    1f30:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1f34:	0005303a 	rdctl	r2,status
    1f38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1f3c:	e0fffb17 	ldw	r3,-20(fp)
    1f40:	00bfff84 	movi	r2,-2
    1f44:	1884703a 	and	r2,r3,r2
    1f48:	1001703a 	wrctl	status,r2
  
  return context;
    1f4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1f50:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    1f54:	e0fffc17 	ldw	r3,-16(fp)
    1f58:	00800044 	movi	r2,1
    1f5c:	10c4983a 	sll	r2,r2,r3
    1f60:	0084303a 	nor	r2,zero,r2
    1f64:	1007883a 	mov	r3,r2
    1f68:	00800034 	movhi	r2,0
    1f6c:	108d5b04 	addi	r2,r2,13676
    1f70:	10800017 	ldw	r2,0(r2)
    1f74:	1886703a 	and	r3,r3,r2
    1f78:	00800034 	movhi	r2,0
    1f7c:	108d5b04 	addi	r2,r2,13676
    1f80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1f84:	00800034 	movhi	r2,0
    1f88:	108d5b04 	addi	r2,r2,13676
    1f8c:	10800017 	ldw	r2,0(r2)
    1f90:	100170fa 	wrctl	ienable,r2
    1f94:	e0bffd17 	ldw	r2,-12(fp)
    1f98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1f9c:	e0bffa17 	ldw	r2,-24(fp)
    1fa0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1fa4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    1fa8:	e037883a 	mov	sp,fp
    1fac:	df000017 	ldw	fp,0(sp)
    1fb0:	dec00104 	addi	sp,sp,4
    1fb4:	f800283a 	ret

00001fb8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    1fb8:	defffc04 	addi	sp,sp,-16
    1fbc:	df000315 	stw	fp,12(sp)
    1fc0:	df000304 	addi	fp,sp,12
    1fc4:	e13ffe15 	stw	r4,-8(fp)
    1fc8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    1fcc:	000530fa 	rdctl	r2,ienable
    1fd0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    1fd4:	e0ffff17 	ldw	r3,-4(fp)
    1fd8:	00800044 	movi	r2,1
    1fdc:	10c4983a 	sll	r2,r2,r3
    1fe0:	1007883a 	mov	r3,r2
    1fe4:	e0bffd17 	ldw	r2,-12(fp)
    1fe8:	1884703a 	and	r2,r3,r2
    1fec:	1004c03a 	cmpne	r2,r2,zero
}
    1ff0:	e037883a 	mov	sp,fp
    1ff4:	df000017 	ldw	fp,0(sp)
    1ff8:	dec00104 	addi	sp,sp,4
    1ffc:	f800283a 	ret

00002000 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2000:	defff404 	addi	sp,sp,-48
    2004:	dfc00b15 	stw	ra,44(sp)
    2008:	df000a15 	stw	fp,40(sp)
    200c:	df000a04 	addi	fp,sp,40
    2010:	e13ffb15 	stw	r4,-20(fp)
    2014:	e17ffc15 	stw	r5,-16(fp)
    2018:	e1bffd15 	stw	r6,-12(fp)
    201c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    2020:	00bffa84 	movi	r2,-22
    2024:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2028:	e0bffc17 	ldw	r2,-16(fp)
    202c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2030:	e0bff917 	ldw	r2,-28(fp)
    2034:	10800808 	cmpgei	r2,r2,32
    2038:	1000291e 	bne	r2,zero,20e0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    203c:	0005303a 	rdctl	r2,status
    2040:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2044:	e0fff717 	ldw	r3,-36(fp)
    2048:	00bfff84 	movi	r2,-2
    204c:	1884703a 	and	r2,r3,r2
    2050:	1001703a 	wrctl	status,r2
  
  return context;
    2054:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    2058:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    205c:	e0bff917 	ldw	r2,-28(fp)
    2060:	00c00034 	movhi	r3,0
    2064:	18cd5e04 	addi	r3,r3,13688
    2068:	100490fa 	slli	r2,r2,3
    206c:	10c7883a 	add	r3,r2,r3
    2070:	e0bffd17 	ldw	r2,-12(fp)
    2074:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    2078:	e0bff917 	ldw	r2,-28(fp)
    207c:	00c00034 	movhi	r3,0
    2080:	18cd5e04 	addi	r3,r3,13688
    2084:	100490fa 	slli	r2,r2,3
    2088:	10c5883a 	add	r2,r2,r3
    208c:	10c00104 	addi	r3,r2,4
    2090:	e0bffe17 	ldw	r2,-8(fp)
    2094:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2098:	e0bffd17 	ldw	r2,-12(fp)
    209c:	1005003a 	cmpeq	r2,r2,zero
    20a0:	1000051e 	bne	r2,zero,20b8 <alt_iic_isr_register+0xb8>
    20a4:	e17ff917 	ldw	r5,-28(fp)
    20a8:	e13ffb17 	ldw	r4,-20(fp)
    20ac:	0001e7c0 	call	1e7c <alt_ic_irq_enable>
    20b0:	e0bfff15 	stw	r2,-4(fp)
    20b4:	00000406 	br	20c8 <alt_iic_isr_register+0xc8>
    20b8:	e17ff917 	ldw	r5,-28(fp)
    20bc:	e13ffb17 	ldw	r4,-20(fp)
    20c0:	0001f180 	call	1f18 <alt_ic_irq_disable>
    20c4:	e0bfff15 	stw	r2,-4(fp)
    20c8:	e0bfff17 	ldw	r2,-4(fp)
    20cc:	e0bffa15 	stw	r2,-24(fp)
    20d0:	e0bff817 	ldw	r2,-32(fp)
    20d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    20d8:	e0bff617 	ldw	r2,-40(fp)
    20dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    20e0:	e0bffa17 	ldw	r2,-24(fp)
}
    20e4:	e037883a 	mov	sp,fp
    20e8:	dfc00117 	ldw	ra,4(sp)
    20ec:	df000017 	ldw	fp,0(sp)
    20f0:	dec00204 	addi	sp,sp,8
    20f4:	f800283a 	ret

000020f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    20f8:	defff804 	addi	sp,sp,-32
    20fc:	dfc00715 	stw	ra,28(sp)
    2100:	df000615 	stw	fp,24(sp)
    2104:	dc000515 	stw	r16,20(sp)
    2108:	df000504 	addi	fp,sp,20
    210c:	e13ffc15 	stw	r4,-16(fp)
    2110:	e17ffd15 	stw	r5,-12(fp)
    2114:	e1bffe15 	stw	r6,-8(fp)
    2118:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    211c:	e13ffd17 	ldw	r4,-12(fp)
    2120:	e17ffe17 	ldw	r5,-8(fp)
    2124:	e1bfff17 	ldw	r6,-4(fp)
    2128:	00023400 	call	2340 <open>
    212c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2130:	e0bffb17 	ldw	r2,-20(fp)
    2134:	1004803a 	cmplt	r2,r2,zero
    2138:	10001f1e 	bne	r2,zero,21b8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    213c:	e13ffb17 	ldw	r4,-20(fp)
    2140:	04000034 	movhi	r16,0
    2144:	840c3004 	addi	r16,r16,12480
    2148:	01400304 	movi	r5,12
    214c:	00011ac0 	call	11ac <__mulsi3>
    2150:	1405883a 	add	r2,r2,r16
    2154:	10c00017 	ldw	r3,0(r2)
    2158:	e0bffc17 	ldw	r2,-16(fp)
    215c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2160:	e13ffb17 	ldw	r4,-20(fp)
    2164:	04000034 	movhi	r16,0
    2168:	840c3004 	addi	r16,r16,12480
    216c:	01400304 	movi	r5,12
    2170:	00011ac0 	call	11ac <__mulsi3>
    2174:	1405883a 	add	r2,r2,r16
    2178:	10800104 	addi	r2,r2,4
    217c:	10c00017 	ldw	r3,0(r2)
    2180:	e0bffc17 	ldw	r2,-16(fp)
    2184:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2188:	e13ffb17 	ldw	r4,-20(fp)
    218c:	04000034 	movhi	r16,0
    2190:	840c3004 	addi	r16,r16,12480
    2194:	01400304 	movi	r5,12
    2198:	00011ac0 	call	11ac <__mulsi3>
    219c:	1405883a 	add	r2,r2,r16
    21a0:	10800204 	addi	r2,r2,8
    21a4:	10c00017 	ldw	r3,0(r2)
    21a8:	e0bffc17 	ldw	r2,-16(fp)
    21ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    21b0:	e13ffb17 	ldw	r4,-20(fp)
    21b4:	000252c0 	call	252c <alt_release_fd>
  }
} 
    21b8:	e037883a 	mov	sp,fp
    21bc:	dfc00217 	ldw	ra,8(sp)
    21c0:	df000117 	ldw	fp,4(sp)
    21c4:	dc000017 	ldw	r16,0(sp)
    21c8:	dec00304 	addi	sp,sp,12
    21cc:	f800283a 	ret

000021d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    21d0:	defffb04 	addi	sp,sp,-20
    21d4:	dfc00415 	stw	ra,16(sp)
    21d8:	df000315 	stw	fp,12(sp)
    21dc:	df000304 	addi	fp,sp,12
    21e0:	e13ffd15 	stw	r4,-12(fp)
    21e4:	e17ffe15 	stw	r5,-8(fp)
    21e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    21ec:	01000034 	movhi	r4,0
    21f0:	210c3304 	addi	r4,r4,12492
    21f4:	e17ffd17 	ldw	r5,-12(fp)
    21f8:	01800044 	movi	r6,1
    21fc:	01c07fc4 	movi	r7,511
    2200:	00020f80 	call	20f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2204:	01000034 	movhi	r4,0
    2208:	210c3004 	addi	r4,r4,12480
    220c:	e17ffe17 	ldw	r5,-8(fp)
    2210:	000d883a 	mov	r6,zero
    2214:	01c07fc4 	movi	r7,511
    2218:	00020f80 	call	20f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    221c:	01000034 	movhi	r4,0
    2220:	210c3604 	addi	r4,r4,12504
    2224:	e17fff17 	ldw	r5,-4(fp)
    2228:	01800044 	movi	r6,1
    222c:	01c07fc4 	movi	r7,511
    2230:	00020f80 	call	20f8 <alt_open_fd>
}  
    2234:	e037883a 	mov	sp,fp
    2238:	dfc00117 	ldw	ra,4(sp)
    223c:	df000017 	ldw	fp,0(sp)
    2240:	dec00204 	addi	sp,sp,8
    2244:	f800283a 	ret

00002248 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2248:	defffa04 	addi	sp,sp,-24
    224c:	dfc00515 	stw	ra,20(sp)
    2250:	df000415 	stw	fp,16(sp)
    2254:	dc000315 	stw	r16,12(sp)
    2258:	df000304 	addi	fp,sp,12
    225c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2260:	e0bffe17 	ldw	r2,-8(fp)
    2264:	10800217 	ldw	r2,8(r2)
    2268:	10d00034 	orhi	r3,r2,16384
    226c:	e0bffe17 	ldw	r2,-8(fp)
    2270:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2274:	e03ffd15 	stw	zero,-12(fp)
    2278:	00002306 	br	2308 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    227c:	e13ffd17 	ldw	r4,-12(fp)
    2280:	04000034 	movhi	r16,0
    2284:	840c3004 	addi	r16,r16,12480
    2288:	01400304 	movi	r5,12
    228c:	00011ac0 	call	11ac <__mulsi3>
    2290:	1405883a 	add	r2,r2,r16
    2294:	10c00017 	ldw	r3,0(r2)
    2298:	e0bffe17 	ldw	r2,-8(fp)
    229c:	10800017 	ldw	r2,0(r2)
    22a0:	1880161e 	bne	r3,r2,22fc <alt_file_locked+0xb4>
    22a4:	e13ffd17 	ldw	r4,-12(fp)
    22a8:	04000034 	movhi	r16,0
    22ac:	840c3004 	addi	r16,r16,12480
    22b0:	01400304 	movi	r5,12
    22b4:	00011ac0 	call	11ac <__mulsi3>
    22b8:	1405883a 	add	r2,r2,r16
    22bc:	10800204 	addi	r2,r2,8
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	1004403a 	cmpge	r2,r2,zero
    22c8:	10000c1e 	bne	r2,zero,22fc <alt_file_locked+0xb4>
    22cc:	e13ffd17 	ldw	r4,-12(fp)
    22d0:	01400304 	movi	r5,12
    22d4:	00011ac0 	call	11ac <__mulsi3>
    22d8:	1007883a 	mov	r3,r2
    22dc:	00800034 	movhi	r2,0
    22e0:	108c3004 	addi	r2,r2,12480
    22e4:	1887883a 	add	r3,r3,r2
    22e8:	e0bffe17 	ldw	r2,-8(fp)
    22ec:	18800326 	beq	r3,r2,22fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    22f0:	00bffcc4 	movi	r2,-13
    22f4:	e0bfff15 	stw	r2,-4(fp)
    22f8:	00000a06 	br	2324 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    22fc:	e0bffd17 	ldw	r2,-12(fp)
    2300:	10800044 	addi	r2,r2,1
    2304:	e0bffd15 	stw	r2,-12(fp)
    2308:	00800034 	movhi	r2,0
    230c:	108c9604 	addi	r2,r2,12888
    2310:	10800017 	ldw	r2,0(r2)
    2314:	1007883a 	mov	r3,r2
    2318:	e0bffd17 	ldw	r2,-12(fp)
    231c:	18bfd72e 	bgeu	r3,r2,227c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2320:	e03fff15 	stw	zero,-4(fp)
    2324:	e0bfff17 	ldw	r2,-4(fp)
}
    2328:	e037883a 	mov	sp,fp
    232c:	dfc00217 	ldw	ra,8(sp)
    2330:	df000117 	ldw	fp,4(sp)
    2334:	dc000017 	ldw	r16,0(sp)
    2338:	dec00304 	addi	sp,sp,12
    233c:	f800283a 	ret

00002340 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2340:	defff404 	addi	sp,sp,-48
    2344:	dfc00b15 	stw	ra,44(sp)
    2348:	df000a15 	stw	fp,40(sp)
    234c:	df000a04 	addi	fp,sp,40
    2350:	e13ffb15 	stw	r4,-20(fp)
    2354:	e17ffc15 	stw	r5,-16(fp)
    2358:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    235c:	00bfffc4 	movi	r2,-1
    2360:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    2364:	00bffb44 	movi	r2,-19
    2368:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    236c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2370:	e13ffb17 	ldw	r4,-20(fp)
    2374:	01400034 	movhi	r5,0
    2378:	294c9404 	addi	r5,r5,12880
    237c:	00027680 	call	2768 <alt_find_dev>
    2380:	e0bffa15 	stw	r2,-24(fp)
    2384:	e0bffa17 	ldw	r2,-24(fp)
    2388:	1004c03a 	cmpne	r2,r2,zero
    238c:	1000051e 	bne	r2,zero,23a4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2390:	e13ffb17 	ldw	r4,-20(fp)
    2394:	00027fc0 	call	27fc <alt_find_file>
    2398:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    239c:	00800044 	movi	r2,1
    23a0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    23a4:	e0bffa17 	ldw	r2,-24(fp)
    23a8:	1005003a 	cmpeq	r2,r2,zero
    23ac:	1000311e 	bne	r2,zero,2474 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    23b0:	e13ffa17 	ldw	r4,-24(fp)
    23b4:	000291c0 	call	291c <alt_get_fd>
    23b8:	e0bff815 	stw	r2,-32(fp)
    23bc:	e0bff817 	ldw	r2,-32(fp)
    23c0:	1004403a 	cmpge	r2,r2,zero
    23c4:	1000031e 	bne	r2,zero,23d4 <open+0x94>
    {
      status = index;
    23c8:	e0bff817 	ldw	r2,-32(fp)
    23cc:	e0bff715 	stw	r2,-36(fp)
    23d0:	00002a06 	br	247c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    23d4:	e13ff817 	ldw	r4,-32(fp)
    23d8:	01400304 	movi	r5,12
    23dc:	00011ac0 	call	11ac <__mulsi3>
    23e0:	1007883a 	mov	r3,r2
    23e4:	00800034 	movhi	r2,0
    23e8:	108c3004 	addi	r2,r2,12480
    23ec:	1885883a 	add	r2,r3,r2
    23f0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    23f4:	e0fffc17 	ldw	r3,-16(fp)
    23f8:	00900034 	movhi	r2,16384
    23fc:	10bfffc4 	addi	r2,r2,-1
    2400:	1886703a 	and	r3,r3,r2
    2404:	e0bff917 	ldw	r2,-28(fp)
    2408:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    240c:	e0bff617 	ldw	r2,-40(fp)
    2410:	1004c03a 	cmpne	r2,r2,zero
    2414:	1000061e 	bne	r2,zero,2430 <open+0xf0>
    2418:	e13ff917 	ldw	r4,-28(fp)
    241c:	00022480 	call	2248 <alt_file_locked>
    2420:	e0bff715 	stw	r2,-36(fp)
    2424:	e0bff717 	ldw	r2,-36(fp)
    2428:	1004803a 	cmplt	r2,r2,zero
    242c:	1000131e 	bne	r2,zero,247c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2430:	e0bffa17 	ldw	r2,-24(fp)
    2434:	10800317 	ldw	r2,12(r2)
    2438:	1005003a 	cmpeq	r2,r2,zero
    243c:	1000091e 	bne	r2,zero,2464 <open+0x124>
    2440:	e0bffa17 	ldw	r2,-24(fp)
    2444:	10800317 	ldw	r2,12(r2)
    2448:	e13ff917 	ldw	r4,-28(fp)
    244c:	e17ffb17 	ldw	r5,-20(fp)
    2450:	e1bffc17 	ldw	r6,-16(fp)
    2454:	e1fffd17 	ldw	r7,-12(fp)
    2458:	103ee83a 	callr	r2
    245c:	e0bfff15 	stw	r2,-4(fp)
    2460:	00000106 	br	2468 <open+0x128>
    2464:	e03fff15 	stw	zero,-4(fp)
    2468:	e0bfff17 	ldw	r2,-4(fp)
    246c:	e0bff715 	stw	r2,-36(fp)
    2470:	00000206 	br	247c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2474:	00bffb44 	movi	r2,-19
    2478:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    247c:	e0bff717 	ldw	r2,-36(fp)
    2480:	1004403a 	cmpge	r2,r2,zero
    2484:	1000091e 	bne	r2,zero,24ac <open+0x16c>
  {
    alt_release_fd (index);  
    2488:	e13ff817 	ldw	r4,-32(fp)
    248c:	000252c0 	call	252c <alt_release_fd>
    ALT_ERRNO = -status;
    2490:	00024cc0 	call	24cc <alt_get_errno>
    2494:	e0fff717 	ldw	r3,-36(fp)
    2498:	00c7c83a 	sub	r3,zero,r3
    249c:	10c00015 	stw	r3,0(r2)
    return -1;
    24a0:	00bfffc4 	movi	r2,-1
    24a4:	e0bffe15 	stw	r2,-8(fp)
    24a8:	00000206 	br	24b4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    24ac:	e0bff817 	ldw	r2,-32(fp)
    24b0:	e0bffe15 	stw	r2,-8(fp)
    24b4:	e0bffe17 	ldw	r2,-8(fp)
}
    24b8:	e037883a 	mov	sp,fp
    24bc:	dfc00117 	ldw	ra,4(sp)
    24c0:	df000017 	ldw	fp,0(sp)
    24c4:	dec00204 	addi	sp,sp,8
    24c8:	f800283a 	ret

000024cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    24cc:	defffd04 	addi	sp,sp,-12
    24d0:	dfc00215 	stw	ra,8(sp)
    24d4:	df000115 	stw	fp,4(sp)
    24d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    24dc:	00800034 	movhi	r2,0
    24e0:	108c9704 	addi	r2,r2,12892
    24e4:	10800017 	ldw	r2,0(r2)
    24e8:	1005003a 	cmpeq	r2,r2,zero
    24ec:	1000061e 	bne	r2,zero,2508 <alt_get_errno+0x3c>
    24f0:	00800034 	movhi	r2,0
    24f4:	108c9704 	addi	r2,r2,12892
    24f8:	10800017 	ldw	r2,0(r2)
    24fc:	103ee83a 	callr	r2
    2500:	e0bfff15 	stw	r2,-4(fp)
    2504:	00000306 	br	2514 <alt_get_errno+0x48>
    2508:	00800034 	movhi	r2,0
    250c:	108d5504 	addi	r2,r2,13652
    2510:	e0bfff15 	stw	r2,-4(fp)
    2514:	e0bfff17 	ldw	r2,-4(fp)
}
    2518:	e037883a 	mov	sp,fp
    251c:	dfc00117 	ldw	ra,4(sp)
    2520:	df000017 	ldw	fp,0(sp)
    2524:	dec00204 	addi	sp,sp,8
    2528:	f800283a 	ret

0000252c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    252c:	defffc04 	addi	sp,sp,-16
    2530:	dfc00315 	stw	ra,12(sp)
    2534:	df000215 	stw	fp,8(sp)
    2538:	dc000115 	stw	r16,4(sp)
    253c:	df000104 	addi	fp,sp,4
    2540:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2544:	e0bfff17 	ldw	r2,-4(fp)
    2548:	108000d0 	cmplti	r2,r2,3
    254c:	10000f1e 	bne	r2,zero,258c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    2550:	e13fff17 	ldw	r4,-4(fp)
    2554:	04000034 	movhi	r16,0
    2558:	840c3004 	addi	r16,r16,12480
    255c:	01400304 	movi	r5,12
    2560:	00011ac0 	call	11ac <__mulsi3>
    2564:	1405883a 	add	r2,r2,r16
    2568:	10800204 	addi	r2,r2,8
    256c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2570:	e13fff17 	ldw	r4,-4(fp)
    2574:	04000034 	movhi	r16,0
    2578:	840c3004 	addi	r16,r16,12480
    257c:	01400304 	movi	r5,12
    2580:	00011ac0 	call	11ac <__mulsi3>
    2584:	1405883a 	add	r2,r2,r16
    2588:	10000015 	stw	zero,0(r2)
  }
}
    258c:	e037883a 	mov	sp,fp
    2590:	dfc00217 	ldw	ra,8(sp)
    2594:	df000117 	ldw	fp,4(sp)
    2598:	dc000017 	ldw	r16,0(sp)
    259c:	dec00304 	addi	sp,sp,12
    25a0:	f800283a 	ret

000025a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    25a4:	defffa04 	addi	sp,sp,-24
    25a8:	df000515 	stw	fp,20(sp)
    25ac:	df000504 	addi	fp,sp,20
    25b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25b4:	0005303a 	rdctl	r2,status
    25b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25bc:	e0fffd17 	ldw	r3,-12(fp)
    25c0:	00bfff84 	movi	r2,-2
    25c4:	1884703a 	and	r2,r3,r2
    25c8:	1001703a 	wrctl	status,r2
  
  return context;
    25cc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    25d0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    25d4:	e0bfff17 	ldw	r2,-4(fp)
    25d8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    25dc:	e0bffc17 	ldw	r2,-16(fp)
    25e0:	10c00017 	ldw	r3,0(r2)
    25e4:	e0bffc17 	ldw	r2,-16(fp)
    25e8:	10800117 	ldw	r2,4(r2)
    25ec:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    25f0:	e0bffc17 	ldw	r2,-16(fp)
    25f4:	10c00117 	ldw	r3,4(r2)
    25f8:	e0bffc17 	ldw	r2,-16(fp)
    25fc:	10800017 	ldw	r2,0(r2)
    2600:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2604:	e0fffc17 	ldw	r3,-16(fp)
    2608:	e0bffc17 	ldw	r2,-16(fp)
    260c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    2610:	e0fffc17 	ldw	r3,-16(fp)
    2614:	e0bffc17 	ldw	r2,-16(fp)
    2618:	18800015 	stw	r2,0(r3)
    261c:	e0bffe17 	ldw	r2,-8(fp)
    2620:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2624:	e0bffb17 	ldw	r2,-20(fp)
    2628:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    262c:	e037883a 	mov	sp,fp
    2630:	df000017 	ldw	fp,0(sp)
    2634:	dec00104 	addi	sp,sp,4
    2638:	f800283a 	ret

0000263c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    263c:	defffb04 	addi	sp,sp,-20
    2640:	dfc00415 	stw	ra,16(sp)
    2644:	df000315 	stw	fp,12(sp)
    2648:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    264c:	d0a00917 	ldw	r2,-32732(gp)
    2650:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2654:	d0a0cd17 	ldw	r2,-31948(gp)
    2658:	10800044 	addi	r2,r2,1
    265c:	d0a0cd15 	stw	r2,-31948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2660:	00003106 	br	2728 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    2664:	e0bffe17 	ldw	r2,-8(fp)
    2668:	10800017 	ldw	r2,0(r2)
    266c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2670:	e0bffe17 	ldw	r2,-8(fp)
    2674:	10800403 	ldbu	r2,16(r2)
    2678:	10803fcc 	andi	r2,r2,255
    267c:	1005003a 	cmpeq	r2,r2,zero
    2680:	1000051e 	bne	r2,zero,2698 <alt_tick+0x5c>
    2684:	d0a0cd17 	ldw	r2,-31948(gp)
    2688:	1004c03a 	cmpne	r2,r2,zero
    268c:	1000021e 	bne	r2,zero,2698 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    2690:	e0bffe17 	ldw	r2,-8(fp)
    2694:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2698:	e0bffe17 	ldw	r2,-8(fp)
    269c:	10c00217 	ldw	r3,8(r2)
    26a0:	d0a0cd17 	ldw	r2,-31948(gp)
    26a4:	10c01e36 	bltu	r2,r3,2720 <alt_tick+0xe4>
    26a8:	e0bffe17 	ldw	r2,-8(fp)
    26ac:	10800403 	ldbu	r2,16(r2)
    26b0:	10803fcc 	andi	r2,r2,255
    26b4:	1004c03a 	cmpne	r2,r2,zero
    26b8:	1000191e 	bne	r2,zero,2720 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    26bc:	e0bffe17 	ldw	r2,-8(fp)
    26c0:	10c00317 	ldw	r3,12(r2)
    26c4:	e0bffe17 	ldw	r2,-8(fp)
    26c8:	11000517 	ldw	r4,20(r2)
    26cc:	183ee83a 	callr	r3
    26d0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    26d4:	e0bffd17 	ldw	r2,-12(fp)
    26d8:	1004c03a 	cmpne	r2,r2,zero
    26dc:	1000031e 	bne	r2,zero,26ec <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    26e0:	e13ffe17 	ldw	r4,-8(fp)
    26e4:	00025a40 	call	25a4 <alt_alarm_stop>
    26e8:	00000d06 	br	2720 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    26ec:	e0bffe17 	ldw	r2,-8(fp)
    26f0:	10c00217 	ldw	r3,8(r2)
    26f4:	e0bffd17 	ldw	r2,-12(fp)
    26f8:	1887883a 	add	r3,r3,r2
    26fc:	e0bffe17 	ldw	r2,-8(fp)
    2700:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2704:	e0bffe17 	ldw	r2,-8(fp)
    2708:	10c00217 	ldw	r3,8(r2)
    270c:	d0a0cd17 	ldw	r2,-31948(gp)
    2710:	1880032e 	bgeu	r3,r2,2720 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    2714:	e0fffe17 	ldw	r3,-8(fp)
    2718:	00800044 	movi	r2,1
    271c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    2720:	e0bfff17 	ldw	r2,-4(fp)
    2724:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2728:	d0e00904 	addi	r3,gp,-32732
    272c:	e0bffe17 	ldw	r2,-8(fp)
    2730:	10ffcc1e 	bne	r2,r3,2664 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2734:	e037883a 	mov	sp,fp
    2738:	dfc00117 	ldw	ra,4(sp)
    273c:	df000017 	ldw	fp,0(sp)
    2740:	dec00204 	addi	sp,sp,8
    2744:	f800283a 	ret

00002748 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2748:	deffff04 	addi	sp,sp,-4
    274c:	df000015 	stw	fp,0(sp)
    2750:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2754:	000170fa 	wrctl	ienable,zero
}
    2758:	e037883a 	mov	sp,fp
    275c:	df000017 	ldw	fp,0(sp)
    2760:	dec00104 	addi	sp,sp,4
    2764:	f800283a 	ret

00002768 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2768:	defff904 	addi	sp,sp,-28
    276c:	dfc00615 	stw	ra,24(sp)
    2770:	df000515 	stw	fp,20(sp)
    2774:	df000504 	addi	fp,sp,20
    2778:	e13ffd15 	stw	r4,-12(fp)
    277c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2780:	e0bffe17 	ldw	r2,-8(fp)
    2784:	10800017 	ldw	r2,0(r2)
    2788:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    278c:	e13ffd17 	ldw	r4,-12(fp)
    2790:	00008340 	call	834 <strlen>
    2794:	10800044 	addi	r2,r2,1
    2798:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    279c:	00000d06 	br	27d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    27a0:	e0bffc17 	ldw	r2,-16(fp)
    27a4:	11000217 	ldw	r4,8(r2)
    27a8:	e1bffb17 	ldw	r6,-20(fp)
    27ac:	e17ffd17 	ldw	r5,-12(fp)
    27b0:	0002ab00 	call	2ab0 <memcmp>
    27b4:	1004c03a 	cmpne	r2,r2,zero
    27b8:	1000031e 	bne	r2,zero,27c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    27bc:	e0bffc17 	ldw	r2,-16(fp)
    27c0:	e0bfff15 	stw	r2,-4(fp)
    27c4:	00000706 	br	27e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    27c8:	e0bffc17 	ldw	r2,-16(fp)
    27cc:	10800017 	ldw	r2,0(r2)
    27d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    27d4:	e0fffe17 	ldw	r3,-8(fp)
    27d8:	e0bffc17 	ldw	r2,-16(fp)
    27dc:	10fff01e 	bne	r2,r3,27a0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    27e0:	e03fff15 	stw	zero,-4(fp)
    27e4:	e0bfff17 	ldw	r2,-4(fp)
}
    27e8:	e037883a 	mov	sp,fp
    27ec:	dfc00117 	ldw	ra,4(sp)
    27f0:	df000017 	ldw	fp,0(sp)
    27f4:	dec00204 	addi	sp,sp,8
    27f8:	f800283a 	ret

000027fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    27fc:	defffa04 	addi	sp,sp,-24
    2800:	dfc00515 	stw	ra,20(sp)
    2804:	df000415 	stw	fp,16(sp)
    2808:	df000404 	addi	fp,sp,16
    280c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2810:	00800034 	movhi	r2,0
    2814:	108c9204 	addi	r2,r2,12872
    2818:	10800017 	ldw	r2,0(r2)
    281c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2820:	00003306 	br	28f0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    2824:	e0bffd17 	ldw	r2,-12(fp)
    2828:	11000217 	ldw	r4,8(r2)
    282c:	00008340 	call	834 <strlen>
    2830:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    2834:	e0bffd17 	ldw	r2,-12(fp)
    2838:	10c00217 	ldw	r3,8(r2)
    283c:	e0bffc17 	ldw	r2,-16(fp)
    2840:	1885883a 	add	r2,r3,r2
    2844:	10bfffc4 	addi	r2,r2,-1
    2848:	10800003 	ldbu	r2,0(r2)
    284c:	10803fcc 	andi	r2,r2,255
    2850:	1080201c 	xori	r2,r2,128
    2854:	10bfe004 	addi	r2,r2,-128
    2858:	10800bd8 	cmpnei	r2,r2,47
    285c:	1000031e 	bne	r2,zero,286c <alt_find_file+0x70>
    {
      len -= 1;
    2860:	e0bffc17 	ldw	r2,-16(fp)
    2864:	10bfffc4 	addi	r2,r2,-1
    2868:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    286c:	e0bffc17 	ldw	r2,-16(fp)
    2870:	1007883a 	mov	r3,r2
    2874:	e0bffe17 	ldw	r2,-8(fp)
    2878:	1885883a 	add	r2,r3,r2
    287c:	10800003 	ldbu	r2,0(r2)
    2880:	10803fcc 	andi	r2,r2,255
    2884:	1080201c 	xori	r2,r2,128
    2888:	10bfe004 	addi	r2,r2,-128
    288c:	10800be0 	cmpeqi	r2,r2,47
    2890:	10000a1e 	bne	r2,zero,28bc <alt_find_file+0xc0>
    2894:	e0bffc17 	ldw	r2,-16(fp)
    2898:	1007883a 	mov	r3,r2
    289c:	e0bffe17 	ldw	r2,-8(fp)
    28a0:	1885883a 	add	r2,r3,r2
    28a4:	10800003 	ldbu	r2,0(r2)
    28a8:	10803fcc 	andi	r2,r2,255
    28ac:	1080201c 	xori	r2,r2,128
    28b0:	10bfe004 	addi	r2,r2,-128
    28b4:	1004c03a 	cmpne	r2,r2,zero
    28b8:	10000a1e 	bne	r2,zero,28e4 <alt_find_file+0xe8>
    28bc:	e0bffd17 	ldw	r2,-12(fp)
    28c0:	11000217 	ldw	r4,8(r2)
    28c4:	e1bffc17 	ldw	r6,-16(fp)
    28c8:	e17ffe17 	ldw	r5,-8(fp)
    28cc:	0002ab00 	call	2ab0 <memcmp>
    28d0:	1004c03a 	cmpne	r2,r2,zero
    28d4:	1000031e 	bne	r2,zero,28e4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    28d8:	e0bffd17 	ldw	r2,-12(fp)
    28dc:	e0bfff15 	stw	r2,-4(fp)
    28e0:	00000806 	br	2904 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    28e4:	e0bffd17 	ldw	r2,-12(fp)
    28e8:	10800017 	ldw	r2,0(r2)
    28ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    28f0:	00c00034 	movhi	r3,0
    28f4:	18cc9204 	addi	r3,r3,12872
    28f8:	e0bffd17 	ldw	r2,-12(fp)
    28fc:	10ffc91e 	bne	r2,r3,2824 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2900:	e03fff15 	stw	zero,-4(fp)
    2904:	e0bfff17 	ldw	r2,-4(fp)
}
    2908:	e037883a 	mov	sp,fp
    290c:	dfc00117 	ldw	ra,4(sp)
    2910:	df000017 	ldw	fp,0(sp)
    2914:	dec00204 	addi	sp,sp,8
    2918:	f800283a 	ret

0000291c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    291c:	defffa04 	addi	sp,sp,-24
    2920:	dfc00515 	stw	ra,20(sp)
    2924:	df000415 	stw	fp,16(sp)
    2928:	dc000315 	stw	r16,12(sp)
    292c:	df000304 	addi	fp,sp,12
    2930:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2934:	00bffa04 	movi	r2,-24
    2938:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    293c:	e03ffe15 	stw	zero,-8(fp)
    2940:	00002006 	br	29c4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    2944:	e13ffe17 	ldw	r4,-8(fp)
    2948:	04000034 	movhi	r16,0
    294c:	840c3004 	addi	r16,r16,12480
    2950:	01400304 	movi	r5,12
    2954:	00011ac0 	call	11ac <__mulsi3>
    2958:	1405883a 	add	r2,r2,r16
    295c:	10800017 	ldw	r2,0(r2)
    2960:	1004c03a 	cmpne	r2,r2,zero
    2964:	1000141e 	bne	r2,zero,29b8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    2968:	e13ffe17 	ldw	r4,-8(fp)
    296c:	04000034 	movhi	r16,0
    2970:	840c3004 	addi	r16,r16,12480
    2974:	01400304 	movi	r5,12
    2978:	00011ac0 	call	11ac <__mulsi3>
    297c:	1407883a 	add	r3,r2,r16
    2980:	e0bfff17 	ldw	r2,-4(fp)
    2984:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    2988:	00800034 	movhi	r2,0
    298c:	108c9604 	addi	r2,r2,12888
    2990:	10c00017 	ldw	r3,0(r2)
    2994:	e0bffe17 	ldw	r2,-8(fp)
    2998:	1880040e 	bge	r3,r2,29ac <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    299c:	00c00034 	movhi	r3,0
    29a0:	18cc9604 	addi	r3,r3,12888
    29a4:	e0bffe17 	ldw	r2,-8(fp)
    29a8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    29ac:	e0bffe17 	ldw	r2,-8(fp)
    29b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    29b4:	00000606 	br	29d0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    29b8:	e0bffe17 	ldw	r2,-8(fp)
    29bc:	10800044 	addi	r2,r2,1
    29c0:	e0bffe15 	stw	r2,-8(fp)
    29c4:	e0bffe17 	ldw	r2,-8(fp)
    29c8:	10800810 	cmplti	r2,r2,32
    29cc:	103fdd1e 	bne	r2,zero,2944 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    29d0:	e0bffd17 	ldw	r2,-12(fp)
}
    29d4:	e037883a 	mov	sp,fp
    29d8:	dfc00217 	ldw	ra,8(sp)
    29dc:	df000117 	ldw	fp,4(sp)
    29e0:	dc000017 	ldw	r16,0(sp)
    29e4:	dec00304 	addi	sp,sp,12
    29e8:	f800283a 	ret

000029ec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    29ec:	defffb04 	addi	sp,sp,-20
    29f0:	df000415 	stw	fp,16(sp)
    29f4:	df000404 	addi	fp,sp,16
    29f8:	e13ffe15 	stw	r4,-8(fp)
    29fc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2a00:	e0bfff17 	ldw	r2,-4(fp)
    2a04:	10820070 	cmpltui	r2,r2,2049
    2a08:	1000021e 	bne	r2,zero,2a14 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    2a0c:	00820004 	movi	r2,2048
    2a10:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2a14:	e0fffe17 	ldw	r3,-8(fp)
    2a18:	e0bfff17 	ldw	r2,-4(fp)
    2a1c:	1885883a 	add	r2,r3,r2
    2a20:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2a24:	e0bffe17 	ldw	r2,-8(fp)
    2a28:	e0bffd15 	stw	r2,-12(fp)
    2a2c:	00000506 	br	2a44 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2a30:	e0bffd17 	ldw	r2,-12(fp)
    2a34:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2a38:	e0bffd17 	ldw	r2,-12(fp)
    2a3c:	10800804 	addi	r2,r2,32
    2a40:	e0bffd15 	stw	r2,-12(fp)
    2a44:	e0fffd17 	ldw	r3,-12(fp)
    2a48:	e0bffc17 	ldw	r2,-16(fp)
    2a4c:	18bff836 	bltu	r3,r2,2a30 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2a50:	e0bffe17 	ldw	r2,-8(fp)
    2a54:	108007cc 	andi	r2,r2,31
    2a58:	1005003a 	cmpeq	r2,r2,zero
    2a5c:	1000021e 	bne	r2,zero,2a68 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2a60:	e0bffd17 	ldw	r2,-12(fp)
    2a64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2a68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2a6c:	e037883a 	mov	sp,fp
    2a70:	df000017 	ldw	fp,0(sp)
    2a74:	dec00104 	addi	sp,sp,4
    2a78:	f800283a 	ret

00002a7c <atexit>:
    2a7c:	200b883a 	mov	r5,r4
    2a80:	000d883a 	mov	r6,zero
    2a84:	0009883a 	mov	r4,zero
    2a88:	000f883a 	mov	r7,zero
    2a8c:	0002aec1 	jmpi	2aec <__register_exitproc>

00002a90 <exit>:
    2a90:	defffe04 	addi	sp,sp,-8
    2a94:	dc400015 	stw	r17,0(sp)
    2a98:	000b883a 	mov	r5,zero
    2a9c:	2023883a 	mov	r17,r4
    2aa0:	dfc00115 	stw	ra,4(sp)
    2aa4:	0002c5c0 	call	2c5c <__call_exitprocs>
    2aa8:	8809883a 	mov	r4,r17
    2aac:	0002e580 	call	2e58 <_exit>

00002ab0 <memcmp>:
    2ab0:	31ffffc4 	addi	r7,r6,-1
    2ab4:	3000061e 	bne	r6,zero,2ad0 <memcmp+0x20>
    2ab8:	00000a06 	br	2ae4 <memcmp+0x34>
    2abc:	39ffffc4 	addi	r7,r7,-1
    2ac0:	00bfffc4 	movi	r2,-1
    2ac4:	21000044 	addi	r4,r4,1
    2ac8:	29400044 	addi	r5,r5,1
    2acc:	38800526 	beq	r7,r2,2ae4 <memcmp+0x34>
    2ad0:	20c00003 	ldbu	r3,0(r4)
    2ad4:	28800003 	ldbu	r2,0(r5)
    2ad8:	18bff826 	beq	r3,r2,2abc <memcmp+0xc>
    2adc:	1885c83a 	sub	r2,r3,r2
    2ae0:	f800283a 	ret
    2ae4:	0005883a 	mov	r2,zero
    2ae8:	f800283a 	ret

00002aec <__register_exitproc>:
    2aec:	defff904 	addi	sp,sp,-28
    2af0:	00800034 	movhi	r2,0
    2af4:	108c9104 	addi	r2,r2,12868
    2af8:	dc400115 	stw	r17,4(sp)
    2afc:	14400017 	ldw	r17,0(r2)
    2b00:	dc000015 	stw	r16,0(sp)
    2b04:	dd400515 	stw	r21,20(sp)
    2b08:	8c000c17 	ldw	r16,48(r17)
    2b0c:	dd000415 	stw	r20,16(sp)
    2b10:	dcc00315 	stw	r19,12(sp)
    2b14:	dc800215 	stw	r18,8(sp)
    2b18:	dfc00615 	stw	ra,24(sp)
    2b1c:	2025883a 	mov	r18,r4
    2b20:	282b883a 	mov	r21,r5
    2b24:	3029883a 	mov	r20,r6
    2b28:	3827883a 	mov	r19,r7
    2b2c:	80002626 	beq	r16,zero,2bc8 <__register_exitproc+0xdc>
    2b30:	81400117 	ldw	r5,4(r16)
    2b34:	008007c4 	movi	r2,31
    2b38:	11403716 	blt	r2,r5,2c18 <__register_exitproc+0x12c>
    2b3c:	90002026 	beq	r18,zero,2bc0 <__register_exitproc+0xd4>
    2b40:	81802217 	ldw	r6,136(r16)
    2b44:	30002926 	beq	r6,zero,2bec <__register_exitproc+0x100>
    2b48:	81400117 	ldw	r5,4(r16)
    2b4c:	00c00044 	movi	r3,1
    2b50:	31004017 	ldw	r4,256(r6)
    2b54:	1946983a 	sll	r3,r3,r5
    2b58:	2945883a 	add	r2,r5,r5
    2b5c:	1085883a 	add	r2,r2,r2
    2b60:	1185883a 	add	r2,r2,r6
    2b64:	20c8b03a 	or	r4,r4,r3
    2b68:	14c02015 	stw	r19,128(r2)
    2b6c:	15000015 	stw	r20,0(r2)
    2b70:	00800084 	movi	r2,2
    2b74:	31004015 	stw	r4,256(r6)
    2b78:	90801826 	beq	r18,r2,2bdc <__register_exitproc+0xf0>
    2b7c:	2945883a 	add	r2,r5,r5
    2b80:	1085883a 	add	r2,r2,r2
    2b84:	1405883a 	add	r2,r2,r16
    2b88:	28c00044 	addi	r3,r5,1
    2b8c:	0009883a 	mov	r4,zero
    2b90:	15400215 	stw	r21,8(r2)
    2b94:	80c00115 	stw	r3,4(r16)
    2b98:	2005883a 	mov	r2,r4
    2b9c:	dfc00617 	ldw	ra,24(sp)
    2ba0:	dd400517 	ldw	r21,20(sp)
    2ba4:	dd000417 	ldw	r20,16(sp)
    2ba8:	dcc00317 	ldw	r19,12(sp)
    2bac:	dc800217 	ldw	r18,8(sp)
    2bb0:	dc400117 	ldw	r17,4(sp)
    2bb4:	dc000017 	ldw	r16,0(sp)
    2bb8:	dec00704 	addi	sp,sp,28
    2bbc:	f800283a 	ret
    2bc0:	81400117 	ldw	r5,4(r16)
    2bc4:	003fed06 	br	2b7c <__register_exitproc+0x90>
    2bc8:	00800034 	movhi	r2,0
    2bcc:	108d9e04 	addi	r2,r2,13944
    2bd0:	1021883a 	mov	r16,r2
    2bd4:	88800c15 	stw	r2,48(r17)
    2bd8:	003fd506 	br	2b30 <__register_exitproc+0x44>
    2bdc:	30804117 	ldw	r2,260(r6)
    2be0:	10c4b03a 	or	r2,r2,r3
    2be4:	30804115 	stw	r2,260(r6)
    2be8:	003fe406 	br	2b7c <__register_exitproc+0x90>
    2bec:	00800034 	movhi	r2,0
    2bf0:	10800004 	addi	r2,r2,0
    2bf4:	10000b26 	beq	r2,zero,2c24 <__register_exitproc+0x138>
    2bf8:	01004204 	movi	r4,264
    2bfc:	103ee83a 	callr	r2
    2c00:	10000826 	beq	r2,zero,2c24 <__register_exitproc+0x138>
    2c04:	100d883a 	mov	r6,r2
    2c08:	10004015 	stw	zero,256(r2)
    2c0c:	10004115 	stw	zero,260(r2)
    2c10:	80802215 	stw	r2,136(r16)
    2c14:	003fcc06 	br	2b48 <__register_exitproc+0x5c>
    2c18:	00800034 	movhi	r2,0
    2c1c:	10800004 	addi	r2,r2,0
    2c20:	1000021e 	bne	r2,zero,2c2c <__register_exitproc+0x140>
    2c24:	013fffc4 	movi	r4,-1
    2c28:	003fdb06 	br	2b98 <__register_exitproc+0xac>
    2c2c:	01002304 	movi	r4,140
    2c30:	103ee83a 	callr	r2
    2c34:	1007883a 	mov	r3,r2
    2c38:	103ffa26 	beq	r2,zero,2c24 <__register_exitproc+0x138>
    2c3c:	88800c17 	ldw	r2,48(r17)
    2c40:	1821883a 	mov	r16,r3
    2c44:	18000115 	stw	zero,4(r3)
    2c48:	18800015 	stw	r2,0(r3)
    2c4c:	88c00c15 	stw	r3,48(r17)
    2c50:	903fdb26 	beq	r18,zero,2bc0 <__register_exitproc+0xd4>
    2c54:	003fba06 	br	2b40 <__register_exitproc+0x54>

00002c58 <register_fini>:
    2c58:	f800283a 	ret

00002c5c <__call_exitprocs>:
    2c5c:	defff304 	addi	sp,sp,-52
    2c60:	00800034 	movhi	r2,0
    2c64:	108c9104 	addi	r2,r2,12868
    2c68:	df000b15 	stw	fp,44(sp)
    2c6c:	17000017 	ldw	fp,0(r2)
    2c70:	00800034 	movhi	r2,0
    2c74:	10800004 	addi	r2,r2,0
    2c78:	1005003a 	cmpeq	r2,r2,zero
    2c7c:	d8800215 	stw	r2,8(sp)
    2c80:	e0800c04 	addi	r2,fp,48
    2c84:	dd800915 	stw	r22,36(sp)
    2c88:	dd400815 	stw	r21,32(sp)
    2c8c:	dfc00c15 	stw	ra,48(sp)
    2c90:	ddc00a15 	stw	r23,40(sp)
    2c94:	dd000715 	stw	r20,28(sp)
    2c98:	dcc00615 	stw	r19,24(sp)
    2c9c:	dc800515 	stw	r18,20(sp)
    2ca0:	dc400415 	stw	r17,16(sp)
    2ca4:	dc000315 	stw	r16,12(sp)
    2ca8:	282d883a 	mov	r22,r5
    2cac:	d9000115 	stw	r4,4(sp)
    2cb0:	d8800015 	stw	r2,0(sp)
    2cb4:	282b003a 	cmpeq	r21,r5,zero
    2cb8:	e4400c17 	ldw	r17,48(fp)
    2cbc:	88001226 	beq	r17,zero,2d08 <__call_exitprocs+0xac>
    2cc0:	ddc00017 	ldw	r23,0(sp)
    2cc4:	88800117 	ldw	r2,4(r17)
    2cc8:	8c802217 	ldw	r18,136(r17)
    2ccc:	143fffc4 	addi	r16,r2,-1
    2cd0:	80000b16 	blt	r16,zero,2d00 <__call_exitprocs+0xa4>
    2cd4:	9027003a 	cmpeq	r19,r18,zero
    2cd8:	a800171e 	bne	r21,zero,2d38 <__call_exitprocs+0xdc>
    2cdc:	9800051e 	bne	r19,zero,2cf4 <__call_exitprocs+0x98>
    2ce0:	8409883a 	add	r4,r16,r16
    2ce4:	2105883a 	add	r2,r4,r4
    2ce8:	1485883a 	add	r2,r2,r18
    2cec:	10c02017 	ldw	r3,128(r2)
    2cf0:	b0c01226 	beq	r22,r3,2d3c <__call_exitprocs+0xe0>
    2cf4:	843fffc4 	addi	r16,r16,-1
    2cf8:	00bfffc4 	movi	r2,-1
    2cfc:	80bff61e 	bne	r16,r2,2cd8 <__call_exitprocs+0x7c>
    2d00:	d8800217 	ldw	r2,8(sp)
    2d04:	10003226 	beq	r2,zero,2dd0 <__call_exitprocs+0x174>
    2d08:	dfc00c17 	ldw	ra,48(sp)
    2d0c:	df000b17 	ldw	fp,44(sp)
    2d10:	ddc00a17 	ldw	r23,40(sp)
    2d14:	dd800917 	ldw	r22,36(sp)
    2d18:	dd400817 	ldw	r21,32(sp)
    2d1c:	dd000717 	ldw	r20,28(sp)
    2d20:	dcc00617 	ldw	r19,24(sp)
    2d24:	dc800517 	ldw	r18,20(sp)
    2d28:	dc400417 	ldw	r17,16(sp)
    2d2c:	dc000317 	ldw	r16,12(sp)
    2d30:	dec00d04 	addi	sp,sp,52
    2d34:	f800283a 	ret
    2d38:	8409883a 	add	r4,r16,r16
    2d3c:	88c00117 	ldw	r3,4(r17)
    2d40:	2105883a 	add	r2,r4,r4
    2d44:	1445883a 	add	r2,r2,r17
    2d48:	18ffffc4 	addi	r3,r3,-1
    2d4c:	11800217 	ldw	r6,8(r2)
    2d50:	1c001826 	beq	r3,r16,2db4 <__call_exitprocs+0x158>
    2d54:	10000215 	stw	zero,8(r2)
    2d58:	303fe626 	beq	r6,zero,2cf4 <__call_exitprocs+0x98>
    2d5c:	8d000117 	ldw	r20,4(r17)
    2d60:	9800121e 	bne	r19,zero,2dac <__call_exitprocs+0x150>
    2d64:	00c00044 	movi	r3,1
    2d68:	1c06983a 	sll	r3,r3,r16
    2d6c:	90804017 	ldw	r2,256(r18)
    2d70:	1884703a 	and	r2,r3,r2
    2d74:	10000d26 	beq	r2,zero,2dac <__call_exitprocs+0x150>
    2d78:	90804117 	ldw	r2,260(r18)
    2d7c:	1884703a 	and	r2,r3,r2
    2d80:	10000e1e 	bne	r2,zero,2dbc <__call_exitprocs+0x160>
    2d84:	2105883a 	add	r2,r4,r4
    2d88:	1485883a 	add	r2,r2,r18
    2d8c:	11400017 	ldw	r5,0(r2)
    2d90:	d9000117 	ldw	r4,4(sp)
    2d94:	303ee83a 	callr	r6
    2d98:	88800117 	ldw	r2,4(r17)
    2d9c:	a0bfc61e 	bne	r20,r2,2cb8 <__call_exitprocs+0x5c>
    2da0:	b8800017 	ldw	r2,0(r23)
    2da4:	147fd326 	beq	r2,r17,2cf4 <__call_exitprocs+0x98>
    2da8:	003fc306 	br	2cb8 <__call_exitprocs+0x5c>
    2dac:	303ee83a 	callr	r6
    2db0:	003ff906 	br	2d98 <__call_exitprocs+0x13c>
    2db4:	8c000115 	stw	r16,4(r17)
    2db8:	003fe706 	br	2d58 <__call_exitprocs+0xfc>
    2dbc:	2105883a 	add	r2,r4,r4
    2dc0:	1485883a 	add	r2,r2,r18
    2dc4:	11000017 	ldw	r4,0(r2)
    2dc8:	303ee83a 	callr	r6
    2dcc:	003ff206 	br	2d98 <__call_exitprocs+0x13c>
    2dd0:	88800117 	ldw	r2,4(r17)
    2dd4:	10000b1e 	bne	r2,zero,2e04 <__call_exitprocs+0x1a8>
    2dd8:	89000017 	ldw	r4,0(r17)
    2ddc:	20000a26 	beq	r4,zero,2e08 <__call_exitprocs+0x1ac>
    2de0:	b9000015 	stw	r4,0(r23)
    2de4:	90000226 	beq	r18,zero,2df0 <__call_exitprocs+0x194>
    2de8:	9009883a 	mov	r4,r18
    2dec:	00000000 	call	0 <__alt_mem_onchip_mem>
    2df0:	8809883a 	mov	r4,r17
    2df4:	00000000 	call	0 <__alt_mem_onchip_mem>
    2df8:	bc400017 	ldw	r17,0(r23)
    2dfc:	883fb11e 	bne	r17,zero,2cc4 <__call_exitprocs+0x68>
    2e00:	003fc106 	br	2d08 <__call_exitprocs+0xac>
    2e04:	89000017 	ldw	r4,0(r17)
    2e08:	882f883a 	mov	r23,r17
    2e0c:	2023883a 	mov	r17,r4
    2e10:	883fac1e 	bne	r17,zero,2cc4 <__call_exitprocs+0x68>
    2e14:	003fbc06 	br	2d08 <__call_exitprocs+0xac>

00002e18 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    2e18:	defffd04 	addi	sp,sp,-12
    2e1c:	df000215 	stw	fp,8(sp)
    2e20:	df000204 	addi	fp,sp,8
    2e24:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    2e28:	e0bfff17 	ldw	r2,-4(fp)
    2e2c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2e30:	e0bffe17 	ldw	r2,-8(fp)
    2e34:	1005003a 	cmpeq	r2,r2,zero
    2e38:	1000021e 	bne	r2,zero,2e44 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    2e3c:	002af070 	cmpltui	zero,zero,43969
    2e40:	00000106 	br	2e48 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    2e44:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    2e48:	e037883a 	mov	sp,fp
    2e4c:	df000017 	ldw	fp,0(sp)
    2e50:	dec00104 	addi	sp,sp,4
    2e54:	f800283a 	ret

00002e58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2e58:	defffd04 	addi	sp,sp,-12
    2e5c:	dfc00215 	stw	ra,8(sp)
    2e60:	df000115 	stw	fp,4(sp)
    2e64:	df000104 	addi	fp,sp,4
    2e68:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    2e6c:	e13fff17 	ldw	r4,-4(fp)
    2e70:	0002e180 	call	2e18 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2e74:	003fff06 	br	2e74 <_exit+0x1c>
    2e78:	00002c58 	cmpnei	zero,zero,177
